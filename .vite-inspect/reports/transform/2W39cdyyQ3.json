{
  "resolvedId": "C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/node_modules/.vite/deps/chunk-5MUGQBSR.js?v=c929456e",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "import {\n  Component,\n  ErrorFactory,\n  FirebaseError,\n  LogLevel,\n  Logger,\n  SDK_VERSION,\n  _getProvider,\n  _registerComponent,\n  base64Decode,\n  createSubscribe,\n  deepEqual,\n  extractQuerystring,\n  getApp,\n  getDefaultEmulatorHost,\n  getExperimentalSetting,\n  getModularInstance,\n  getUA,\n  isBrowserExtension,\n  isEmpty,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  querystring,\n  querystringDecode,\n  registerVersion\n} from \"./chunk-B7GYBXJM.js\";\n\n// node_modules/tslib/tslib.es6.mjs\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s)\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n        t[p[i]] = s[p[i]];\n    }\n  return t;\n}\n\n// node_modules/@firebase/auth/dist/esm2017/index-61e5ac61.js\nvar FactorId = {\n  /** Phone as second factor */\n  PHONE: \"phone\",\n  TOTP: \"totp\"\n};\nvar ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: \"facebook.com\",\n  /** GitHub provider ID */\n  GITHUB: \"github.com\",\n  /** Google provider ID */\n  GOOGLE: \"google.com\",\n  /** Password provider */\n  PASSWORD: \"password\",\n  /** Phone provider */\n  PHONE: \"phone\",\n  /** Twitter provider ID */\n  TWITTER: \"twitter.com\"\n};\nvar SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: \"emailLink\",\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: \"password\",\n  /** Facebook sign in method */\n  FACEBOOK: \"facebook.com\",\n  /** GitHub sign in method */\n  GITHUB: \"github.com\",\n  /** Google sign in method */\n  GOOGLE: \"google.com\",\n  /** Phone sign in method */\n  PHONE: \"phone\",\n  /** Twitter sign in method */\n  TWITTER: \"twitter.com\"\n};\nvar OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: \"link\",\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: \"reauthenticate\",\n  /** Operation involving signing in a user. */\n  SIGN_IN: \"signIn\"\n};\nvar ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: \"EMAIL_SIGNIN\",\n  /** The password reset action. */\n  PASSWORD_RESET: \"PASSWORD_RESET\",\n  /** The email revocation action. */\n  RECOVER_EMAIL: \"RECOVER_EMAIL\",\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\",\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\",\n  /** The email verification action. */\n  VERIFY_EMAIL: \"VERIFY_EMAIL\"\n};\nfunction _debugErrorMap() {\n  return {\n    [\n      \"admin-restricted-operation\"\n      /* AuthErrorCode.ADMIN_ONLY_OPERATION */\n    ]: \"This operation is restricted to administrators only.\",\n    [\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    ]: \"\",\n    [\n      \"app-not-authorized\"\n      /* AuthErrorCode.APP_NOT_AUTHORIZED */\n    ]: \"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.\",\n    [\n      \"app-not-installed\"\n      /* AuthErrorCode.APP_NOT_INSTALLED */\n    ]: \"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.\",\n    [\n      \"captcha-check-failed\"\n      /* AuthErrorCode.CAPTCHA_CHECK_FAILED */\n    ]: \"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.\",\n    [\n      \"code-expired\"\n      /* AuthErrorCode.CODE_EXPIRED */\n    ]: \"The SMS code has expired. Please re-send the verification code to try again.\",\n    [\n      \"cordova-not-ready\"\n      /* AuthErrorCode.CORDOVA_NOT_READY */\n    ]: \"Cordova framework is not ready.\",\n    [\n      \"cors-unsupported\"\n      /* AuthErrorCode.CORS_UNSUPPORTED */\n    ]: \"This browser is not supported.\",\n    [\n      \"credential-already-in-use\"\n      /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */\n    ]: \"This credential is already associated with a different user account.\",\n    [\n      \"custom-token-mismatch\"\n      /* AuthErrorCode.CREDENTIAL_MISMATCH */\n    ]: \"The custom token corresponds to a different audience.\",\n    [\n      \"requires-recent-login\"\n      /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */\n    ]: \"This operation is sensitive and requires recent authentication. Log in again before retrying this request.\",\n    [\n      \"dependent-sdk-initialized-before-auth\"\n      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */\n    ]: \"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.\",\n    [\n      \"dynamic-link-not-activated\"\n      /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */\n    ]: \"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.\",\n    [\n      \"email-change-needs-verification\"\n      /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */\n    ]: \"Multi-factor users must always have a verified email.\",\n    [\n      \"email-already-in-use\"\n      /* AuthErrorCode.EMAIL_EXISTS */\n    ]: \"The email address is already in use by another account.\",\n    [\n      \"emulator-config-failed\"\n      /* AuthErrorCode.EMULATOR_CONFIG_FAILED */\n    ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling \"connectAuthEmulator()\" sooner.',\n    [\n      \"expired-action-code\"\n      /* AuthErrorCode.EXPIRED_OOB_CODE */\n    ]: \"The action code has expired.\",\n    [\n      \"cancelled-popup-request\"\n      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */\n    ]: \"This operation has been cancelled due to another conflicting popup being opened.\",\n    [\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"invalid-app-credential\"\n      /* AuthErrorCode.INVALID_APP_CREDENTIAL */\n    ]: \"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.\",\n    [\n      \"invalid-app-id\"\n      /* AuthErrorCode.INVALID_APP_ID */\n    ]: \"The mobile app identifier is not registed for the current project.\",\n    [\n      \"invalid-user-token\"\n      /* AuthErrorCode.INVALID_AUTH */\n    ]: \"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.\",\n    [\n      \"invalid-auth-event\"\n      /* AuthErrorCode.INVALID_AUTH_EVENT */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"invalid-verification-code\"\n      /* AuthErrorCode.INVALID_CODE */\n    ]: \"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.\",\n    [\n      \"invalid-continue-uri\"\n      /* AuthErrorCode.INVALID_CONTINUE_URI */\n    ]: \"The continue URL provided in the request is invalid.\",\n    [\n      \"invalid-cordova-configuration\"\n      /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */\n    ]: \"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.\",\n    [\n      \"invalid-custom-token\"\n      /* AuthErrorCode.INVALID_CUSTOM_TOKEN */\n    ]: \"The custom token format is incorrect. Please check the documentation.\",\n    [\n      \"invalid-dynamic-link-domain\"\n      /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */\n    ]: \"The provided dynamic link domain is not configured or authorized for the current project.\",\n    [\n      \"invalid-email\"\n      /* AuthErrorCode.INVALID_EMAIL */\n    ]: \"The email address is badly formatted.\",\n    [\n      \"invalid-emulator-scheme\"\n      /* AuthErrorCode.INVALID_EMULATOR_SCHEME */\n    ]: \"Emulator URL must start with a valid scheme (http:// or https://).\",\n    [\n      \"invalid-api-key\"\n      /* AuthErrorCode.INVALID_API_KEY */\n    ]: \"Your API key is invalid, please check you have copied it correctly.\",\n    [\n      \"invalid-cert-hash\"\n      /* AuthErrorCode.INVALID_CERT_HASH */\n    ]: \"The SHA-1 certificate hash provided is invalid.\",\n    [\n      \"invalid-credential\"\n      /* AuthErrorCode.INVALID_IDP_RESPONSE */\n    ]: \"The supplied auth credential is malformed or has expired.\",\n    [\n      \"invalid-message-payload\"\n      /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */\n    ]: \"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.\",\n    [\n      \"invalid-multi-factor-session\"\n      /* AuthErrorCode.INVALID_MFA_SESSION */\n    ]: \"The request does not contain a valid proof of first factor successful sign-in.\",\n    [\n      \"invalid-oauth-provider\"\n      /* AuthErrorCode.INVALID_OAUTH_PROVIDER */\n    ]: \"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.\",\n    [\n      \"invalid-oauth-client-id\"\n      /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */\n    ]: \"The OAuth client ID provided is either invalid or does not match the specified API key.\",\n    [\n      \"unauthorized-domain\"\n      /* AuthErrorCode.INVALID_ORIGIN */\n    ]: \"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.\",\n    [\n      \"invalid-action-code\"\n      /* AuthErrorCode.INVALID_OOB_CODE */\n    ]: \"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.\",\n    [\n      \"wrong-password\"\n      /* AuthErrorCode.INVALID_PASSWORD */\n    ]: \"The password is invalid or the user does not have a password.\",\n    [\n      \"invalid-persistence-type\"\n      /* AuthErrorCode.INVALID_PERSISTENCE */\n    ]: \"The specified persistence type is invalid. It can only be local, session or none.\",\n    [\n      \"invalid-phone-number\"\n      /* AuthErrorCode.INVALID_PHONE_NUMBER */\n    ]: \"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].\",\n    [\n      \"invalid-provider-id\"\n      /* AuthErrorCode.INVALID_PROVIDER_ID */\n    ]: \"The specified provider ID is invalid.\",\n    [\n      \"invalid-recipient-email\"\n      /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */\n    ]: \"The email corresponding to this action failed to send as the provided recipient email address is invalid.\",\n    [\n      \"invalid-sender\"\n      /* AuthErrorCode.INVALID_SENDER */\n    ]: \"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.\",\n    [\n      \"invalid-verification-id\"\n      /* AuthErrorCode.INVALID_SESSION_INFO */\n    ]: \"The verification ID used to create the phone auth credential is invalid.\",\n    [\n      \"invalid-tenant-id\"\n      /* AuthErrorCode.INVALID_TENANT_ID */\n    ]: \"The Auth instance's tenant ID is invalid.\",\n    [\n      \"login-blocked\"\n      /* AuthErrorCode.LOGIN_BLOCKED */\n    ]: \"Login blocked by user-provided method: {$originalMessage}\",\n    [\n      \"missing-android-pkg-name\"\n      /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */\n    ]: \"An Android Package Name must be provided if the Android App is required to be installed.\",\n    [\n      \"auth-domain-config-required\"\n      /* AuthErrorCode.MISSING_AUTH_DOMAIN */\n    ]: \"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.\",\n    [\n      \"missing-app-credential\"\n      /* AuthErrorCode.MISSING_APP_CREDENTIAL */\n    ]: \"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.\",\n    [\n      \"missing-verification-code\"\n      /* AuthErrorCode.MISSING_CODE */\n    ]: \"The phone auth credential was created with an empty SMS verification code.\",\n    [\n      \"missing-continue-uri\"\n      /* AuthErrorCode.MISSING_CONTINUE_URI */\n    ]: \"A continue URL must be provided in the request.\",\n    [\n      \"missing-iframe-start\"\n      /* AuthErrorCode.MISSING_IFRAME_START */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"missing-ios-bundle-id\"\n      /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */\n    ]: \"An iOS Bundle ID must be provided if an App Store ID is provided.\",\n    [\n      \"missing-or-invalid-nonce\"\n      /* AuthErrorCode.MISSING_OR_INVALID_NONCE */\n    ]: \"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.\",\n    [\n      \"missing-password\"\n      /* AuthErrorCode.MISSING_PASSWORD */\n    ]: \"A non-empty password must be provided\",\n    [\n      \"missing-multi-factor-info\"\n      /* AuthErrorCode.MISSING_MFA_INFO */\n    ]: \"No second factor identifier is provided.\",\n    [\n      \"missing-multi-factor-session\"\n      /* AuthErrorCode.MISSING_MFA_SESSION */\n    ]: \"The request is missing proof of first factor successful sign-in.\",\n    [\n      \"missing-phone-number\"\n      /* AuthErrorCode.MISSING_PHONE_NUMBER */\n    ]: \"To send verification codes, provide a phone number for the recipient.\",\n    [\n      \"missing-verification-id\"\n      /* AuthErrorCode.MISSING_SESSION_INFO */\n    ]: \"The phone auth credential was created with an empty verification ID.\",\n    [\n      \"app-deleted\"\n      /* AuthErrorCode.MODULE_DESTROYED */\n    ]: \"This instance of FirebaseApp has been deleted.\",\n    [\n      \"multi-factor-info-not-found\"\n      /* AuthErrorCode.MFA_INFO_NOT_FOUND */\n    ]: \"The user does not have a second factor matching the identifier provided.\",\n    [\n      \"multi-factor-auth-required\"\n      /* AuthErrorCode.MFA_REQUIRED */\n    ]: \"Proof of ownership of a second factor is required to complete sign-in.\",\n    [\n      \"account-exists-with-different-credential\"\n      /* AuthErrorCode.NEED_CONFIRMATION */\n    ]: \"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.\",\n    [\n      \"network-request-failed\"\n      /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n    ]: \"A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.\",\n    [\n      \"no-auth-event\"\n      /* AuthErrorCode.NO_AUTH_EVENT */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"no-such-provider\"\n      /* AuthErrorCode.NO_SUCH_PROVIDER */\n    ]: \"User was not linked to an account with the given provider.\",\n    [\n      \"null-user\"\n      /* AuthErrorCode.NULL_USER */\n    ]: \"A null user object was provided as the argument for an operation which requires a non-null user object.\",\n    [\n      \"operation-not-allowed\"\n      /* AuthErrorCode.OPERATION_NOT_ALLOWED */\n    ]: \"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.\",\n    [\n      \"operation-not-supported-in-this-environment\"\n      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */\n    ]: 'This operation is not supported in the environment this application is running on. \"location.protocol\" must be http, https or chrome-extension and web storage must be enabled.',\n    [\n      \"popup-blocked\"\n      /* AuthErrorCode.POPUP_BLOCKED */\n    ]: \"Unable to establish a connection with the popup. It may have been blocked by the browser.\",\n    [\n      \"popup-closed-by-user\"\n      /* AuthErrorCode.POPUP_CLOSED_BY_USER */\n    ]: \"The popup has been closed by the user before finalizing the operation.\",\n    [\n      \"provider-already-linked\"\n      /* AuthErrorCode.PROVIDER_ALREADY_LINKED */\n    ]: \"User can only be linked to one identity for the given provider.\",\n    [\n      \"quota-exceeded\"\n      /* AuthErrorCode.QUOTA_EXCEEDED */\n    ]: \"The project's quota for this operation has been exceeded.\",\n    [\n      \"redirect-cancelled-by-user\"\n      /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */\n    ]: \"The redirect operation has been cancelled by the user before finalizing.\",\n    [\n      \"redirect-operation-pending\"\n      /* AuthErrorCode.REDIRECT_OPERATION_PENDING */\n    ]: \"A redirect sign-in operation is already pending.\",\n    [\n      \"rejected-credential\"\n      /* AuthErrorCode.REJECTED_CREDENTIAL */\n    ]: \"The request contains malformed or mismatching credentials.\",\n    [\n      \"second-factor-already-in-use\"\n      /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */\n    ]: \"The second factor is already enrolled on this account.\",\n    [\n      \"maximum-second-factor-count-exceeded\"\n      /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */\n    ]: \"The maximum allowed number of second factors on a user has been exceeded.\",\n    [\n      \"tenant-id-mismatch\"\n      /* AuthErrorCode.TENANT_ID_MISMATCH */\n    ]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [\n      \"timeout\"\n      /* AuthErrorCode.TIMEOUT */\n    ]: \"The operation has timed out.\",\n    [\n      \"user-token-expired\"\n      /* AuthErrorCode.TOKEN_EXPIRED */\n    ]: \"The user's credential is no longer valid. The user must sign in again.\",\n    [\n      \"too-many-requests\"\n      /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */\n    ]: \"We have blocked all requests from this device due to unusual activity. Try again later.\",\n    [\n      \"unauthorized-continue-uri\"\n      /* AuthErrorCode.UNAUTHORIZED_DOMAIN */\n    ]: \"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.\",\n    [\n      \"unsupported-first-factor\"\n      /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */\n    ]: \"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.\",\n    [\n      \"unsupported-persistence-type\"\n      /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */\n    ]: \"The current environment does not support the specified persistence type.\",\n    [\n      \"unsupported-tenant-operation\"\n      /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */\n    ]: \"This operation is not supported in a multi-tenant context.\",\n    [\n      \"unverified-email\"\n      /* AuthErrorCode.UNVERIFIED_EMAIL */\n    ]: \"The operation requires a verified email.\",\n    [\n      \"user-cancelled\"\n      /* AuthErrorCode.USER_CANCELLED */\n    ]: \"The user did not grant your application the permissions it requested.\",\n    [\n      \"user-not-found\"\n      /* AuthErrorCode.USER_DELETED */\n    ]: \"There is no user record corresponding to this identifier. The user may have been deleted.\",\n    [\n      \"user-disabled\"\n      /* AuthErrorCode.USER_DISABLED */\n    ]: \"The user account has been disabled by an administrator.\",\n    [\n      \"user-mismatch\"\n      /* AuthErrorCode.USER_MISMATCH */\n    ]: \"The supplied credentials do not correspond to the previously signed in user.\",\n    [\n      \"user-signed-out\"\n      /* AuthErrorCode.USER_SIGNED_OUT */\n    ]: \"\",\n    [\n      \"weak-password\"\n      /* AuthErrorCode.WEAK_PASSWORD */\n    ]: \"The password must be 6 characters long or more.\",\n    [\n      \"web-storage-unsupported\"\n      /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */\n    ]: \"This browser is not supported or 3rd party cookies and data may be disabled.\",\n    [\n      \"already-initialized\"\n      /* AuthErrorCode.ALREADY_INITIALIZED */\n    ]: \"initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.\",\n    [\n      \"missing-recaptcha-token\"\n      /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */\n    ]: \"The reCAPTCHA token is missing when sending request to the backend.\",\n    [\n      \"invalid-recaptcha-token\"\n      /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */\n    ]: \"The reCAPTCHA token is invalid when sending request to the backend.\",\n    [\n      \"invalid-recaptcha-action\"\n      /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */\n    ]: \"The reCAPTCHA action is invalid when sending request to the backend.\",\n    [\n      \"recaptcha-not-enabled\"\n      /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */\n    ]: \"reCAPTCHA Enterprise integration is not enabled for this project.\",\n    [\n      \"missing-client-type\"\n      /* AuthErrorCode.MISSING_CLIENT_TYPE */\n    ]: \"The reCAPTCHA client type is missing when sending request to the backend.\",\n    [\n      \"missing-recaptcha-version\"\n      /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */\n    ]: \"The reCAPTCHA version is missing when sending request to the backend.\",\n    [\n      \"invalid-req-type\"\n      /* AuthErrorCode.INVALID_REQ_TYPE */\n    ]: \"Invalid request parameters.\",\n    [\n      \"invalid-recaptcha-version\"\n      /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */\n    ]: \"The reCAPTCHA version is invalid when sending request to the backend.\",\n    [\n      \"unsupported-password-policy-schema-version\"\n      /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */\n    ]: \"The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.\",\n    [\n      \"password-does-not-meet-requirements\"\n      /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */\n    ]: \"The password does not meet the requirements.\"\n  };\n}\nfunction _prodErrorMap() {\n  return {\n    [\n      \"dependent-sdk-initialized-before-auth\"\n      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */\n    ]: \"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.\"\n  };\n}\nvar debugErrorMap = _debugErrorMap;\nvar prodErrorMap = _prodErrorMap;\nvar _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory(\"auth\", \"Firebase\", _prodErrorMap());\nvar AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: \"auth/admin-restricted-operation\",\n  ARGUMENT_ERROR: \"auth/argument-error\",\n  APP_NOT_AUTHORIZED: \"auth/app-not-authorized\",\n  APP_NOT_INSTALLED: \"auth/app-not-installed\",\n  CAPTCHA_CHECK_FAILED: \"auth/captcha-check-failed\",\n  CODE_EXPIRED: \"auth/code-expired\",\n  CORDOVA_NOT_READY: \"auth/cordova-not-ready\",\n  CORS_UNSUPPORTED: \"auth/cors-unsupported\",\n  CREDENTIAL_ALREADY_IN_USE: \"auth/credential-already-in-use\",\n  CREDENTIAL_MISMATCH: \"auth/custom-token-mismatch\",\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: \"auth/requires-recent-login\",\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: \"auth/dependent-sdk-initialized-before-auth\",\n  DYNAMIC_LINK_NOT_ACTIVATED: \"auth/dynamic-link-not-activated\",\n  EMAIL_CHANGE_NEEDS_VERIFICATION: \"auth/email-change-needs-verification\",\n  EMAIL_EXISTS: \"auth/email-already-in-use\",\n  EMULATOR_CONFIG_FAILED: \"auth/emulator-config-failed\",\n  EXPIRED_OOB_CODE: \"auth/expired-action-code\",\n  EXPIRED_POPUP_REQUEST: \"auth/cancelled-popup-request\",\n  INTERNAL_ERROR: \"auth/internal-error\",\n  INVALID_API_KEY: \"auth/invalid-api-key\",\n  INVALID_APP_CREDENTIAL: \"auth/invalid-app-credential\",\n  INVALID_APP_ID: \"auth/invalid-app-id\",\n  INVALID_AUTH: \"auth/invalid-user-token\",\n  INVALID_AUTH_EVENT: \"auth/invalid-auth-event\",\n  INVALID_CERT_HASH: \"auth/invalid-cert-hash\",\n  INVALID_CODE: \"auth/invalid-verification-code\",\n  INVALID_CONTINUE_URI: \"auth/invalid-continue-uri\",\n  INVALID_CORDOVA_CONFIGURATION: \"auth/invalid-cordova-configuration\",\n  INVALID_CUSTOM_TOKEN: \"auth/invalid-custom-token\",\n  INVALID_DYNAMIC_LINK_DOMAIN: \"auth/invalid-dynamic-link-domain\",\n  INVALID_EMAIL: \"auth/invalid-email\",\n  INVALID_EMULATOR_SCHEME: \"auth/invalid-emulator-scheme\",\n  INVALID_IDP_RESPONSE: \"auth/invalid-credential\",\n  INVALID_MESSAGE_PAYLOAD: \"auth/invalid-message-payload\",\n  INVALID_MFA_SESSION: \"auth/invalid-multi-factor-session\",\n  INVALID_OAUTH_CLIENT_ID: \"auth/invalid-oauth-client-id\",\n  INVALID_OAUTH_PROVIDER: \"auth/invalid-oauth-provider\",\n  INVALID_OOB_CODE: \"auth/invalid-action-code\",\n  INVALID_ORIGIN: \"auth/unauthorized-domain\",\n  INVALID_PASSWORD: \"auth/wrong-password\",\n  INVALID_PERSISTENCE: \"auth/invalid-persistence-type\",\n  INVALID_PHONE_NUMBER: \"auth/invalid-phone-number\",\n  INVALID_PROVIDER_ID: \"auth/invalid-provider-id\",\n  INVALID_RECIPIENT_EMAIL: \"auth/invalid-recipient-email\",\n  INVALID_SENDER: \"auth/invalid-sender\",\n  INVALID_SESSION_INFO: \"auth/invalid-verification-id\",\n  INVALID_TENANT_ID: \"auth/invalid-tenant-id\",\n  MFA_INFO_NOT_FOUND: \"auth/multi-factor-info-not-found\",\n  MFA_REQUIRED: \"auth/multi-factor-auth-required\",\n  MISSING_ANDROID_PACKAGE_NAME: \"auth/missing-android-pkg-name\",\n  MISSING_APP_CREDENTIAL: \"auth/missing-app-credential\",\n  MISSING_AUTH_DOMAIN: \"auth/auth-domain-config-required\",\n  MISSING_CODE: \"auth/missing-verification-code\",\n  MISSING_CONTINUE_URI: \"auth/missing-continue-uri\",\n  MISSING_IFRAME_START: \"auth/missing-iframe-start\",\n  MISSING_IOS_BUNDLE_ID: \"auth/missing-ios-bundle-id\",\n  MISSING_OR_INVALID_NONCE: \"auth/missing-or-invalid-nonce\",\n  MISSING_MFA_INFO: \"auth/missing-multi-factor-info\",\n  MISSING_MFA_SESSION: \"auth/missing-multi-factor-session\",\n  MISSING_PHONE_NUMBER: \"auth/missing-phone-number\",\n  MISSING_SESSION_INFO: \"auth/missing-verification-id\",\n  MODULE_DESTROYED: \"auth/app-deleted\",\n  NEED_CONFIRMATION: \"auth/account-exists-with-different-credential\",\n  NETWORK_REQUEST_FAILED: \"auth/network-request-failed\",\n  NULL_USER: \"auth/null-user\",\n  NO_AUTH_EVENT: \"auth/no-auth-event\",\n  NO_SUCH_PROVIDER: \"auth/no-such-provider\",\n  OPERATION_NOT_ALLOWED: \"auth/operation-not-allowed\",\n  OPERATION_NOT_SUPPORTED: \"auth/operation-not-supported-in-this-environment\",\n  POPUP_BLOCKED: \"auth/popup-blocked\",\n  POPUP_CLOSED_BY_USER: \"auth/popup-closed-by-user\",\n  PROVIDER_ALREADY_LINKED: \"auth/provider-already-linked\",\n  QUOTA_EXCEEDED: \"auth/quota-exceeded\",\n  REDIRECT_CANCELLED_BY_USER: \"auth/redirect-cancelled-by-user\",\n  REDIRECT_OPERATION_PENDING: \"auth/redirect-operation-pending\",\n  REJECTED_CREDENTIAL: \"auth/rejected-credential\",\n  SECOND_FACTOR_ALREADY_ENROLLED: \"auth/second-factor-already-in-use\",\n  SECOND_FACTOR_LIMIT_EXCEEDED: \"auth/maximum-second-factor-count-exceeded\",\n  TENANT_ID_MISMATCH: \"auth/tenant-id-mismatch\",\n  TIMEOUT: \"auth/timeout\",\n  TOKEN_EXPIRED: \"auth/user-token-expired\",\n  TOO_MANY_ATTEMPTS_TRY_LATER: \"auth/too-many-requests\",\n  UNAUTHORIZED_DOMAIN: \"auth/unauthorized-continue-uri\",\n  UNSUPPORTED_FIRST_FACTOR: \"auth/unsupported-first-factor\",\n  UNSUPPORTED_PERSISTENCE: \"auth/unsupported-persistence-type\",\n  UNSUPPORTED_TENANT_OPERATION: \"auth/unsupported-tenant-operation\",\n  UNVERIFIED_EMAIL: \"auth/unverified-email\",\n  USER_CANCELLED: \"auth/user-cancelled\",\n  USER_DELETED: \"auth/user-not-found\",\n  USER_DISABLED: \"auth/user-disabled\",\n  USER_MISMATCH: \"auth/user-mismatch\",\n  USER_SIGNED_OUT: \"auth/user-signed-out\",\n  WEAK_PASSWORD: \"auth/weak-password\",\n  WEB_STORAGE_UNSUPPORTED: \"auth/web-storage-unsupported\",\n  ALREADY_INITIALIZED: \"auth/already-initialized\",\n  RECAPTCHA_NOT_ENABLED: \"auth/recaptcha-not-enabled\",\n  MISSING_RECAPTCHA_TOKEN: \"auth/missing-recaptcha-token\",\n  INVALID_RECAPTCHA_TOKEN: \"auth/invalid-recaptcha-token\",\n  INVALID_RECAPTCHA_ACTION: \"auth/invalid-recaptcha-action\",\n  MISSING_CLIENT_TYPE: \"auth/missing-client-type\",\n  MISSING_RECAPTCHA_VERSION: \"auth/missing-recaptcha-version\",\n  INVALID_RECAPTCHA_VERSION: \"auth/invalid-recaptcha-version\",\n  INVALID_REQ_TYPE: \"auth/invalid-req-type\"\n};\nvar logClient = new Logger(\"@firebase/auth\");\nfunction _logWarn(msg, ...args) {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction _logError(msg, ...args) {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction _fail(authOrCode, ...rest) {\n  throw createErrorInternal(authOrCode, ...rest);\n}\nfunction _createError(authOrCode, ...rest) {\n  return createErrorInternal(authOrCode, ...rest);\n}\nfunction _errorWithCustomMessage(auth, code, message) {\n  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });\n  const factory = new ErrorFactory(\"auth\", \"Firebase\", errorMap);\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\nfunction _assertInstanceOf(auth, object, instance) {\n  const constructorInstance = instance;\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(\n        auth,\n        \"argument-error\"\n        /* AuthErrorCode.ARGUMENT_ERROR */\n      );\n    }\n    throw _errorWithCustomMessage(auth, \"argument-error\", `Type of ${object.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);\n  }\n}\nfunction createErrorInternal(authOrCode, ...rest) {\n  if (typeof authOrCode !== \"string\") {\n    const code = rest[0];\n    const fullParams = [...rest.slice(1)];\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n    return authOrCode._errorFactory.create(code, ...fullParams);\n  }\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n}\nfunction _assert(assertion, authOrCode, ...rest) {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\nfunction debugFail(failure) {\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n  throw new Error(message);\n}\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\nfunction _getCurrentUrl() {\n  var _a;\n  return typeof self !== \"undefined\" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || \"\";\n}\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === \"http:\" || _getCurrentScheme() === \"https:\";\n}\nfunction _getCurrentScheme() {\n  var _a;\n  return typeof self !== \"undefined\" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\nfunction _isOnline() {\n  if (typeof navigator !== \"undefined\" && navigator && \"onLine\" in navigator && typeof navigator.onLine === \"boolean\" && // Apply only for traditional web apps and Chrome extensions.\n  // This is especially true for Cordova apps which have unreliable\n  // navigator.onLine behavior unless cordova-plugin-network-information is\n  // installed which overwrites the native navigator.onLine value and\n  // defines navigator.connection.\n  (_isHttpOrHttps() || isBrowserExtension() || \"connection\" in navigator)) {\n    return navigator.onLine;\n  }\n  return true;\n}\nfunction _getUserLanguage() {\n  if (typeof navigator === \"undefined\") {\n    return null;\n  }\n  const navigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language || // Couldn't determine language.\n    null\n  );\n}\nvar Delay = class {\n  constructor(shortDelay, longDelay) {\n    this.shortDelay = shortDelay;\n    this.longDelay = longDelay;\n    debugAssert(longDelay > shortDelay, \"Short delay should be less than long delay!\");\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n  get() {\n    if (!_isOnline()) {\n      return Math.min(5e3, this.shortDelay);\n    }\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n};\nfunction _emulatorUrl(config, path) {\n  debugAssert(config.emulator, \"Emulator should always be set here\");\n  const { url } = config.emulator;\n  if (!path) {\n    return url;\n  }\n  return `${url}${path.startsWith(\"/\") ? path.slice(1) : path}`;\n}\nvar FetchProvider = class {\n  static initialize(fetchImpl, headersImpl, responseImpl) {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n  static fetch() {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== \"undefined\" && \"fetch\" in self) {\n      return self.fetch;\n    }\n    if (typeof globalThis !== \"undefined\" && globalThis.fetch) {\n      return globalThis.fetch;\n    }\n    if (typeof fetch !== \"undefined\") {\n      return fetch;\n    }\n    debugFail(\"Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n  }\n  static headers() {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== \"undefined\" && \"Headers\" in self) {\n      return self.Headers;\n    }\n    if (typeof globalThis !== \"undefined\" && globalThis.Headers) {\n      return globalThis.Headers;\n    }\n    if (typeof Headers !== \"undefined\") {\n      return Headers;\n    }\n    debugFail(\"Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n  }\n  static response() {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== \"undefined\" && \"Response\" in self) {\n      return self.Response;\n    }\n    if (typeof globalThis !== \"undefined\" && globalThis.Response) {\n      return globalThis.Response;\n    }\n    if (typeof Response !== \"undefined\") {\n      return Response;\n    }\n    debugFail(\"Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n  }\n};\nvar SERVER_ERROR_MAP = {\n  // Custom token errors.\n  [\n    \"CREDENTIAL_MISMATCH\"\n    /* ServerError.CREDENTIAL_MISMATCH */\n  ]: \"custom-token-mismatch\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_CUSTOM_TOKEN\"\n    /* ServerError.MISSING_CUSTOM_TOKEN */\n  ]: \"internal-error\",\n  // Create Auth URI errors.\n  [\n    \"INVALID_IDENTIFIER\"\n    /* ServerError.INVALID_IDENTIFIER */\n  ]: \"invalid-email\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_CONTINUE_URI\"\n    /* ServerError.MISSING_CONTINUE_URI */\n  ]: \"internal-error\",\n  // Sign in with email and password errors (some apply to sign up too).\n  [\n    \"INVALID_PASSWORD\"\n    /* ServerError.INVALID_PASSWORD */\n  ]: \"wrong-password\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_PASSWORD\"\n    /* ServerError.MISSING_PASSWORD */\n  ]: \"missing-password\",\n  // Sign up with email and password errors.\n  [\n    \"EMAIL_EXISTS\"\n    /* ServerError.EMAIL_EXISTS */\n  ]: \"email-already-in-use\",\n  [\n    \"PASSWORD_LOGIN_DISABLED\"\n    /* ServerError.PASSWORD_LOGIN_DISABLED */\n  ]: \"operation-not-allowed\",\n  // Verify assertion for sign in with credential errors:\n  [\n    \"INVALID_IDP_RESPONSE\"\n    /* ServerError.INVALID_IDP_RESPONSE */\n  ]: \"invalid-credential\",\n  [\n    \"INVALID_PENDING_TOKEN\"\n    /* ServerError.INVALID_PENDING_TOKEN */\n  ]: \"invalid-credential\",\n  [\n    \"FEDERATED_USER_ID_ALREADY_LINKED\"\n    /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */\n  ]: \"credential-already-in-use\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_REQ_TYPE\"\n    /* ServerError.MISSING_REQ_TYPE */\n  ]: \"internal-error\",\n  // Send Password reset email errors:\n  [\n    \"EMAIL_NOT_FOUND\"\n    /* ServerError.EMAIL_NOT_FOUND */\n  ]: \"user-not-found\",\n  [\n    \"RESET_PASSWORD_EXCEED_LIMIT\"\n    /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */\n  ]: \"too-many-requests\",\n  [\n    \"EXPIRED_OOB_CODE\"\n    /* ServerError.EXPIRED_OOB_CODE */\n  ]: \"expired-action-code\",\n  [\n    \"INVALID_OOB_CODE\"\n    /* ServerError.INVALID_OOB_CODE */\n  ]: \"invalid-action-code\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_OOB_CODE\"\n    /* ServerError.MISSING_OOB_CODE */\n  ]: \"internal-error\",\n  // Operations that require ID token in request:\n  [\n    \"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\"\n    /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */\n  ]: \"requires-recent-login\",\n  [\n    \"INVALID_ID_TOKEN\"\n    /* ServerError.INVALID_ID_TOKEN */\n  ]: \"invalid-user-token\",\n  [\n    \"TOKEN_EXPIRED\"\n    /* ServerError.TOKEN_EXPIRED */\n  ]: \"user-token-expired\",\n  [\n    \"USER_NOT_FOUND\"\n    /* ServerError.USER_NOT_FOUND */\n  ]: \"user-token-expired\",\n  // Other errors.\n  [\n    \"TOO_MANY_ATTEMPTS_TRY_LATER\"\n    /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */\n  ]: \"too-many-requests\",\n  [\n    \"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\"\n    /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */\n  ]: \"password-does-not-meet-requirements\",\n  // Phone Auth related errors.\n  [\n    \"INVALID_CODE\"\n    /* ServerError.INVALID_CODE */\n  ]: \"invalid-verification-code\",\n  [\n    \"INVALID_SESSION_INFO\"\n    /* ServerError.INVALID_SESSION_INFO */\n  ]: \"invalid-verification-id\",\n  [\n    \"INVALID_TEMPORARY_PROOF\"\n    /* ServerError.INVALID_TEMPORARY_PROOF */\n  ]: \"invalid-credential\",\n  [\n    \"MISSING_SESSION_INFO\"\n    /* ServerError.MISSING_SESSION_INFO */\n  ]: \"missing-verification-id\",\n  [\n    \"SESSION_EXPIRED\"\n    /* ServerError.SESSION_EXPIRED */\n  ]: \"code-expired\",\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [\n    \"MISSING_ANDROID_PACKAGE_NAME\"\n    /* ServerError.MISSING_ANDROID_PACKAGE_NAME */\n  ]: \"missing-android-pkg-name\",\n  [\n    \"UNAUTHORIZED_DOMAIN\"\n    /* ServerError.UNAUTHORIZED_DOMAIN */\n  ]: \"unauthorized-continue-uri\",\n  // getProjectConfig errors when clientId is passed.\n  [\n    \"INVALID_OAUTH_CLIENT_ID\"\n    /* ServerError.INVALID_OAUTH_CLIENT_ID */\n  ]: \"invalid-oauth-client-id\",\n  // User actions (sign-up or deletion) disabled errors.\n  [\n    \"ADMIN_ONLY_OPERATION\"\n    /* ServerError.ADMIN_ONLY_OPERATION */\n  ]: \"admin-restricted-operation\",\n  // Multi factor related errors.\n  [\n    \"INVALID_MFA_PENDING_CREDENTIAL\"\n    /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */\n  ]: \"invalid-multi-factor-session\",\n  [\n    \"MFA_ENROLLMENT_NOT_FOUND\"\n    /* ServerError.MFA_ENROLLMENT_NOT_FOUND */\n  ]: \"multi-factor-info-not-found\",\n  [\n    \"MISSING_MFA_ENROLLMENT_ID\"\n    /* ServerError.MISSING_MFA_ENROLLMENT_ID */\n  ]: \"missing-multi-factor-info\",\n  [\n    \"MISSING_MFA_PENDING_CREDENTIAL\"\n    /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */\n  ]: \"missing-multi-factor-session\",\n  [\n    \"SECOND_FACTOR_EXISTS\"\n    /* ServerError.SECOND_FACTOR_EXISTS */\n  ]: \"second-factor-already-in-use\",\n  [\n    \"SECOND_FACTOR_LIMIT_EXCEEDED\"\n    /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */\n  ]: \"maximum-second-factor-count-exceeded\",\n  // Blocking functions related errors.\n  [\n    \"BLOCKING_FUNCTION_ERROR_RESPONSE\"\n    /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */\n  ]: \"internal-error\",\n  // Recaptcha related errors.\n  [\n    \"RECAPTCHA_NOT_ENABLED\"\n    /* ServerError.RECAPTCHA_NOT_ENABLED */\n  ]: \"recaptcha-not-enabled\",\n  [\n    \"MISSING_RECAPTCHA_TOKEN\"\n    /* ServerError.MISSING_RECAPTCHA_TOKEN */\n  ]: \"missing-recaptcha-token\",\n  [\n    \"INVALID_RECAPTCHA_TOKEN\"\n    /* ServerError.INVALID_RECAPTCHA_TOKEN */\n  ]: \"invalid-recaptcha-token\",\n  [\n    \"INVALID_RECAPTCHA_ACTION\"\n    /* ServerError.INVALID_RECAPTCHA_ACTION */\n  ]: \"invalid-recaptcha-action\",\n  [\n    \"MISSING_CLIENT_TYPE\"\n    /* ServerError.MISSING_CLIENT_TYPE */\n  ]: \"missing-client-type\",\n  [\n    \"MISSING_RECAPTCHA_VERSION\"\n    /* ServerError.MISSING_RECAPTCHA_VERSION */\n  ]: \"missing-recaptcha-version\",\n  [\n    \"INVALID_RECAPTCHA_VERSION\"\n    /* ServerError.INVALID_RECAPTCHA_VERSION */\n  ]: \"invalid-recaptcha-version\",\n  [\n    \"INVALID_REQ_TYPE\"\n    /* ServerError.INVALID_REQ_TYPE */\n  ]: \"invalid-req-type\"\n  /* AuthErrorCode.INVALID_REQ_TYPE */\n};\nvar DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);\nfunction _addTidIfNecessary(auth, request) {\n  if (auth.tenantId && !request.tenantId) {\n    return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });\n  }\n  return request;\n}\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === \"GET\") {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n    const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);\n    const headers = await auth._getAdditionalHeaders();\n    headers[\n      \"Content-Type\"\n      /* HttpHeader.CONTENT_TYPE */\n    ] = \"application/json\";\n    if (auth.languageCode) {\n      headers[\n        \"X-Firebase-Locale\"\n        /* HttpHeader.X_FIREBASE_LOCALE */\n      ] = auth.languageCode;\n    }\n    return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({\n      method,\n      headers,\n      referrerPolicy: \"no-referrer\"\n    }, body));\n  });\n}\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n  auth._canInitEmulator = false;\n  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\n  try {\n    const networkTimeout = new NetworkTimeout(auth);\n    const response = await Promise.race([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n    networkTimeout.clearNetworkTimeout();\n    const json = await response.json();\n    if (\"needConfirmation\" in json) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\", json);\n    }\n    if (response.ok && !(\"errorMessage\" in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(\" : \");\n      if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\") {\n        throw _makeTaggedError(auth, \"credential-already-in-use\", json);\n      } else if (serverErrorCode === \"EMAIL_EXISTS\") {\n        throw _makeTaggedError(auth, \"email-already-in-use\", json);\n      } else if (serverErrorCode === \"USER_DISABLED\") {\n        throw _makeTaggedError(auth, \"user-disabled\", json);\n      }\n      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, \"-\");\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    _fail(auth, \"network-request-failed\", { \"message\": String(e) });\n  }\n}\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n  const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n  if (\"mfaPendingCredential\" in serverResponse) {\n    _fail(auth, \"multi-factor-auth-required\", {\n      _serverResponse: serverResponse\n    });\n  }\n  return serverResponse;\n}\nfunction _getFinalTarget(auth, host, path, query) {\n  const base = `${host}${path}?${query}`;\n  if (!auth.config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n  return _emulatorUrl(auth.config, base);\n}\nfunction _parseEnforcementState(enforcementStateStr) {\n  switch (enforcementStateStr) {\n    case \"ENFORCE\":\n      return \"ENFORCE\";\n    case \"AUDIT\":\n      return \"AUDIT\";\n    case \"OFF\":\n      return \"OFF\";\n    default:\n      return \"ENFORCEMENT_STATE_UNSPECIFIED\";\n  }\n}\nvar NetworkTimeout = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.timer = null;\n    this.promise = new Promise((_, reject) => {\n      this.timer = setTimeout(() => {\n        return reject(_createError(\n          this.auth,\n          \"network-request-failed\"\n          /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n        ));\n      }, DEFAULT_API_TIMEOUT_MS.get());\n    });\n  }\n  clearNetworkTimeout() {\n    clearTimeout(this.timer);\n  }\n};\nfunction _makeTaggedError(auth, code, response) {\n  const errorParams = {\n    appName: auth.name\n  };\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n  const error = _createError(auth, code, errorParams);\n  error.customData._tokenResponse = response;\n  return error;\n}\nfunction isV2(grecaptcha) {\n  return grecaptcha !== void 0 && grecaptcha.getResponse !== void 0;\n}\nfunction isEnterprise(grecaptcha) {\n  return grecaptcha !== void 0 && grecaptcha.enterprise !== void 0;\n}\nvar RecaptchaConfig = class {\n  constructor(response) {\n    this.siteKey = \"\";\n    this.recaptchaEnforcementState = [];\n    if (response.recaptchaKey === void 0) {\n      throw new Error(\"recaptchaKey undefined\");\n    }\n    this.siteKey = response.recaptchaKey.split(\"/\")[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n  /**\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n   *\n   * @param providerStr - The provider whose enforcement state is to be returned.\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n   */\n  getProviderEnforcementState(providerStr) {\n    if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n      return null;\n    }\n    for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n      if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n        return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n   *\n   * @param providerStr - The provider whose enablement state is to be returned.\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n   */\n  isProviderEnabled(providerStr) {\n    return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" || this.getProviderEnforcementState(providerStr) === \"AUDIT\";\n  }\n};\nasync function getRecaptchaParams(auth) {\n  return (await _performApiRequest(\n    auth,\n    \"GET\",\n    \"/v1/recaptchaParams\"\n    /* Endpoint.GET_RECAPTCHA_PARAM */\n  )).recaptchaSiteKey || \"\";\n}\nasync function getRecaptchaConfig(auth, request) {\n  return _performApiRequest(auth, \"GET\", \"/v2/recaptchaConfig\", _addTidIfNecessary(auth, request));\n}\nasync function deleteAccount(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:delete\", request);\n}\nasync function deleteLinkedAccounts(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", request);\n}\nasync function getAccountInfo(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:lookup\", request);\n}\nfunction utcTimestampToDateString(utcTimestamp) {\n  if (!utcTimestamp) {\n    return void 0;\n  }\n  try {\n    const date = new Date(Number(utcTimestamp));\n    if (!isNaN(date.getTime())) {\n      return date.toUTCString();\n    }\n  } catch (e) {\n  }\n  return void 0;\n}\nfunction getIdToken(user, forceRefresh = false) {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\nasync function getIdTokenResult(user, forceRefresh = false) {\n  const userInternal = getModularInstance(user);\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  const firebase = typeof claims.firebase === \"object\" ? claims.firebase : void 0;\n  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase[\"sign_in_provider\"];\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n    signInProvider: signInProvider || null,\n    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase[\"sign_in_second_factor\"]) || null\n  };\n}\nfunction secondsStringToMilliseconds(seconds) {\n  return Number(seconds) * 1e3;\n}\nfunction _parseToken(token) {\n  const [algorithm, payload, signature] = token.split(\".\");\n  if (algorithm === void 0 || payload === void 0 || signature === void 0) {\n    _logError(\"JWT malformed, contained fewer than 3 sections\");\n    return null;\n  }\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError(\"Failed to decode base64 JWT payload\");\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\"Caught error parsing JWT payload as JSON\", e === null || e === void 0 ? void 0 : e.toString());\n    return null;\n  }\n}\nfunction _tokenExpiresIn(token) {\n  const parsedToken = _parseToken(token);\n  _assert(\n    parsedToken,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  _assert(\n    typeof parsedToken.exp !== \"undefined\",\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  _assert(\n    typeof parsedToken.iat !== \"undefined\",\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n    throw e;\n  }\n}\nfunction isUserInvalidated({ code }) {\n  return code === `auth/${\"user-disabled\"}` || code === `auth/${\"user-token-expired\"}`;\n}\nvar ProactiveRefresh = class {\n  constructor(user) {\n    this.user = user;\n    this.isRunning = false;\n    this.timerId = null;\n    this.errorBackoff = 3e4;\n  }\n  _start() {\n    if (this.isRunning) {\n      return;\n    }\n    this.isRunning = true;\n    this.schedule();\n  }\n  _stop() {\n    if (!this.isRunning) {\n      return;\n    }\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n  getInterval(wasError) {\n    var _a;\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        96e4\n        /* Duration.RETRY_BACKOFF_MAX */\n      );\n      return interval;\n    } else {\n      this.errorBackoff = 3e4;\n      const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n      const interval = expTime - Date.now() - 3e5;\n      return Math.max(0, interval);\n    }\n  }\n  schedule(wasError = false) {\n    if (!this.isRunning) {\n      return;\n    }\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n  async iteration() {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"network-request-failed\"}`) {\n        this.schedule(\n          /* wasError */\n          true\n        );\n      }\n      return;\n    }\n    this.schedule();\n  }\n};\nvar UserMetadata = class {\n  constructor(createdAt, lastLoginAt) {\n    this.createdAt = createdAt;\n    this.lastLoginAt = lastLoginAt;\n    this._initializeTime();\n  }\n  _initializeTime() {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n  _copy(metadata) {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n  toJSON() {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n};\nasync function _reloadWithoutSaving(user) {\n  var _a;\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));\n  _assert(\n    response === null || response === void 0 ? void 0 : response.users.length,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  const coreAccount = response.users[0];\n  user._notifyReloadListener(coreAccount);\n  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n  const updates = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n  Object.assign(user, updates);\n}\nasync function reload(user) {\n  const userInternal = getModularInstance(user);\n  await _reloadWithoutSaving(userInternal);\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\nfunction mergeProviderData(original, newData) {\n  const deduped = original.filter((o) => !newData.some((n) => n.providerId === o.providerId));\n  return [...deduped, ...newData];\n}\nfunction extractProviderData(providers) {\n  return providers.map((_a) => {\n    var { providerId } = _a, provider = __rest(_a, [\"providerId\"]);\n    return {\n      providerId,\n      uid: provider.rawId || \"\",\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\nasync function requestStsToken(auth, refreshToken) {\n  const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n    const body = querystring({\n      \"grant_type\": \"refresh_token\",\n      \"refresh_token\": refreshToken\n    }).slice(1);\n    const { tokenApiHost, apiKey } = auth.config;\n    const url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\", `key=${apiKey}`);\n    const headers = await auth._getAdditionalHeaders();\n    headers[\n      \"Content-Type\"\n      /* HttpHeader.CONTENT_TYPE */\n    ] = \"application/x-www-form-urlencoded\";\n    return FetchProvider.fetch()(url, {\n      method: \"POST\",\n      headers,\n      body\n    });\n  });\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\nasync function revokeToken(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts:revokeToken\", _addTidIfNecessary(auth, request));\n}\nvar StsTokenManager = class _StsTokenManager {\n  constructor() {\n    this.refreshToken = null;\n    this.accessToken = null;\n    this.expirationTime = null;\n  }\n  get isExpired() {\n    return !this.expirationTime || Date.now() > this.expirationTime - 3e4;\n  }\n  updateFromServerResponse(response) {\n    _assert(\n      response.idToken,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    _assert(\n      typeof response.idToken !== \"undefined\",\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    _assert(\n      typeof response.refreshToken !== \"undefined\",\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const expiresIn = \"expiresIn\" in response && typeof response.expiresIn !== \"undefined\" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n  }\n  async getToken(auth, forceRefresh = false) {\n    _assert(\n      !this.accessToken || this.refreshToken,\n      auth,\n      \"user-token-expired\"\n      /* AuthErrorCode.TOKEN_EXPIRED */\n    );\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken);\n      return this.accessToken;\n    }\n    return null;\n  }\n  clearRefreshToken() {\n    this.refreshToken = null;\n  }\n  async refresh(auth, oldToken) {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);\n    this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n  }\n  updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1e3;\n  }\n  static fromJSON(appName, object) {\n    const { refreshToken, accessToken, expirationTime } = object;\n    const manager = new _StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === \"string\", \"internal-error\", {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === \"string\", \"internal-error\", {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(typeof expirationTime === \"number\", \"internal-error\", {\n        appName\n      });\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n  toJSON() {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n  _assign(stsTokenManager) {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n  _clone() {\n    return Object.assign(new _StsTokenManager(), this.toJSON());\n  }\n  _performRefresh() {\n    return debugFail(\"not implemented\");\n  }\n};\nfunction assertStringOrUndefined(assertion, appName) {\n  _assert(typeof assertion === \"string\" || typeof assertion === \"undefined\", \"internal-error\", { appName });\n}\nvar UserImpl = class _UserImpl {\n  constructor(_a) {\n    var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\n    this.providerId = \"firebase\";\n    this.proactiveRefresh = new ProactiveRefresh(this);\n    this.reloadUserInfo = null;\n    this.reloadListener = null;\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);\n  }\n  async getIdToken(forceRefresh) {\n    const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n    _assert(\n      accessToken,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n    return accessToken;\n  }\n  getIdTokenResult(forceRefresh) {\n    return getIdTokenResult(this, forceRefresh);\n  }\n  reload() {\n    return reload(this);\n  }\n  _assign(user) {\n    if (this === user) {\n      return;\n    }\n    _assert(\n      this.uid === user.uid,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map((userInfo) => Object.assign({}, userInfo));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n  _clone(auth) {\n    const newUser = new _UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n  _onReload(callback) {\n    _assert(\n      !this.reloadListener,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n  _notifyReloadListener(userInfo) {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      this.reloadUserInfo = userInfo;\n    }\n  }\n  _startProactiveRefresh() {\n    this.proactiveRefresh._start();\n  }\n  _stopProactiveRefresh() {\n    this.proactiveRefresh._stop();\n  }\n  async _updateTokensIfNecessary(response, reload2 = false) {\n    let tokensRefreshed = false;\n    if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n    if (reload2) {\n      await _reloadWithoutSaving(this);\n    }\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n  async delete() {\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n    return this.auth.signOut();\n  }\n  toJSON() {\n    return Object.assign(Object.assign({\n      uid: this.uid,\n      email: this.email || void 0,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || void 0,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || void 0,\n      phoneNumber: this.phoneNumber || void 0,\n      tenantId: this.tenantId || void 0,\n      providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId\n    }, this.metadata.toJSON()), {\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n    });\n  }\n  get refreshToken() {\n    return this.stsTokenManager.refreshToken || \"\";\n  }\n  static _fromJSON(auth, object) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : void 0;\n    const email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;\n    const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : void 0;\n    const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;\n    const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : void 0;\n    const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;\n    const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;\n    const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;\n    const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;\n    _assert(\n      uid && plainObjectTokenManager,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n    _assert(\n      typeof uid === \"string\",\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === \"boolean\",\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    _assert(\n      typeof isAnonymous === \"boolean\",\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new _UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));\n    }\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n    return user;\n  }\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n    const user = new _UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n};\nvar instanceCache = /* @__PURE__ */ new Map();\nfunction _getInstance(cls) {\n  debugAssert(cls instanceof Function, \"Expected a class definition\");\n  let instance = instanceCache.get(cls);\n  if (instance) {\n    debugAssert(instance instanceof cls, \"Instance stored in cache mismatched with class\");\n    return instance;\n  }\n  instance = new cls();\n  instanceCache.set(cls, instance);\n  return instance;\n}\nvar InMemoryPersistence = class {\n  constructor() {\n    this.type = \"NONE\";\n    this.storage = {};\n  }\n  async _isAvailable() {\n    return true;\n  }\n  async _set(key, value) {\n    this.storage[key] = value;\n  }\n  async _get(key) {\n    const value = this.storage[key];\n    return value === void 0 ? null : value;\n  }\n  async _remove(key) {\n    delete this.storage[key];\n  }\n  _addListener(_key, _listener) {\n    return;\n  }\n  _removeListener(_key, _listener) {\n    return;\n  }\n};\nInMemoryPersistence.type = \"NONE\";\nvar inMemoryPersistence = InMemoryPersistence;\nfunction _persistenceKeyName(key, apiKey, appName) {\n  return `${\"firebase\"}:${key}:${apiKey}:${appName}`;\n}\nvar PersistenceUserManager = class _PersistenceUserManager {\n  constructor(persistence, auth, userKey) {\n    this.persistence = persistence;\n    this.auth = auth;\n    this.userKey = userKey;\n    const { config, name: name2 } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name2);\n    this.fullPersistenceKey = _persistenceKeyName(\"persistence\", config.apiKey, name2);\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n  setCurrentUser(user) {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n  async getCurrentUser() {\n    const blob = await this.persistence._get(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n  removeCurrentUser() {\n    return this.persistence._remove(this.fullUserKey);\n  }\n  savePersistenceForRedirect() {\n    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n  }\n  async setPersistence(newPersistence) {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n    this.persistence = newPersistence;\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n  delete() {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n  static async create(auth, persistenceHierarchy, userKey = \"authUser\") {\n    if (!persistenceHierarchy.length) {\n      return new _PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n    }\n    const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {\n      if (await persistence._isAvailable()) {\n        return persistence;\n      }\n      return void 0;\n    }))).filter((persistence) => persistence);\n    let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n    let userToMigrate = null;\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob);\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch (_a) {\n      }\n    }\n    const migrationHierarchy = availablePersistences.filter((p) => p._shouldAllowMigration);\n    if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n      return new _PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n    await Promise.all(persistenceHierarchy.map(async (persistence) => {\n      if (persistence !== selectedPersistence) {\n        try {\n          await persistence._remove(key);\n        } catch (_a) {\n        }\n      }\n    }));\n    return new _PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n};\nfunction _getBrowserName(userAgent) {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes(\"opera/\") || ua.includes(\"opr/\") || ua.includes(\"opios/\")) {\n    return \"Opera\";\n  } else if (_isIEMobile(ua)) {\n    return \"IEMobile\";\n  } else if (ua.includes(\"msie\") || ua.includes(\"trident/\")) {\n    return \"IE\";\n  } else if (ua.includes(\"edge/\")) {\n    return \"Edge\";\n  } else if (_isFirefox(ua)) {\n    return \"Firefox\";\n  } else if (ua.includes(\"silk/\")) {\n    return \"Silk\";\n  } else if (_isBlackBerry(ua)) {\n    return \"Blackberry\";\n  } else if (_isWebOS(ua)) {\n    return \"Webos\";\n  } else if (_isSafari(ua)) {\n    return \"Safari\";\n  } else if ((ua.includes(\"chrome/\") || _isChromeIOS(ua)) && !ua.includes(\"edge/\")) {\n    return \"Chrome\";\n  } else if (_isAndroid(ua)) {\n    return \"Android\";\n  } else {\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\n      return matches[1];\n    }\n  }\n  return \"Other\";\n}\nfunction _isFirefox(ua = getUA()) {\n  return /firefox\\//i.test(ua);\n}\nfunction _isSafari(userAgent = getUA()) {\n  const ua = userAgent.toLowerCase();\n  return ua.includes(\"safari/\") && !ua.includes(\"chrome/\") && !ua.includes(\"crios/\") && !ua.includes(\"android\");\n}\nfunction _isChromeIOS(ua = getUA()) {\n  return /crios\\//i.test(ua);\n}\nfunction _isIEMobile(ua = getUA()) {\n  return /iemobile/i.test(ua);\n}\nfunction _isAndroid(ua = getUA()) {\n  return /android/i.test(ua);\n}\nfunction _isBlackBerry(ua = getUA()) {\n  return /blackberry/i.test(ua);\n}\nfunction _isWebOS(ua = getUA()) {\n  return /webos/i.test(ua);\n}\nfunction _isIOS(ua = getUA()) {\n  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n}\nfunction _isIOSStandalone(ua = getUA()) {\n  var _a;\n  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\n}\nfunction _isIE10() {\n  return isIE() && document.documentMode === 10;\n}\nfunction _isMobileBrowser(ua = getUA()) {\n  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n}\nfunction _isIframe() {\n  try {\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getClientVersion(clientPlatform, frameworks = []) {\n  let reportedPlatform;\n  switch (clientPlatform) {\n    case \"Browser\":\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case \"Worker\":\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length ? frameworks.join(\",\") : \"FirebaseCore-web\";\n  return `${reportedPlatform}/${\"JsCore\"}/${SDK_VERSION}/${reportedFrameworks}`;\n}\nvar AuthMiddlewareQueue = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.queue = [];\n  }\n  pushCallback(callback, onAbort) {\n    const wrappedCallback = (user) => new Promise((resolve, reject) => {\n      try {\n        const result = callback(user);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    });\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n    const index = this.queue.length - 1;\n    return () => {\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n  async runMiddleware(nextUser) {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n    const onAbortStack = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n        }\n      }\n      throw this.auth._errorFactory.create(\"login-blocked\", {\n        originalMessage: e === null || e === void 0 ? void 0 : e.message\n      });\n    }\n  }\n};\nasync function _getPasswordPolicy(auth, request = {}) {\n  return _performApiRequest(auth, \"GET\", \"/v2/passwordPolicy\", _addTidIfNecessary(auth, request));\n}\nvar MINIMUM_MIN_PASSWORD_LENGTH = 6;\nvar PasswordPolicyImpl = class {\n  constructor(response) {\n    var _a, _b, _c, _d;\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== void 0) {\n      this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== void 0) {\n      this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== void 0) {\n      this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== void 0) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n    }\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === \"ENFORCEMENT_STATE_UNSPECIFIED\") {\n      this.enforcementState = \"OFF\";\n    }\n    this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join(\"\")) !== null && _c !== void 0 ? _c : \"\";\n    this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\n    this.schemaVersion = response.schemaVersion;\n  }\n  validatePassword(password) {\n    var _a, _b, _c, _d, _e, _f;\n    const status = {\n      isValid: true,\n      passwordPolicy: this\n    };\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n    status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\n    status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\n    status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\n    status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\n    status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\n    status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\n    return status;\n  }\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  validatePasswordLengthOptions(password, status) {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  validatePasswordCharacterOptions(password, status) {\n    this.updatePasswordCharacterOptionsStatuses(\n      status,\n      /* containsLowercaseCharacter= */\n      false,\n      /* containsUppercaseCharacter= */\n      false,\n      /* containsNumericCharacter= */\n      false,\n      /* containsNonAlphanumericCharacter= */\n      false\n    );\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        /* containsLowercaseCharacter= */\n        passwordChar >= \"a\" && passwordChar <= \"z\",\n        /* containsUppercaseCharacter= */\n        passwordChar >= \"A\" && passwordChar <= \"Z\",\n        /* containsNumericCharacter= */\n        passwordChar >= \"0\" && passwordChar <= \"9\",\n        /* containsNonAlphanumericCharacter= */\n        this.allowedNonAlphanumericCharacters.includes(passwordChar)\n      );\n    }\n  }\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n    }\n  }\n};\nvar AuthImpl = class {\n  constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n    this.appCheckServiceProvider = appCheckServiceProvider;\n    this.config = config;\n    this.currentUser = null;\n    this.emulatorConfig = null;\n    this.operations = Promise.resolve();\n    this.authStateSubscription = new Subscription(this);\n    this.idTokenSubscription = new Subscription(this);\n    this.beforeStateQueue = new AuthMiddlewareQueue(this);\n    this.redirectUser = null;\n    this.isProactiveRefreshEnabled = false;\n    this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n    this._canInitEmulator = true;\n    this._isInitialized = false;\n    this._deleted = false;\n    this._initializationPromise = null;\n    this._popupRedirectResolver = null;\n    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n    this._agentRecaptchaConfig = null;\n    this._tenantRecaptchaConfigs = {};\n    this._projectPasswordPolicy = null;\n    this._tenantPasswordPolicies = {};\n    this.lastNotifiedUid = void 0;\n    this.languageCode = null;\n    this.tenantId = null;\n    this.settings = { appVerificationDisabledForTesting: false };\n    this.frameworks = [];\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n  _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n    this._initializationPromise = this.queue(async () => {\n      var _a, _b;\n      if (this._deleted) {\n        return;\n      }\n      this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n      if (this._deleted) {\n        return;\n      }\n      if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n        }\n      }\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\n      if (this._deleted) {\n        return;\n      }\n      this._isInitialized = true;\n    });\n    return this._initializationPromise;\n  }\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent() {\n    if (this._deleted) {\n      return;\n    }\n    const user = await this.assertedPersistence.getCurrentUser();\n    if (!this.currentUser && !user) {\n      return;\n    }\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      this._currentUser._assign(user);\n      await this.currentUser.getIdToken();\n      return;\n    }\n    await this._updateCurrentUser(\n      user,\n      /* skipBeforeStateCallbacks */\n      true\n    );\n  }\n  async initializeCurrentUser(popupRedirectResolver) {\n    var _a;\n    const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n      const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n      if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {\n        futureCurrentUser = result.user;\n        needsTocheckMiddleware = true;\n      }\n    }\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n    if (!futureCurrentUser._redirectEventId) {\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n        }\n      }\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    _assert(\n      this._popupRedirectResolver,\n      this,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    await this.getOrInitRedirectPersistenceManager();\n    if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n  async tryRedirectSignIn(redirectResolver) {\n    let result = null;\n    try {\n      result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n    } catch (e) {\n      await this._setRedirectUser(null);\n    }\n    return result;\n  }\n  async reloadAndSetCurrentUserOrClear(user) {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${\"network-request-failed\"}`) {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    return this.directlySetCurrentUser(user);\n  }\n  useDeviceLanguage() {\n    this.languageCode = _getUserLanguage();\n  }\n  async _delete() {\n    this._deleted = true;\n  }\n  async updateCurrentUser(userExtern) {\n    const user = userExtern ? getModularInstance(userExtern) : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        \"invalid-user-token\"\n        /* AuthErrorCode.INVALID_AUTH */\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n  async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        \"tenant-id-mismatch\"\n        /* AuthErrorCode.TENANT_ID_MISMATCH */\n      );\n    }\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user);\n      this.notifyAuthListeners();\n    });\n  }\n  async signOut() {\n    await this.beforeStateQueue.runMiddleware(null);\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n    return this._updateCurrentUser(\n      null,\n      /* skipBeforeStateCallbacks */\n      true\n    );\n  }\n  setPersistence(persistence) {\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n  _getRecaptchaConfig() {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n  async validatePassword(password) {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n    const passwordPolicy = this._getPasswordPolicyInternal();\n    if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n      return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\", {}));\n    }\n    return passwordPolicy.validatePassword(password);\n  }\n  _getPasswordPolicyInternal() {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n  async _updatePasswordPolicy() {\n    const response = await _getPasswordPolicy(this);\n    const passwordPolicy = new PasswordPolicyImpl(response);\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n  _getPersistence() {\n    return this.assertedPersistence.persistence.type;\n  }\n  _updateErrorMap(errorMap) {\n    this._errorFactory = new ErrorFactory(\"auth\", \"Firebase\", errorMap());\n  }\n  onAuthStateChanged(nextOrObserver, error, completed) {\n    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n  }\n  beforeAuthStateChanged(callback, onAbort) {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n  onIdTokenChanged(nextOrObserver, error, completed) {\n    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n  }\n  authStateReady() {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   */\n  async revokeAccessToken(token) {\n    if (this.currentUser) {\n      const idToken = await this.currentUser.getIdToken();\n      const request = {\n        providerId: \"apple.com\",\n        tokenType: \"ACCESS_TOKEN\",\n        token,\n        idToken\n      };\n      if (this.tenantId != null) {\n        request.tenantId = this.tenantId;\n      }\n      await revokeToken(this, request);\n    }\n  }\n  toJSON() {\n    var _a;\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n    };\n  }\n  async _setRedirectUser(user, popupRedirectResolver) {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n    return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n  }\n  async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n    if (!this.redirectPersistenceManager) {\n      const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n      _assert(\n        resolver,\n        this,\n        \"argument-error\"\n        /* AuthErrorCode.ARGUMENT_ERROR */\n      );\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        \"redirectUser\"\n        /* KeyName.REDIRECT_USER */\n      );\n      this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n    }\n    return this.redirectPersistenceManager;\n  }\n  async _redirectUserForId(id) {\n    var _a, _b;\n    if (this._isInitialized) {\n      await this.queue(async () => {\n      });\n    }\n    if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\n      return this._currentUser;\n    }\n    if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\n      return this.redirectUser;\n    }\n    return null;\n  }\n  async _persistUserIfCurrent(user) {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user) {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n  _key() {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n  _startProactiveRefresh() {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n  _stopProactiveRefresh() {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n  /** Returns the current user cast as the internal type */\n  get _currentUser() {\n    return this.currentUser;\n  }\n  notifyAuthListeners() {\n    var _a, _b;\n    if (!this._isInitialized) {\n      return;\n    }\n    this.idTokenSubscription.next(this.currentUser);\n    const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n  registerStateListener(subscription, nextOrObserver, error, completed) {\n    if (this._deleted) {\n      return () => {\n      };\n    }\n    const cb = typeof nextOrObserver === \"function\" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n    let isUnsubscribed = false;\n    const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n    _assert(\n      promise,\n      this,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n    if (typeof nextOrObserver === \"function\") {\n      const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  async directlySetCurrentUser(user) {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n    this.currentUser = user;\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n  queue(action) {\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n  get assertedPersistence() {\n    _assert(\n      this.persistenceManager,\n      this,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return this.persistenceManager;\n  }\n  _logFramework(framework) {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n  }\n  _getFrameworks() {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders() {\n    var _a;\n    const headers = {\n      [\n        \"X-Client-Version\"\n        /* HttpHeader.X_CLIENT_VERSION */\n      ]: this.clientVersion\n    };\n    if (this.app.options.appId) {\n      headers[\n        \"X-Firebase-gmpid\"\n        /* HttpHeader.X_FIREBASE_GMPID */\n      ] = this.app.options.appId;\n    }\n    const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({\n      optional: true\n    })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\n    if (heartbeatsHeader) {\n      headers[\n        \"X-Firebase-Client\"\n        /* HttpHeader.X_FIREBASE_CLIENT */\n      ] = heartbeatsHeader;\n    }\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[\n        \"X-Firebase-AppCheck\"\n        /* HttpHeader.X_FIREBASE_APP_CHECK */\n      ] = appCheckToken;\n    }\n    return headers;\n  }\n  async _getAppCheckToken() {\n    var _a;\n    const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());\n    if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\n      _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n    }\n    return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\n  }\n};\nfunction _castAuth(auth) {\n  return getModularInstance(auth);\n}\nvar Subscription = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.observer = null;\n    this.addObserver = createSubscribe((observer) => this.observer = observer);\n  }\n  get next() {\n    _assert(\n      this.observer,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return this.observer.next.bind(this.observer);\n  }\n};\nfunction getScriptParentElement() {\n  var _a, _b;\n  return (_b = (_a = document.getElementsByTagName(\"head\")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\n}\nfunction _loadJS(url) {\n  return new Promise((resolve, reject) => {\n    const el = document.createElement(\"script\");\n    el.setAttribute(\"src\", url);\n    el.onload = resolve;\n    el.onerror = (e) => {\n      const error = _createError(\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n      error.customData = e;\n      reject(error);\n    };\n    el.type = \"text/javascript\";\n    el.charset = \"UTF-8\";\n    getScriptParentElement().appendChild(el);\n  });\n}\nfunction _generateCallbackName(prefix) {\n  return `__${prefix}${Math.floor(Math.random() * 1e6)}`;\n}\nvar RECAPTCHA_ENTERPRISE_URL = \"https://www.google.com/recaptcha/enterprise.js?render=\";\nvar RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = \"recaptcha-enterprise\";\nvar FAKE_TOKEN = \"NO_RECAPTCHA\";\nvar RecaptchaEnterpriseVerifier = class {\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern) {\n    this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n    this.auth = _castAuth(authExtern);\n  }\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(action = \"verify\", forceRefresh = false) {\n    async function retrieveSiteKey(auth) {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== void 0) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n      return new Promise(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: \"CLIENT_TYPE_WEB\",\n          version: \"RECAPTCHA_ENTERPRISE\"\n          /* RecaptchaVersion.ENTERPRISE */\n        }).then((response) => {\n          if (response.recaptchaKey === void 0) {\n            reject(new Error(\"recaptcha Enterprise site key undefined\"));\n          } else {\n            const config = new RecaptchaConfig(response);\n            if (auth.tenantId == null) {\n              auth._agentRecaptchaConfig = config;\n            } else {\n              auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n            }\n            return resolve(config.siteKey);\n          }\n        }).catch((error) => {\n          reject(error);\n        });\n      });\n    }\n    function retrieveRecaptchaToken(siteKey, resolve, reject) {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise.execute(siteKey, { action }).then((token) => {\n            resolve(token);\n          }).catch(() => {\n            resolve(FAKE_TOKEN);\n          });\n        });\n      } else {\n        reject(Error(\"No reCAPTCHA enterprise script loaded.\"));\n      }\n    }\n    return new Promise((resolve, reject) => {\n      retrieveSiteKey(this.auth).then((siteKey) => {\n        if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n          retrieveRecaptchaToken(siteKey, resolve, reject);\n        } else {\n          if (typeof window === \"undefined\") {\n            reject(new Error(\"RecaptchaVerifier is only supported in browser\"));\n            return;\n          }\n          _loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey).then(() => {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          }).catch((error) => {\n            reject(error);\n          });\n        }\n      }).catch((error) => {\n        reject(error);\n      });\n    });\n  }\n};\nasync function injectRecaptchaFields(auth, request, action, captchaResp = false) {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  try {\n    captchaResponse = await verifier.verify(action);\n  } catch (error) {\n    captchaResponse = await verifier.verify(action, true);\n  }\n  const newRequest = Object.assign({}, request);\n  if (!captchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { \"captchaResp\": captchaResponse });\n  }\n  Object.assign(newRequest, {\n    \"clientType\": \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  });\n  Object.assign(newRequest, {\n    \"recaptchaVersion\": \"RECAPTCHA_ENTERPRISE\"\n    /* RecaptchaVersion.ENTERPRISE */\n  });\n  return newRequest;\n}\nasync function handleRecaptchaFlow(authInstance, request, actionName, actionMethod) {\n  var _a;\n  if ((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\n    \"EMAIL_PASSWORD_PROVIDER\"\n    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */\n  )) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInstance,\n      request,\n      actionName,\n      actionName === \"getOobCode\"\n      /* RecaptchaActionName.GET_OOB_CODE */\n    );\n    return actionMethod(authInstance, requestWithRecaptcha);\n  } else {\n    return actionMethod(authInstance, request).catch(async (error) => {\n      if (error.code === `auth/${\"missing-recaptcha-token\"}`) {\n        console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n        const requestWithRecaptcha = await injectRecaptchaFields(\n          authInstance,\n          request,\n          actionName,\n          actionName === \"getOobCode\"\n          /* RecaptchaActionName.GET_OOB_CODE */\n        );\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n}\nasync function _initializeRecaptchaConfig(auth) {\n  const authInternal = _castAuth(auth);\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: \"CLIENT_TYPE_WEB\",\n    version: \"RECAPTCHA_ENTERPRISE\"\n    /* RecaptchaVersion.ENTERPRISE */\n  });\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n  if (config.isProviderEnabled(\n    \"EMAIL_PASSWORD_PROVIDER\"\n    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */\n  )) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\nfunction initializeAuth(app, deps) {\n  const provider = _getProvider(app, \"auth\");\n  if (provider.isInitialized()) {\n    const auth2 = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n    if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\n      return auth2;\n    } else {\n      _fail(\n        auth2,\n        \"already-initialized\"\n        /* AuthErrorCode.ALREADY_INITIALIZED */\n      );\n    }\n  }\n  const auth = provider.initialize({ options: deps });\n  return auth;\n}\nfunction _initializeAuthInstance(auth, deps) {\n  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\nfunction connectAuthEmulator(auth, url, options) {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    \"emulator-config-failed\"\n    /* AuthErrorCode.EMULATOR_CONFIG_FAILED */\n  );\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    \"invalid-emulator-scheme\"\n    /* AuthErrorCode.INVALID_EMULATOR_SCHEME */\n  );\n  const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? \"\" : `:${port}`;\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(\":\", \"\"),\n    options: Object.freeze({ disableWarnings })\n  });\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\nfunction extractProtocol(url) {\n  const protocolEnd = url.indexOf(\":\");\n  return protocolEnd < 0 ? \"\" : url.substr(0, protocolEnd + 1);\n}\nfunction extractHostAndPort(url) {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length));\n  if (!authority) {\n    return { host: \"\", port: null };\n  }\n  const hostAndPort = authority[2].split(\"@\").pop() || \"\";\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(\":\");\n    return { host, port: parsePort(port) };\n  }\n}\nfunction parsePort(portStr) {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\nfunction emitEmulatorWarning() {\n  function attachBanner() {\n    const el = document.createElement(\"p\");\n    const sty = el.style;\n    el.innerText = \"Running in emulator mode. Do not use with production credentials.\";\n    sty.position = \"fixed\";\n    sty.width = \"100%\";\n    sty.backgroundColor = \"#ffffff\";\n    sty.border = \".1em solid #000000\";\n    sty.color = \"#b50000\";\n    sty.bottom = \"0px\";\n    sty.left = \"0px\";\n    sty.margin = \"0px\";\n    sty.zIndex = \"10000\";\n    sty.textAlign = \"center\";\n    el.classList.add(\"firebase-emulator-warning\");\n    document.body.appendChild(el);\n  }\n  if (typeof console !== \"undefined\" && typeof console.info === \"function\") {\n    console.info(\"WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.\");\n  }\n  if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n    if (document.readyState === \"loading\") {\n      window.addEventListener(\"DOMContentLoaded\", attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\nvar AuthCredential = class {\n  /** @internal */\n  constructor(providerId, signInMethod) {\n    this.providerId = providerId;\n    this.signInMethod = signInMethod;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return debugFail(\"not implemented\");\n  }\n  /** @internal */\n  _getIdTokenResponse(_auth) {\n    return debugFail(\"not implemented\");\n  }\n  /** @internal */\n  _linkToIdToken(_auth, _idToken) {\n    return debugFail(\"not implemented\");\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth) {\n    return debugFail(\"not implemented\");\n  }\n};\nasync function resetPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:resetPassword\", _addTidIfNecessary(auth, request));\n}\nasync function updateEmailPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", request);\n}\nasync function linkEmailPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:signUp\", request);\n}\nasync function applyActionCode$1(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithPassword(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPassword\", _addTidIfNecessary(auth, request));\n}\nasync function sendOobCode(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:sendOobCode\", _addTidIfNecessary(auth, request));\n}\nasync function sendEmailVerification$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function sendPasswordResetEmail$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function sendSignInLinkToEmail$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function verifyAndChangeEmail(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function signInWithEmailLink$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithEmailLink\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithEmailLinkForLinking(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithEmailLink\", _addTidIfNecessary(auth, request));\n}\nvar EmailAuthCredential = class _EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  constructor(_email, _password, signInMethod, _tenantId = null) {\n    super(\"password\", signInMethod);\n    this._email = _email;\n    this._password = _password;\n    this._tenantId = _tenantId;\n  }\n  /** @internal */\n  static _fromEmailAndPassword(email, password) {\n    return new _EmailAuthCredential(\n      email,\n      password,\n      \"password\"\n      /* SignInMethod.EMAIL_PASSWORD */\n    );\n  }\n  /** @internal */\n  static _fromEmailAndCode(email, oobCode, tenantId = null) {\n    return new _EmailAuthCredential(email, oobCode, \"emailLink\", tenantId);\n  }\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON() {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n      if (obj.signInMethod === \"password\") {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === \"emailLink\") {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n  /** @internal */\n  async _getIdTokenResponse(auth) {\n    switch (this.signInMethod) {\n      case \"password\":\n        const request = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: \"CLIENT_TYPE_WEB\"\n          /* RecaptchaClientType.WEB */\n        };\n        return handleRecaptchaFlow(auth, request, \"signInWithPassword\", signInWithPassword);\n      case \"emailLink\":\n        return signInWithEmailLink$1(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n    }\n  }\n  /** @internal */\n  async _linkToIdToken(auth, idToken) {\n    switch (this.signInMethod) {\n      case \"password\":\n        const request = {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: \"CLIENT_TYPE_WEB\"\n          /* RecaptchaClientType.WEB */\n        };\n        return handleRecaptchaFlow(auth, request, \"signUpPassword\", linkEmailPassword);\n      case \"emailLink\":\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n    }\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    return this._getIdTokenResponse(auth);\n  }\n};\nasync function signInWithIdp(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithIdp\", _addTidIfNecessary(auth, request));\n}\nvar IDP_REQUEST_URI$1 = \"http://localhost\";\nvar OAuthCredential = class _OAuthCredential extends AuthCredential {\n  constructor() {\n    super(...arguments);\n    this.pendingToken = null;\n  }\n  /** @internal */\n  static _fromParams(params) {\n    const cred = new _OAuthCredential(params.providerId, params.signInMethod);\n    if (params.idToken || params.accessToken) {\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(\n        \"argument-error\"\n        /* AuthErrorCode.ARGUMENT_ERROR */\n      );\n    }\n    return cred;\n  }\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON() {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    const { providerId, signInMethod } = obj, rest = __rest(obj, [\"providerId\", \"signInMethod\"]);\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n    const cred = new _OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || void 0;\n    cred.accessToken = rest.accessToken || void 0;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n  buildRequest() {\n    const request = {\n      requestUri: IDP_REQUEST_URI$1,\n      returnSecureToken: true\n    };\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody = {};\n      if (this.idToken) {\n        postBody[\"id_token\"] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody[\"access_token\"] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody[\"oauth_token_secret\"] = this.secret;\n      }\n      postBody[\"providerId\"] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody[\"nonce\"] = this.nonce;\n      }\n      request.postBody = querystring(postBody);\n    }\n    return request;\n  }\n};\nasync function sendPhoneVerificationCode(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:sendVerificationCode\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithPhoneNumber$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPhoneNumber\", _addTidIfNecessary(auth, request));\n}\nasync function linkWithPhoneNumber$1(auth, request) {\n  const response = await _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPhoneNumber\", _addTidIfNecessary(auth, request));\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, \"account-exists-with-different-credential\", response);\n  }\n  return response;\n}\nvar VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n  [\n    \"USER_NOT_FOUND\"\n    /* ServerError.USER_NOT_FOUND */\n  ]: \"user-not-found\"\n  /* AuthErrorCode.USER_DELETED */\n};\nasync function verifyPhoneNumberForExisting(auth, request) {\n  const apiRequest = Object.assign(Object.assign({}, request), { operation: \"REAUTH\" });\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPhoneNumber\", _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n}\nvar PhoneAuthCredential = class _PhoneAuthCredential extends AuthCredential {\n  constructor(params) {\n    super(\n      \"phone\",\n      \"phone\"\n      /* SignInMethod.PHONE */\n    );\n    this.params = params;\n  }\n  /** @internal */\n  static _fromVerification(verificationId, verificationCode) {\n    return new _PhoneAuthCredential({ verificationId, verificationCode });\n  }\n  /** @internal */\n  static _fromTokenResponse(phoneNumber, temporaryProof) {\n    return new _PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n  /** @internal */\n  _makeVerificationRequest() {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON() {\n    const obj = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n    return obj;\n  }\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json) {\n    if (typeof json === \"string\") {\n      json = JSON.parse(json);\n    }\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;\n    if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n      return null;\n    }\n    return new _PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n};\nfunction parseMode(mode) {\n  switch (mode) {\n    case \"recoverEmail\":\n      return \"RECOVER_EMAIL\";\n    case \"resetPassword\":\n      return \"PASSWORD_RESET\";\n    case \"signIn\":\n      return \"EMAIL_SIGNIN\";\n    case \"verifyEmail\":\n      return \"VERIFY_EMAIL\";\n    case \"verifyAndChangeEmail\":\n      return \"VERIFY_AND_CHANGE_EMAIL\";\n    case \"revertSecondFactorAddition\":\n      return \"REVERT_SECOND_FACTOR_ADDITION\";\n    default:\n      return null;\n  }\n}\nfunction parseDeepLink(url) {\n  const link = querystringDecode(extractQuerystring(url))[\"link\"];\n  const doubleDeepLink = link ? querystringDecode(extractQuerystring(link))[\"deep_link_id\"] : null;\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\"deep_link_id\"];\n  const iOSDoubleDeepLink = iOSDeepLink ? querystringDecode(extractQuerystring(iOSDeepLink))[\"link\"] : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\nvar ActionCodeURL = class _ActionCodeURL {\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink) {\n    var _a, _b, _c, _d, _e, _f;\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = (_a = searchParams[\n      \"apiKey\"\n      /* QueryField.API_KEY */\n    ]) !== null && _a !== void 0 ? _a : null;\n    const code = (_b = searchParams[\n      \"oobCode\"\n      /* QueryField.CODE */\n    ]) !== null && _b !== void 0 ? _b : null;\n    const operation = parseMode((_c = searchParams[\n      \"mode\"\n      /* QueryField.MODE */\n    ]) !== null && _c !== void 0 ? _c : null);\n    _assert(\n      apiKey && code && operation,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = (_d = searchParams[\n      \"continueUrl\"\n      /* QueryField.CONTINUE_URL */\n    ]) !== null && _d !== void 0 ? _d : null;\n    this.languageCode = (_e = searchParams[\n      \"languageCode\"\n      /* QueryField.LANGUAGE_CODE */\n    ]) !== null && _e !== void 0 ? _e : null;\n    this.tenantId = (_f = searchParams[\n      \"tenantId\"\n      /* QueryField.TENANT_ID */\n    ]) !== null && _f !== void 0 ? _f : null;\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link) {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new _ActionCodeURL(actionLink);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nfunction parseActionCodeURL(link) {\n  return ActionCodeURL.parseLink(link);\n}\nvar EmailAuthProvider = class _EmailAuthProvider {\n  constructor() {\n    this.providerId = _EmailAuthProvider.PROVIDER_ID;\n  }\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email, password) {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(email, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(\n      actionCodeUrl,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n  }\n};\nEmailAuthProvider.PROVIDER_ID = \"password\";\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\";\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\";\nvar FederatedAuthProvider = class {\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(providerId) {\n    this.providerId = providerId;\n    this.defaultLanguageCode = null;\n    this.customParameters = {};\n  }\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode) {\n    this.defaultLanguageCode = languageCode;\n  }\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters) {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters() {\n    return this.customParameters;\n  }\n};\nvar BaseOAuthProvider = class extends FederatedAuthProvider {\n  constructor() {\n    super(...arguments);\n    this.scopes = [];\n  }\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope) {\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes() {\n    return [...this.scopes];\n  }\n};\nvar OAuthProvider = class _OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    _assert(\n      \"providerId\" in obj && \"signInMethod\" in obj,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params) {\n    return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));\n  }\n  /** An internal credential method that accepts more permissive options */\n  _credential(params) {\n    _assert(\n      params.idToken || params.accessToken,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n  }\n  static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;\n    if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n      return null;\n    }\n    if (!providerId) {\n      return null;\n    }\n    try {\n      return new _OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n};\nvar FacebookAuthProvider = class _FacebookAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"facebook.com\"\n      /* ProviderId.FACEBOOK */\n    );\n  }\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: _FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: _FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse || !(\"oauthAccessToken\" in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return _FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\";\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\";\nvar GoogleAuthProvider = class _GoogleAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"google.com\"\n      /* ProviderId.GOOGLE */\n    );\n    this.addScope(\"profile\");\n  }\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(idToken, accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: _GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: _GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthIdToken, oauthAccessToken } = tokenResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      return null;\n    }\n    try {\n      return _GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\";\nGoogleAuthProvider.PROVIDER_ID = \"google.com\";\nvar GithubAuthProvider = class _GithubAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"github.com\"\n      /* ProviderId.GITHUB */\n    );\n  }\n  /**\n   * Creates a credential for Github.\n   *\n   * @param accessToken - Github access token.\n   */\n  static credential(accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: _GithubAuthProvider.PROVIDER_ID,\n      signInMethod: _GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _GithubAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse || !(\"oauthAccessToken\" in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return _GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\";\nGithubAuthProvider.PROVIDER_ID = \"github.com\";\nvar IDP_REQUEST_URI = \"http://localhost\";\nvar SAMLAuthCredential = class _SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  constructor(providerId, pendingToken) {\n    super(providerId, providerId);\n    this.pendingToken = pendingToken;\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON() {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken } = obj;\n    if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n      return null;\n    }\n    return new _SAMLAuthCredential(providerId, pendingToken);\n  }\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId, pendingToken) {\n    return new _SAMLAuthCredential(providerId, pendingToken);\n  }\n  buildRequest() {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n};\nvar SAML_PROVIDER_PREFIX = \"saml.\";\nvar SAMLAuthProvider = class _SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId) {\n    _assert(\n      providerId.startsWith(SAML_PROVIDER_PREFIX),\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    super(providerId);\n  }\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n  }\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json) {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(\n      credential,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return credential;\n  }\n  static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { pendingToken, providerId } = tokenResponse;\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n};\nvar TwitterAuthProvider = class _TwitterAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"twitter.com\"\n      /* ProviderId.TWITTER */\n    );\n  }\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token, secret) {\n    return OAuthCredential._fromParams({\n      providerId: _TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: _TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } = tokenResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n    try {\n      return _TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\";\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\";\nasync function signUp(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signUp\", _addTidIfNecessary(auth, request));\n}\nvar UserCredentialImpl = class _UserCredentialImpl {\n  constructor(params) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n  static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n    const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new _UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n  static async _forOperation(user, operationType, response) {\n    await user._updateTokensIfNecessary(\n      response,\n      /* reload */\n      true\n    );\n    const providerId = providerIdForResponse(response);\n    return new _UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n};\nfunction providerIdForResponse(response) {\n  if (response.providerId) {\n    return response.providerId;\n  }\n  if (\"phoneNumber\" in response) {\n    return \"phone\";\n  }\n  return null;\n}\nasync function signInAnonymously(auth) {\n  var _a;\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\n    return new UserCredentialImpl({\n      user: authInternal.currentUser,\n      providerId: null,\n      operationType: \"signIn\"\n      /* OperationType.SIGN_IN */\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\", response, true);\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\nvar MultiFactorError = class _MultiFactorError extends FirebaseError {\n  constructor(auth, error, operationType, user) {\n    var _a;\n    super(error.code, error.message);\n    this.operationType = operationType;\n    this.user = user;\n    Object.setPrototypeOf(this, _MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : void 0,\n      _serverResponse: error.customData._serverResponse,\n      operationType\n    };\n  }\n  static _fromErrorAndOperation(auth, error, operationType, user) {\n    return new _MultiFactorError(auth, error, operationType, user);\n  }\n};\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n  const idTokenProvider = operationType === \"reauthenticate\" ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n  return idTokenProvider.catch((error) => {\n    if (error.code === `auth/${\"multi-factor-auth-required\"}`) {\n      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n    }\n    throw error;\n  });\n}\nfunction providerDataAsNames(providerData) {\n  return new Set(providerData.map(({ providerId }) => providerId).filter((pid) => !!pid));\n}\nasync function unlink(user, providerId) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n  userInternal.providerData = userInternal.providerData.filter((pd) => providersLeft.has(pd.providerId));\n  if (!providersLeft.has(\n    \"phone\"\n    /* ProviderId.PHONE */\n  )) {\n    userInternal.phoneNumber = null;\n  }\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\nasync function _link$1(user, credential, bypassAuthState = false) {\n  const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n  return UserCredentialImpl._forOperation(user, \"link\", response);\n}\nasync function _assertLinkedStatus(expected, user, provider) {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n  const code = expected === false ? \"provider-already-linked\" : \"no-such-provider\";\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\n  const { auth } = user;\n  const operationType = \"reauthenticate\";\n  try {\n    const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n    _assert(\n      response.idToken,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const parsed = _parseToken(response.idToken);\n    _assert(\n      parsed,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const { sub: localId } = parsed;\n    _assert(\n      user.uid === localId,\n      auth,\n      \"user-mismatch\"\n      /* AuthErrorCode.USER_MISMATCH */\n    );\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\"}`) {\n      _fail(\n        auth,\n        \"user-mismatch\"\n        /* AuthErrorCode.USER_MISMATCH */\n      );\n    }\n    throw e;\n  }\n}\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\n  const operationType = \"signIn\";\n  const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\nasync function signInWithCredential(auth, credential) {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\nasync function linkWithCredential(user, credential) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n  return _link$1(userInternal, credential);\n}\nasync function reauthenticateWithCredential(user, credential) {\n  return _reauthenticate(getModularInstance(user), credential);\n}\nasync function signInWithCustomToken$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithCustomToken\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithCustomToken(auth, customToken) {\n  const authInternal = _castAuth(auth);\n  const response = await signInWithCustomToken$1(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\", response);\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\nvar MultiFactorInfoImpl = class {\n  constructor(factorId, response) {\n    this.factorId = factorId;\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n  static _fromServerResponse(auth, enrollment) {\n    if (\"phoneInfo\" in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    } else if (\"totpInfo\" in enrollment) {\n      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n  }\n};\nvar PhoneMultiFactorInfoImpl = class _PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n  constructor(response) {\n    super(\"phone\", response);\n    this.phoneNumber = response.phoneInfo;\n  }\n  static _fromServerResponse(_auth, enrollment) {\n    return new _PhoneMultiFactorInfoImpl(enrollment);\n  }\n};\nvar TotpMultiFactorInfoImpl = class _TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n  constructor(response) {\n    super(\"totp\", response);\n  }\n  static _fromServerResponse(_auth, enrollment) {\n    return new _TotpMultiFactorInfoImpl(enrollment);\n  }\n};\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n  var _a;\n  _assert(\n    ((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0,\n    auth,\n    \"invalid-continue-uri\"\n    /* AuthErrorCode.INVALID_CONTINUE_URI */\n  );\n  _assert(\n    typeof actionCodeSettings.dynamicLinkDomain === \"undefined\" || actionCodeSettings.dynamicLinkDomain.length > 0,\n    auth,\n    \"invalid-dynamic-link-domain\"\n    /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */\n  );\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n  if (actionCodeSettings.iOS) {\n    _assert(\n      actionCodeSettings.iOS.bundleId.length > 0,\n      auth,\n      \"missing-ios-bundle-id\"\n      /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */\n    );\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n  if (actionCodeSettings.android) {\n    _assert(\n      actionCodeSettings.android.packageName.length > 0,\n      auth,\n      \"missing-android-pkg-name\"\n      /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */\n    );\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\nasync function recachePasswordPolicy(auth) {\n  const authInternal = _castAuth(auth);\n  if (authInternal._getPasswordPolicyInternal()) {\n    await authInternal._updatePasswordPolicy();\n  }\n}\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    requestType: \"PASSWORD_RESET\",\n    email,\n    clientType: \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n  }\n  await handleRecaptchaFlow(authInternal, request, \"getOobCode\", sendPasswordResetEmail$1);\n}\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\n  await resetPassword(getModularInstance(auth), {\n    oobCode,\n    newPassword\n  }).catch(async (error) => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\"}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n}\nasync function applyActionCode(auth, oobCode) {\n  await applyActionCode$1(getModularInstance(auth), { oobCode });\n}\nasync function checkActionCode(auth, oobCode) {\n  const authModular = getModularInstance(auth);\n  const response = await resetPassword(authModular, { oobCode });\n  const operation = response.requestType;\n  _assert(\n    operation,\n    authModular,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  switch (operation) {\n    case \"EMAIL_SIGNIN\":\n      break;\n    case \"VERIFY_AND_CHANGE_EMAIL\":\n      _assert(\n        response.newEmail,\n        authModular,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n      break;\n    case \"REVERT_SECOND_FACTOR_ADDITION\":\n      _assert(\n        response.mfaInfo,\n        authModular,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n    default:\n      _assert(\n        response.email,\n        authModular,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n  }\n  let multiFactorInfo = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n  }\n  return {\n    data: {\n      email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" ? response.newEmail : response.email) || null,\n      previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" ? response.email : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\nasync function verifyPasswordResetCode(auth, code) {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  return data.email;\n}\nasync function createUserWithEmailAndPassword(auth, email, password) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  };\n  const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\", signUp);\n  const response = await signUpResponse.catch((error) => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\"}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\", response);\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\nfunction signInWithEmailAndPassword(auth, email, password) {\n  return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async (error) => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\"}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n}\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    requestType: \"EMAIL_SIGNIN\",\n    email,\n    clientType: \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  };\n  function setActionCodeSettings(request2, actionCodeSettings2) {\n    _assert(\n      actionCodeSettings2.handleCodeInApp,\n      authInternal,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    if (actionCodeSettings2) {\n      _setActionCodeSettingsOnRequest(authInternal, request2, actionCodeSettings2);\n    }\n  }\n  setActionCodeSettings(request, actionCodeSettings);\n  await handleRecaptchaFlow(authInternal, request, \"getOobCode\", sendSignInLinkToEmail$1);\n}\nfunction isSignInWithEmailLink(auth, emailLink) {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\";\n}\nasync function signInWithEmailLink(auth, email, emailLink) {\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n  _assert(\n    credential._tenantId === (authModular.tenantId || null),\n    authModular,\n    \"tenant-id-mismatch\"\n    /* AuthErrorCode.TENANT_ID_MISMATCH */\n  );\n  return signInWithCredential(authModular, credential);\n}\nasync function createAuthUri(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:createAuthUri\", _addTidIfNecessary(auth, request));\n}\nasync function fetchSignInMethodsForEmail(auth, email) {\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : \"http://localhost\";\n  const request = {\n    identifier: email,\n    continueUri\n  };\n  const { signinMethods } = await createAuthUri(getModularInstance(auth), request);\n  return signinMethods || [];\n}\nasync function sendEmailVerification(user, actionCodeSettings) {\n  const userInternal = getModularInstance(user);\n  const idToken = await user.getIdToken();\n  const request = {\n    requestType: \"VERIFY_EMAIL\",\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n  }\n  const { email } = await sendEmailVerification$1(userInternal.auth, request);\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  const userInternal = getModularInstance(user);\n  const idToken = await user.getIdToken();\n  const request = {\n    requestType: \"VERIFY_AND_CHANGE_EMAIL\",\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n  }\n  const { email } = await verifyAndChangeEmail(userInternal.auth, request);\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\nasync function updateProfile$1(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", request);\n}\nasync function updateProfile(user, { displayName, photoURL: photoUrl }) {\n  if (displayName === void 0 && photoUrl === void 0) {\n    return;\n  }\n  const userInternal = getModularInstance(user);\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n  const passwordProvider = userInternal.providerData.find(\n    ({ providerId }) => providerId === \"password\"\n    /* ProviderId.PASSWORD */\n  );\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n  await userInternal._updateTokensIfNecessary(response);\n}\nfunction updateEmail(user, newEmail) {\n  return updateEmailOrPassword(getModularInstance(user), newEmail, null);\n}\nfunction updatePassword(user, newPassword) {\n  return updateEmailOrPassword(getModularInstance(user), null, newPassword);\n}\nasync function updateEmailOrPassword(user, email, password) {\n  const { auth } = user;\n  const idToken = await user.getIdToken();\n  const request = {\n    idToken,\n    returnSecureToken: true\n  };\n  if (email) {\n    request.email = email;\n  }\n  if (password) {\n    request.password = password;\n  }\n  const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n  await user._updateTokensIfNecessary(\n    response,\n    /* reload */\n    true\n  );\n}\nfunction _fromIdTokenResponse(idTokenResponse) {\n  var _a, _b;\n  if (!idTokenResponse) {\n    return null;\n  }\n  const { providerId } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n  const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\";\n  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n    const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b[\"sign_in_provider\"];\n    if (signInProvider) {\n      const filteredProviderId = signInProvider !== \"anonymous\" && signInProvider !== \"custom\" ? signInProvider : null;\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case \"facebook.com\":\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case \"github.com\":\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case \"google.com\":\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case \"twitter.com\":\n      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n    case \"custom\":\n    case \"anonymous\":\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\nvar GenericAdditionalUserInfo = class {\n  constructor(isNewUser, providerId, profile = {}) {\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n  }\n};\nvar FederatedAdditionalUserInfoWithUsername = class extends GenericAdditionalUserInfo {\n  constructor(isNewUser, providerId, profile, username) {\n    super(isNewUser, providerId, profile);\n    this.username = username;\n  }\n};\nvar FacebookAdditionalUserInfo = class extends GenericAdditionalUserInfo {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"facebook.com\", profile);\n  }\n};\nvar GithubAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"github.com\", profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === \"string\" ? profile === null || profile === void 0 ? void 0 : profile.login : null);\n  }\n};\nvar GoogleAdditionalUserInfo = class extends GenericAdditionalUserInfo {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"google.com\", profile);\n  }\n};\nvar TwitterAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser, profile, screenName) {\n    super(isNewUser, \"twitter.com\", profile, screenName);\n  }\n};\nfunction getAdditionalUserInfo(userCredential) {\n  const { user, _tokenResponse } = userCredential;\n  if (user.isAnonymous && !_tokenResponse) {\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n  return _fromIdTokenResponse(_tokenResponse);\n}\nfunction setPersistence(auth, persistence) {\n  return getModularInstance(auth).setPersistence(persistence);\n}\nfunction initializeRecaptchaConfig(auth) {\n  return _initializeRecaptchaConfig(auth);\n}\nasync function validatePassword(auth, password) {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\n  return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\n  return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\nfunction useDeviceLanguage(auth) {\n  getModularInstance(auth).useDeviceLanguage();\n}\nfunction updateCurrentUser(auth, user) {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\nfunction signOut(auth) {\n  return getModularInstance(auth).signOut();\n}\nfunction revokeAccessToken(auth, token) {\n  const authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\nasync function deleteUser(user) {\n  return getModularInstance(user).delete();\n}\nvar MultiFactorSessionImpl = class _MultiFactorSessionImpl {\n  constructor(type, credential, user) {\n    this.type = type;\n    this.credential = credential;\n    this.user = user;\n  }\n  static _fromIdtoken(idToken, user) {\n    return new _MultiFactorSessionImpl(\"enroll\", idToken, user);\n  }\n  static _fromMfaPendingCredential(mfaPendingCredential) {\n    return new _MultiFactorSessionImpl(\"signin\", mfaPendingCredential);\n  }\n  toJSON() {\n    const key = this.type === \"enroll\" ? \"idToken\" : \"pendingCredential\";\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n  static fromJSON(obj) {\n    var _a, _b;\n    if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n      if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\n        return _MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n      } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\n        return _MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n      }\n    }\n    return null;\n  }\n};\nvar MultiFactorResolverImpl = class _MultiFactorResolverImpl {\n  constructor(session, hints, signInResolver) {\n    this.session = session;\n    this.hints = hints;\n    this.signInResolver = signInResolver;\n  }\n  /** @internal */\n  static _fromError(authExtern, error) {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map((enrollment) => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n    _assert(\n      serverResponse.mfaPendingCredential,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n    return new _MultiFactorResolverImpl(session, hints, async (assertion) => {\n      const mfaResponse = await assertion._process(auth, session);\n      delete serverResponse.mfaInfo;\n      delete serverResponse.mfaPendingCredential;\n      const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\n      switch (error.operationType) {\n        case \"signIn\":\n          const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n          await auth._updateCurrentUser(userCredential.user);\n          return userCredential;\n        case \"reauthenticate\":\n          _assert(\n            error.user,\n            auth,\n            \"internal-error\"\n            /* AuthErrorCode.INTERNAL_ERROR */\n          );\n          return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n        default:\n          _fail(\n            auth,\n            \"internal-error\"\n            /* AuthErrorCode.INTERNAL_ERROR */\n          );\n      }\n    });\n  }\n  async resolveSignIn(assertionExtern) {\n    const assertion = assertionExtern;\n    return this.signInResolver(assertion);\n  }\n};\nfunction getMultiFactorResolver(auth, error) {\n  var _a;\n  const authModular = getModularInstance(auth);\n  const errorInternal = error;\n  _assert(\n    error.customData.operationType,\n    authModular,\n    \"argument-error\"\n    /* AuthErrorCode.ARGUMENT_ERROR */\n  );\n  _assert(\n    (_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential,\n    authModular,\n    \"argument-error\"\n    /* AuthErrorCode.ARGUMENT_ERROR */\n  );\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\nfunction startEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:start\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:finalize\", _addTidIfNecessary(auth, request));\n}\nfunction startEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:start\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:finalize\", _addTidIfNecessary(auth, request));\n}\nfunction withdrawMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:withdraw\", _addTidIfNecessary(auth, request));\n}\nvar MultiFactorUserImpl = class _MultiFactorUserImpl {\n  constructor(user) {\n    this.user = user;\n    this.enrolledFactors = [];\n    user._onReload((userInfo) => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map((enrollment) => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n      }\n    });\n  }\n  static _fromUser(user) {\n    return new _MultiFactorUserImpl(user);\n  }\n  async getSession() {\n    return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n  }\n  async enroll(assertionExtern, displayName) {\n    const assertion = assertionExtern;\n    const session = await this.getSession();\n    const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    return this.user.reload();\n  }\n  async unenroll(infoOrUid) {\n    const mfaEnrollmentId = typeof infoOrUid === \"string\" ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n        idToken,\n        mfaEnrollmentId\n      }));\n      this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n};\nvar multiFactorUserCache = /* @__PURE__ */ new WeakMap();\nfunction multiFactor(user) {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n  }\n  return multiFactorUserCache.get(userModular);\n}\nvar STORAGE_AVAILABLE_KEY = \"__sak\";\nvar BrowserPersistenceClass = class {\n  constructor(storageRetriever, type) {\n    this.storageRetriever = storageRetriever;\n    this.type = type;\n  }\n  _isAvailable() {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, \"1\");\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch (_a) {\n      return Promise.resolve(false);\n    }\n  }\n  _set(key, value) {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n  _get(key) {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n  _remove(key) {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n  get storage() {\n    return this.storageRetriever();\n  }\n};\nfunction _iframeCannotSyncWebStorage() {\n  const ua = getUA();\n  return _isSafari(ua) || _isIOS(ua);\n}\nvar _POLLING_INTERVAL_MS$1 = 1e3;\nvar IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\nvar BrowserLocalPersistence = class extends BrowserPersistenceClass {\n  constructor() {\n    super(\n      () => window.localStorage,\n      \"LOCAL\"\n      /* PersistenceType.LOCAL */\n    );\n    this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n    this.listeners = {};\n    this.localCache = {};\n    this.pollTimer = null;\n    this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();\n    this.fallbackToPolling = _isMobileBrowser();\n    this._shouldAllowMigration = true;\n  }\n  forAllChangedKeys(cb) {\n    for (const key of Object.keys(this.listeners)) {\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n  onStorageEvent(event, poll = false) {\n    if (!event.key) {\n      this.forAllChangedKeys((key2, _oldValue, newValue) => {\n        this.notifyListeners(key2, newValue);\n      });\n      return;\n    }\n    const key = event.key;\n    if (poll) {\n      this.detachListener();\n    } else {\n      this.stopPolling();\n    }\n    if (this.safariLocalStorageNotSynced) {\n      const storedValue2 = this.storage.getItem(key);\n      if (event.newValue !== storedValue2) {\n        if (event.newValue !== null) {\n          this.storage.setItem(key, event.newValue);\n        } else {\n          this.storage.removeItem(key);\n        }\n      } else if (this.localCache[key] === event.newValue && !poll) {\n        return;\n      }\n    }\n    const triggerListeners = () => {\n      const storedValue2 = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue2) {\n        return;\n      }\n      this.notifyListeners(key, storedValue2);\n    };\n    const storedValue = this.storage.getItem(key);\n    if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n  notifyListeners(key, value) {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n  startPolling() {\n    this.stopPolling();\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys((key, oldValue, newValue) => {\n        this.onStorageEvent(\n          new StorageEvent(\"storage\", {\n            key,\n            oldValue,\n            newValue\n          }),\n          /* poll */\n          true\n        );\n      });\n    }, _POLLING_INTERVAL_MS$1);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n  attachListener() {\n    window.addEventListener(\"storage\", this.boundEventHandler);\n  }\n  detachListener() {\n    window.removeEventListener(\"storage\", this.boundEventHandler);\n  }\n  _addListener(key, listener) {\n    if (Object.keys(this.listeners).length === 0) {\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = /* @__PURE__ */ new Set();\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n  _removeListener(key, listener) {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n  // Update local cache on base operations:\n  async _set(key, value) {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n  async _get(key) {\n    const value = await super._get(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n  async _remove(key) {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n};\nBrowserLocalPersistence.type = \"LOCAL\";\nvar browserLocalPersistence = BrowserLocalPersistence;\nvar BrowserSessionPersistence = class extends BrowserPersistenceClass {\n  constructor() {\n    super(\n      () => window.sessionStorage,\n      \"SESSION\"\n      /* PersistenceType.SESSION */\n    );\n  }\n  _addListener(_key, _listener) {\n    return;\n  }\n  _removeListener(_key, _listener) {\n    return;\n  }\n};\nBrowserSessionPersistence.type = \"SESSION\";\nvar browserSessionPersistence = BrowserSessionPersistence;\nfunction _allSettled(promises) {\n  return Promise.all(promises.map(async (promise) => {\n    try {\n      const value = await promise;\n      return {\n        fulfilled: true,\n        value\n      };\n    } catch (reason) {\n      return {\n        fulfilled: false,\n        reason\n      };\n    }\n  }));\n}\nvar Receiver = class _Receiver {\n  constructor(eventTarget) {\n    this.eventTarget = eventTarget;\n    this.handlersMap = {};\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget) {\n    const existingInstance = this.receivers.find((receiver) => receiver.isListeningto(eventTarget));\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new _Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n  isListeningto(eventTarget) {\n    return this.eventTarget === eventTarget;\n  }\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  async handleEvent(event) {\n    const messageEvent = event;\n    const { eventId, eventType, data } = messageEvent.data;\n    const handlers = this.handlersMap[eventType];\n    if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\n      return;\n    }\n    messageEvent.ports[0].postMessage({\n      status: \"ack\",\n      eventId,\n      eventType\n    });\n    const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: \"done\",\n      eventId,\n      eventType,\n      response\n    });\n  }\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe(eventType, eventHandler) {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener(\"message\", this.boundEventHandler);\n    }\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = /* @__PURE__ */ new Set();\n    }\n    this.handlersMap[eventType].add(eventHandler);\n  }\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe(eventType, eventHandler) {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener(\"message\", this.boundEventHandler);\n    }\n  }\n};\nReceiver.receivers = [];\nfunction _generateEventId(prefix = \"\", digits = 10) {\n  let random = \"\";\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\nvar Sender = class {\n  constructor(target) {\n    this.target = target;\n    this.handlers = /* @__PURE__ */ new Set();\n  }\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  removeMessageHandler(handler) {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\"message\", handler.onMessage);\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send(eventType, data, timeout = 50) {\n    const messageChannel = typeof MessageChannel !== \"undefined\" ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(\n        \"connection_unavailable\"\n        /* _MessageError.CONNECTION_UNAVAILABLE */\n      );\n    }\n    let completionTimer;\n    let handler;\n    return new Promise((resolve, reject) => {\n      const eventId = _generateEventId(\"\", 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(\n          \"unsupported_event\"\n          /* _MessageError.UNSUPPORTED_EVENT */\n        ));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event) {\n          const messageEvent = event;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case \"ack\":\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(\n                () => {\n                  reject(new Error(\n                    \"timeout\"\n                    /* _MessageError.TIMEOUT */\n                  ));\n                },\n                3e3\n                /* _TimeoutDuration.COMPLETION */\n              );\n              break;\n            case \"done\":\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(\n                \"invalid_response\"\n                /* _MessageError.INVALID_RESPONSE */\n              ));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener(\"message\", handler.onMessage);\n      this.target.postMessage({\n        eventType,\n        eventId,\n        data\n      }, [messageChannel.port2]);\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n};\nfunction _window() {\n  return window;\n}\nfunction _setWindowLocation(url) {\n  _window().location.href = url;\n}\nfunction _isWorker() {\n  return typeof _window()[\"WorkerGlobalScope\"] !== \"undefined\" && typeof _window()[\"importScripts\"] === \"function\";\n}\nasync function _getActiveServiceWorker() {\n  if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch (_a) {\n    return null;\n  }\n}\nfunction _getServiceWorkerController() {\n  var _a;\n  return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\n}\nfunction _getWorkerGlobalScope() {\n  return _isWorker() ? self : null;\n}\nvar DB_NAME = \"firebaseLocalStorageDb\";\nvar DB_VERSION = 1;\nvar DB_OBJECTSTORE_NAME = \"firebaseLocalStorage\";\nvar DB_DATA_KEYPATH = \"fbase_key\";\nvar DBPromise = class {\n  constructor(request) {\n    this.request = request;\n  }\n  toPromise() {\n    return new Promise((resolve, reject) => {\n      this.request.addEventListener(\"success\", () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener(\"error\", () => {\n        reject(this.request.error);\n      });\n    });\n  }\n};\nfunction getObjectStore(db, isReadWrite) {\n  return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? \"readwrite\" : \"readonly\").objectStore(DB_OBJECTSTORE_NAME);\n}\nfunction _deleteDatabase() {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise(request).toPromise();\n}\nfunction _openDatabase() {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener(\"error\", () => {\n      reject(request.error);\n    });\n    request.addEventListener(\"upgradeneeded\", () => {\n      const db = request.result;\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n    request.addEventListener(\"success\", async () => {\n      const db = request.result;\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\nasync function _putObject(db, key, value) {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise(request).toPromise();\n}\nasync function getObject(db, key) {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise(request).toPromise();\n  return data === void 0 ? null : data.value;\n}\nfunction _deleteObject(db, key) {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise(request).toPromise();\n}\nvar _POLLING_INTERVAL_MS = 800;\nvar _TRANSACTION_RETRY_COUNT = 3;\nvar IndexedDBLocalPersistence = class {\n  constructor() {\n    this.type = \"LOCAL\";\n    this._shouldAllowMigration = true;\n    this.listeners = {};\n    this.localCache = {};\n    this.pollTimer = null;\n    this.pendingWrites = 0;\n    this.receiver = null;\n    this.sender = null;\n    this.serviceWorkerReceiverAvailable = false;\n    this.activeServiceWorker = null;\n    this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {\n    }, () => {\n    });\n  }\n  async _openDb() {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n  async _withRetries(op) {\n    let numAttempts = 0;\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = void 0;\n        }\n      }\n    }\n  }\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  async initializeServiceWorkerMessaging() {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  async initializeReceiver() {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n    this.receiver._subscribe(\"keyChanged\", async (_origin, data) => {\n      const keys = await this._poll();\n      return {\n        keyProcessed: keys.includes(data.key)\n      };\n    });\n    this.receiver._subscribe(\"ping\", async (_origin, _data) => {\n      return [\n        \"keyChanged\"\n        /* _EventType.KEY_CHANGED */\n      ];\n    });\n  }\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  async initializeSender() {\n    var _a, _b;\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    const results = await this.sender._send(\n      \"ping\",\n      {},\n      800\n      /* _TimeoutDuration.LONG_ACK */\n    );\n    if (!results) {\n      return;\n    }\n    if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\n      \"keyChanged\"\n      /* _EventType.KEY_CHANGED */\n    ))) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  async notifyServiceWorker(key) {\n    if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {\n      return;\n    }\n    try {\n      await this.sender._send(\n        \"keyChanged\",\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable ? 800 : 50\n        /* _TimeoutDuration.ACK */\n      );\n    } catch (_a) {\n    }\n  }\n  async _isAvailable() {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, \"1\");\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch (_a) {\n    }\n    return false;\n  }\n  async _withPendingWrite(write) {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n  async _set(key, value) {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n  async _get(key) {\n    const obj = await this._withRetries((db) => getObject(db, key));\n    this.localCache[key] = obj;\n    return obj;\n  }\n  async _remove(key) {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n  async _poll() {\n    const result = await this._withRetries((db) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise(getAllRequest).toPromise();\n    });\n    if (!result) {\n      return [];\n    }\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n    const keys = [];\n    const keysInResult = /* @__PURE__ */ new Set();\n    for (const { fbase_key: key, value } of result) {\n      keysInResult.add(key);\n      if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n        this.notifyListeners(key, value);\n        keys.push(key);\n      }\n    }\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n  notifyListeners(key, newValue) {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n  startPolling() {\n    this.stopPolling();\n    this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n  _addListener(key, listener) {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = /* @__PURE__ */ new Set();\n      void this._get(key);\n    }\n    this.listeners[key].add(listener);\n  }\n  _removeListener(key, listener) {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n};\nIndexedDBLocalPersistence.type = \"LOCAL\";\nvar indexedDBLocalPersistence = IndexedDBLocalPersistence;\nfunction startSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaSignIn:start\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaSignIn:finalize\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaSignIn:finalize\", _addTidIfNecessary(auth, request));\n}\nvar _SOLVE_TIME_MS = 500;\nvar _EXPIRATION_TIME_MS = 6e4;\nvar _WIDGET_ID_START = 1e12;\nvar MockReCaptcha = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.counter = _WIDGET_ID_START;\n    this._widgets = /* @__PURE__ */ new Map();\n  }\n  render(container, parameters) {\n    const id = this.counter;\n    this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n    this.counter++;\n    return id;\n  }\n  reset(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\n    this._widgets.delete(id);\n  }\n  getResponse(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || \"\";\n  }\n  async execute(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\n    return \"\";\n  }\n};\nvar MockWidget = class {\n  constructor(containerOrId, appName, params) {\n    this.params = params;\n    this.timerId = null;\n    this.deleted = false;\n    this.responseToken = null;\n    this.clickHandler = () => {\n      this.execute();\n    };\n    const container = typeof containerOrId === \"string\" ? document.getElementById(containerOrId) : containerOrId;\n    _assert(container, \"argument-error\", { appName });\n    this.container = container;\n    this.isVisible = this.params.size !== \"invisible\";\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener(\"click\", this.clickHandler);\n    }\n  }\n  getResponse() {\n    this.checkIfDeleted();\n    return this.responseToken;\n  }\n  delete() {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener(\"click\", this.clickHandler);\n  }\n  execute() {\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n    this.timerId = window.setTimeout(() => {\n      this.responseToken = generateRandomAlphaNumericString(50);\n      const { callback, \"expired-callback\": expiredCallback } = this.params;\n      if (callback) {\n        try {\n          callback(this.responseToken);\n        } catch (e) {\n        }\n      }\n      this.timerId = window.setTimeout(() => {\n        this.timerId = null;\n        this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {\n          }\n        }\n        if (this.isVisible) {\n          this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  }\n  checkIfDeleted() {\n    if (this.deleted) {\n      throw new Error(\"reCAPTCHA mock was already deleted!\");\n    }\n  }\n};\nfunction generateRandomAlphaNumericString(len) {\n  const chars = [];\n  const allowedChars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  for (let i = 0; i < len; i++) {\n    chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n  }\n  return chars.join(\"\");\n}\nvar _JSLOAD_CALLBACK = _generateCallbackName(\"rcb\");\nvar NETWORK_TIMEOUT_DELAY = new Delay(3e4, 6e4);\nvar RECAPTCHA_BASE = \"https://www.google.com/recaptcha/api.js?\";\nvar ReCaptchaLoaderImpl = class {\n  constructor() {\n    var _a;\n    this.hostLanguage = \"\";\n    this.counter = 0;\n    this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\n  }\n  load(auth, hl = \"\") {\n    _assert(\n      isHostLanguageValid(hl),\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha);\n    }\n    return new Promise((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(\n          auth,\n          \"network-request-failed\"\n          /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n        ));\n      }, NETWORK_TIMEOUT_DELAY.get());\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n        const recaptcha = _window().grecaptcha;\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(\n            auth,\n            \"internal-error\"\n            /* AuthErrorCode.INTERNAL_ERROR */\n          ));\n          return;\n        }\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n      const url = `${RECAPTCHA_BASE}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: \"explicit\",\n        hl\n      })}`;\n      _loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        ));\n      });\n    });\n  }\n  clearedOneInstance() {\n    this.counter--;\n  }\n  shouldResolveImmediately(hl) {\n    var _a;\n    return !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n  }\n};\nfunction isHostLanguageValid(hl) {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\nvar MockReCaptchaLoaderImpl = class {\n  async load(auth) {\n    return new MockReCaptcha(auth);\n  }\n  clearedOneInstance() {\n  }\n};\nvar RECAPTCHA_VERIFIER_TYPE = \"recaptcha\";\nvar DEFAULT_PARAMS = {\n  theme: \"light\",\n  type: \"image\"\n};\nvar RecaptchaVerifier = class {\n  /**\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   */\n  constructor(authExtern, containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS)) {\n    this.parameters = parameters;\n    this.type = RECAPTCHA_VERIFIER_TYPE;\n    this.destroyed = false;\n    this.widgetId = null;\n    this.tokenChangeListeners = /* @__PURE__ */ new Set();\n    this.renderPromise = null;\n    this.recaptcha = null;\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === \"invisible\";\n    _assert(\n      typeof document !== \"undefined\",\n      this.auth,\n      \"operation-not-supported-in-this-environment\"\n      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */\n    );\n    const container = typeof containerOrId === \"string\" ? document.getElementById(containerOrId) : containerOrId;\n    _assert(\n      container,\n      this.auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n    this.validateStartingState();\n  }\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify() {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n    return new Promise((resolve) => {\n      const tokenChange = (token) => {\n        if (!token) {\n          return;\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render() {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n    this.renderPromise = this.makeRenderPromise().catch((e) => {\n      this.renderPromise = null;\n      throw e;\n    });\n    return this.renderPromise;\n  }\n  /** @internal */\n  _reset() {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear() {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach((node) => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n  validateStartingState() {\n    _assert(\n      !this.parameters.sitekey,\n      this.auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    _assert(\n      typeof document !== \"undefined\",\n      this.auth,\n      \"operation-not-supported-in-this-environment\"\n      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */\n    );\n  }\n  makeTokenCallback(existing) {\n    return (token) => {\n      this.tokenChangeListeners.forEach((listener) => listener(token));\n      if (typeof existing === \"function\") {\n        existing(token);\n      } else if (typeof existing === \"string\") {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === \"function\") {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n  assertNotDestroyed() {\n    _assert(\n      !this.destroyed,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n  }\n  async makeRenderPromise() {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement(\"div\");\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n      this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n    }\n    return this.widgetId;\n  }\n  async init() {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(\n      siteKey,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    this.parameters.sitekey = siteKey;\n  }\n  getAssertedRecaptcha() {\n    _assert(\n      this.recaptcha,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return this.recaptcha;\n  }\n};\nfunction domReady() {\n  let resolver = null;\n  return new Promise((resolve) => {\n    if (document.readyState === \"complete\") {\n      resolve();\n      return;\n    }\n    resolver = () => resolve();\n    window.addEventListener(\"load\", resolver);\n  }).catch((e) => {\n    if (resolver) {\n      window.removeEventListener(\"load\", resolver);\n    }\n    throw e;\n  });\n}\nvar ConfirmationResultImpl = class {\n  constructor(verificationId, onConfirmation) {\n    this.verificationId = verificationId;\n    this.onConfirmation = onConfirmation;\n  }\n  confirm(verificationCode) {\n    const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n    return this.onConfirmation(authCredential);\n  }\n};\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, (cred) => signInWithCredential(authInternal, cred));\n}\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(\n    false,\n    userInternal,\n    \"phone\"\n    /* ProviderId.PHONE */\n  );\n  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, (cred) => linkWithCredential(userInternal, cred));\n}\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  const userInternal = getModularInstance(user);\n  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, (cred) => reauthenticateWithCredential(userInternal, cred));\n}\nasync function _verifyPhoneNumber(auth, options, verifier) {\n  var _a;\n  const recaptchaToken = await verifier.verify();\n  try {\n    _assert(\n      typeof recaptchaToken === \"string\",\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    _assert(\n      verifier.type === RECAPTCHA_VERIFIER_TYPE,\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    let phoneInfoOptions;\n    if (typeof options === \"string\") {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n    if (\"session\" in phoneInfoOptions) {\n      const session = phoneInfoOptions.session;\n      if (\"phoneNumber\" in phoneInfoOptions) {\n        _assert(\n          session.type === \"enroll\",\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n        const response = await startEnrollPhoneMfa(auth, {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken\n          }\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === \"signin\",\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n        const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;\n        _assert(\n          mfaEnrollmentId,\n          auth,\n          \"missing-multi-factor-info\"\n          /* AuthErrorCode.MISSING_MFA_INFO */\n        );\n        const response = await startSignInPhoneMfa(auth, {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            recaptchaToken\n          }\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const { sessionInfo } = await sendPhoneVerificationCode(auth, {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        recaptchaToken\n      });\n      return sessionInfo;\n    }\n  } finally {\n    verifier._reset();\n  }\n}\nasync function updatePhoneNumber(user, credential) {\n  await _link$1(getModularInstance(user), credential);\n}\nvar PhoneAuthProvider = class _PhoneAuthProvider {\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth) {\n    this.providerId = _PhoneAuthProvider.PROVIDER_ID;\n    this.auth = _castAuth(auth);\n  }\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - For abuse prevention, this method also requires a\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\n   * {@link RecaptchaVerifier}.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow..\n   */\n  verifyPhoneNumber(phoneOptions, applicationVerifier) {\n    return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));\n  }\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(verificationId, verificationCode) {\n    return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n  }\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    const credential = userCredential;\n    return _PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error) {\n    return _PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } = tokenResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n    }\n    return null;\n  }\n};\nPhoneAuthProvider.PROVIDER_ID = \"phone\";\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\";\nfunction _withDefaultResolver(auth, resolverOverride) {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n  _assert(\n    auth._popupRedirectResolver,\n    auth,\n    \"argument-error\"\n    /* AuthErrorCode.ARGUMENT_ERROR */\n  );\n  return auth._popupRedirectResolver;\n}\nvar IdpCredential = class extends AuthCredential {\n  constructor(params) {\n    super(\n      \"custom\",\n      \"custom\"\n      /* ProviderId.CUSTOM */\n    );\n    this.params = params;\n  }\n  _getIdTokenResponse(auth) {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n  _linkToIdToken(auth, idToken) {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n  _getReauthenticationResolver(auth) {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n  _buildIdpRequest(idToken) {\n    const request = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n    if (idToken) {\n      request.idToken = idToken;\n    }\n    return request;\n  }\n};\nfunction _signIn(params) {\n  return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n}\nfunction _reauth(params) {\n  const { auth, user } = params;\n  _assert(\n    user,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n}\nasync function _link(params) {\n  const { auth, user } = params;\n  _assert(\n    user,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n}\nvar AbstractPopupRedirectOperation = class {\n  constructor(auth, filter, resolver, user, bypassAuthState = false) {\n    this.auth = auth;\n    this.resolver = resolver;\n    this.user = user;\n    this.bypassAuthState = bypassAuthState;\n    this.pendingPromise = null;\n    this.eventManager = null;\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n  execute() {\n    return new Promise(async (resolve, reject) => {\n      this.pendingPromise = { resolve, reject };\n      try {\n        this.eventManager = await this.resolver._initialize(this.auth);\n        await this.onExecution();\n        this.eventManager.registerConsumer(this);\n      } catch (e) {\n        this.reject(e);\n      }\n    });\n  }\n  async onAuthEvent(event) {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n    const params = {\n      auth: this.auth,\n      requestUri: urlResponse,\n      sessionId,\n      tenantId: tenantId || void 0,\n      postBody: postBody || void 0,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  onError(error) {\n    this.reject(error);\n  }\n  getIdpTask(type) {\n    switch (type) {\n      case \"signInViaPopup\":\n      case \"signInViaRedirect\":\n        return _signIn;\n      case \"linkViaPopup\":\n      case \"linkViaRedirect\":\n        return _link;\n      case \"reauthViaPopup\":\n      case \"reauthViaRedirect\":\n        return _reauth;\n      default:\n        _fail(\n          this.auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n    }\n  }\n  resolve(cred) {\n    debugAssert(this.pendingPromise, \"Pending promise was never set\");\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n  reject(error) {\n    debugAssert(this.pendingPromise, \"Pending promise was never set\");\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n  unregisterAndCleanUp() {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n};\nvar _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2e3, 1e4);\nasync function signInWithPopup(auth, provider, resolver) {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(authInternal, \"signInViaPopup\", provider, resolverInternal);\n  return action.executeNotNull();\n}\nasync function reauthenticateWithPopup(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\", provider, resolverInternal, userInternal);\n  return action.executeNotNull();\n}\nasync function linkWithPopup(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(userInternal.auth, \"linkViaPopup\", provider, resolverInternal, userInternal);\n  return action.executeNotNull();\n}\nvar PopupOperation = class _PopupOperation extends AbstractPopupRedirectOperation {\n  constructor(auth, filter, provider, resolver, user) {\n    super(auth, filter, resolver, user);\n    this.provider = provider;\n    this.authWindow = null;\n    this.pollId = null;\n    if (_PopupOperation.currentPopupAction) {\n      _PopupOperation.currentPopupAction.cancel();\n    }\n    _PopupOperation.currentPopupAction = this;\n  }\n  async executeNotNull() {\n    const result = await this.execute();\n    _assert(\n      result,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return result;\n  }\n  async onExecution() {\n    debugAssert(this.filter.length === 1, \"Popup operations only handle one event\");\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(\n      this.auth,\n      this.provider,\n      this.filter[0],\n      // There's always one, see constructor\n      eventId\n    );\n    this.authWindow.associatedEvent = eventId;\n    this.resolver._originValidation(this.auth).catch((e) => {\n      this.reject(e);\n    });\n    this.resolver._isIframeWebStorageSupported(this.auth, (isSupported) => {\n      if (!isSupported) {\n        this.reject(_createError(\n          this.auth,\n          \"web-storage-unsupported\"\n          /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */\n        ));\n      }\n    });\n    this.pollUserCancellation();\n  }\n  get eventId() {\n    var _a;\n    return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\n  }\n  cancel() {\n    this.reject(_createError(\n      this.auth,\n      \"cancelled-popup-request\"\n      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */\n    ));\n  }\n  cleanUp() {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n    this.authWindow = null;\n    this.pollId = null;\n    _PopupOperation.currentPopupAction = null;\n  }\n  pollUserCancellation() {\n    const poll = () => {\n      var _a, _b;\n      if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\n        this.pollId = window.setTimeout(\n          () => {\n            this.pollId = null;\n            this.reject(_createError(\n              this.auth,\n              \"popup-closed-by-user\"\n              /* AuthErrorCode.POPUP_CLOSED_BY_USER */\n            ));\n          },\n          8e3\n          /* _Timeout.AUTH_EVENT */\n        );\n        return;\n      }\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n    poll();\n  }\n};\nPopupOperation.currentPopupAction = null;\nvar PENDING_REDIRECT_KEY = \"pendingRedirect\";\nvar redirectOutcomeMap = /* @__PURE__ */ new Map();\nvar RedirectAction = class extends AbstractPopupRedirectOperation {\n  constructor(auth, resolver, bypassAuthState = false) {\n    super(auth, [\n      \"signInViaRedirect\",\n      \"linkViaRedirect\",\n      \"reauthViaRedirect\",\n      \"unknown\"\n      /* AuthEventType.UNKNOWN */\n    ], resolver, void 0, bypassAuthState);\n    this.eventId = null;\n  }\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute() {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n    return readyOutcome();\n  }\n  async onAuthEvent(event) {\n    if (event.type === \"signInViaRedirect\") {\n      return super.onAuthEvent(event);\n    } else if (event.type === \"unknown\") {\n      this.resolve(null);\n      return;\n    }\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n  async onExecution() {\n  }\n  cleanUp() {\n  }\n};\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!await persistence._isAvailable()) {\n    return false;\n  }\n  const hasPendingRedirect = await persistence._get(key) === \"true\";\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\nasync function _setPendingRedirectStatus(resolver, auth) {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), \"true\");\n}\nfunction _overrideRedirectResult(auth, result) {\n  redirectOutcomeMap.set(auth._key(), result);\n}\nfunction resolverPersistence(resolver) {\n  return _getInstance(resolver._redirectPersistence);\n}\nfunction pendingRedirectKey(auth) {\n  return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n}\nfunction signInWithRedirect(auth, provider, resolver) {\n  return _signInWithRedirect(auth, provider, resolver);\n}\nasync function _signInWithRedirect(auth, provider, resolver) {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    \"signInViaRedirect\"\n    /* AuthEventType.SIGN_IN_VIA_REDIRECT */\n  );\n}\nfunction reauthenticateWithRedirect(user, provider, resolver) {\n  return _reauthenticateWithRedirect(user, provider, resolver);\n}\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  await userInternal.auth._initializationPromise;\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\", eventId);\n}\nfunction linkWithRedirect(user, provider, resolver) {\n  return _linkWithRedirect(user, provider, resolver);\n}\nasync function _linkWithRedirect(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  await userInternal.auth._initializationPromise;\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\", eventId);\n}\nasync function getRedirectResult(auth, resolver) {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n  return result;\n}\nasync function prepareUserForRedirect(user) {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\nvar EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1e3;\nvar AuthEventManager = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.cachedEventUids = /* @__PURE__ */ new Set();\n    this.consumers = /* @__PURE__ */ new Set();\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n    this.lastProcessedEventTime = Date.now();\n  }\n  registerConsumer(authEventConsumer) {\n    this.consumers.add(authEventConsumer);\n    if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n  unregisterConsumer(authEventConsumer) {\n    this.consumers.delete(authEventConsumer);\n  }\n  onEvent(event) {\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n    let handled = false;\n    this.consumers.forEach((consumer) => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      return handled;\n    }\n    this.hasHandledPotentialRedirect = true;\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n    return handled;\n  }\n  sendToConsumer(event, consumer) {\n    var _a;\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split(\"auth/\")[1]) || \"internal-error\";\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n  isEventForConsumer(event, consumer) {\n    const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n  hasEventBeenHandled(event) {\n    if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {\n      this.cachedEventUids.clear();\n    }\n    return this.cachedEventUids.has(eventUid(event));\n  }\n  saveEventToCache(event) {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n};\nfunction eventUid(e) {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter((v) => v).join(\"-\");\n}\nfunction isNullRedirectEvent({ type, error }) {\n  return type === \"unknown\" && (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\"}`;\n}\nfunction isRedirectEvent(event) {\n  switch (event.type) {\n    case \"signInViaRedirect\":\n    case \"linkViaRedirect\":\n    case \"reauthViaRedirect\":\n      return true;\n    case \"unknown\":\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\nasync function _getProjectConfig(auth, request = {}) {\n  return _performApiRequest(auth, \"GET\", \"/v1/projects\", request);\n}\nvar IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nvar HTTP_REGEX = /^https?/;\nasync function _validateOrigin(auth) {\n  if (auth.config.emulator) {\n    return;\n  }\n  const { authorizedDomains } = await _getProjectConfig(auth);\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch (_a) {\n    }\n  }\n  _fail(\n    auth,\n    \"unauthorized-domain\"\n    /* AuthErrorCode.INVALID_ORIGIN */\n  );\n}\nfunction matchDomain(expected) {\n  const currentUrl = _getCurrentUrl();\n  const { protocol, hostname } = new URL(currentUrl);\n  if (expected.startsWith(\"chrome-extension://\")) {\n    const ceUrl = new URL(expected);\n    if (ceUrl.hostname === \"\" && hostname === \"\") {\n      return protocol === \"chrome-extension:\" && expected.replace(\"chrome-extension://\", \"\") === currentUrl.replace(\"chrome-extension://\", \"\");\n    }\n    return protocol === \"chrome-extension:\" && ceUrl.hostname === hostname;\n  }\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    return hostname === expected;\n  }\n  const escapedDomainPattern = expected.replace(/\\./g, \"\\\\.\");\n  const re = new RegExp(\"^(.+\\\\.\" + escapedDomainPattern + \"|\" + escapedDomainPattern + \")$\", \"i\");\n  return re.test(hostname);\n}\nvar NETWORK_TIMEOUT = new Delay(3e4, 6e4);\nfunction resetUnloadedGapiModules() {\n  const beacon = _window().___jsl;\n  if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\n    for (const hint of Object.keys(beacon.H)) {\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\nfunction loadGapi(auth) {\n  return new Promise((resolve, reject) => {\n    var _a, _b, _c;\n    function loadGapiIframe() {\n      resetUnloadedGapiModules();\n      gapi.load(\"gapi.iframes\", {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          resetUnloadedGapiModules();\n          reject(_createError(\n            auth,\n            \"network-request-failed\"\n            /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n          ));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n    if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\n      resolve(gapi.iframes.getContext());\n    } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\n      loadGapiIframe();\n    } else {\n      const cbName = _generateCallbackName(\"iframefcb\");\n      _window()[cbName] = () => {\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          reject(_createError(\n            auth,\n            \"network-request-failed\"\n            /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n          ));\n        }\n      };\n      return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch((e) => reject(e));\n    }\n  }).catch((error) => {\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\nvar cachedGApiLoader = null;\nfunction _loadGapi(auth) {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\nvar PING_TIMEOUT = new Delay(5e3, 15e3);\nvar IFRAME_PATH = \"__/auth/iframe\";\nvar EMULATED_IFRAME_PATH = \"emulator/auth/iframe\";\nvar IFRAME_ATTRIBUTES = {\n  style: {\n    position: \"absolute\",\n    top: \"-100px\",\n    width: \"1px\",\n    height: \"1px\"\n  },\n  \"aria-hidden\": \"true\",\n  tabindex: \"-1\"\n};\nvar EID_FROM_APIHOST = /* @__PURE__ */ new Map([\n  [\"identitytoolkit.googleapis.com\", \"p\"],\n  [\"staging-identitytoolkit.sandbox.googleapis.com\", \"s\"],\n  [\"test-identitytoolkit.sandbox.googleapis.com\", \"t\"]\n  // test\n]);\nfunction getIframeUrl(auth) {\n  const config = auth.config;\n  _assert(\n    config.authDomain,\n    auth,\n    \"auth-domain-config-required\"\n    /* AuthErrorCode.MISSING_AUTH_DOMAIN */\n  );\n  const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n  const params = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(\",\");\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\nasync function _openIframe(auth) {\n  const context = await _loadGapi(auth);\n  const gapi2 = _window().gapi;\n  _assert(\n    gapi2,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return context.open({\n    where: document.body,\n    url: getIframeUrl(auth),\n    messageHandlersFilter: gapi2.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n    attributes: IFRAME_ATTRIBUTES,\n    dontclear: true\n  }, (iframe) => new Promise(async (resolve, reject) => {\n    await iframe.restyle({\n      // Prevent iframe from closing on mouse out.\n      setHideOnLeave: false\n    });\n    const networkError = _createError(\n      auth,\n      \"network-request-failed\"\n      /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n    );\n    const networkErrorTimer = _window().setTimeout(() => {\n      reject(networkError);\n    }, PING_TIMEOUT.get());\n    function clearTimerAndResolve() {\n      _window().clearTimeout(networkErrorTimer);\n      resolve(iframe);\n    }\n    iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n      reject(networkError);\n    });\n  }));\n}\nvar BASE_POPUP_OPTIONS = {\n  location: \"yes\",\n  resizable: \"yes\",\n  statusbar: \"yes\",\n  toolbar: \"no\"\n};\nvar DEFAULT_WIDTH = 500;\nvar DEFAULT_HEIGHT = 600;\nvar TARGET_BLANK = \"_blank\";\nvar FIREFOX_EMPTY_URL = \"http://localhost\";\nvar AuthPopup = class {\n  constructor(window2) {\n    this.window = window2;\n    this.associatedEvent = null;\n  }\n  close() {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {\n      }\n    }\n  }\n};\nfunction _open(auth, url, name2, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = \"\";\n  const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  });\n  const ua = getUA().toLowerCase();\n  if (name2) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name2;\n  }\n  if (_isFirefox(ua)) {\n    url = url || FIREFOX_EMPTY_URL;\n    options.scrollbars = \"yes\";\n  }\n  const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, \"\");\n  if (_isIOSStandalone(ua) && target !== \"_self\") {\n    openAsNewWindowIOS(url || \"\", target);\n    return new AuthPopup(null);\n  }\n  const newWin = window.open(url || \"\", target, optionsString);\n  _assert(\n    newWin,\n    auth,\n    \"popup-blocked\"\n    /* AuthErrorCode.POPUP_BLOCKED */\n  );\n  try {\n    newWin.focus();\n  } catch (e) {\n  }\n  return new AuthPopup(newWin);\n}\nfunction openAsNewWindowIOS(url, target) {\n  const el = document.createElement(\"a\");\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent(\"MouseEvent\");\n  click.initMouseEvent(\"click\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n  el.dispatchEvent(click);\n}\nvar WIDGET_PATH = \"__/auth/handler\";\nvar EMULATOR_WIDGET_PATH = \"emulator/auth/handler\";\nvar FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent(\"fac\");\nasync function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n  _assert(\n    auth.config.authDomain,\n    auth,\n    \"auth-domain-config-required\"\n    /* AuthErrorCode.MISSING_AUTH_DOMAIN */\n  );\n  _assert(\n    auth.config.apiKey,\n    auth,\n    \"invalid-api-key\"\n    /* AuthErrorCode.INVALID_API_KEY */\n  );\n  const params = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || \"\";\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter((scope) => scope !== \"\");\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(\",\");\n    }\n  }\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n  const paramsDict = params;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === void 0) {\n      delete paramsDict[key];\n    }\n  }\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : \"\";\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;\n}\nfunction getHandlerBase({ config }) {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\nvar WEB_STORAGE_SUPPORT_KEY = \"webStorageSupport\";\nvar BrowserPopupRedirectResolver = class {\n  constructor() {\n    this.eventManagers = {};\n    this.iframes = {};\n    this.originValidationPromises = {};\n    this._redirectPersistence = browserSessionPersistence;\n    this._completeRedirectFn = _getRedirectResult;\n    this._overrideRedirectResult = _overrideRedirectResult;\n  }\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(auth, provider, authType, eventId) {\n    var _a;\n    debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, \"_initialize() not called before _openPopup()\");\n    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n    return _open(auth, url, _generateEventId());\n  }\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n    _setWindowLocation(url);\n    return new Promise(() => {\n    });\n  }\n  _initialize(auth) {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const { manager, promise: promise2 } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise2, \"If manager is not set, promise should be\");\n        return promise2;\n      }\n    }\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = { promise };\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n    return promise;\n  }\n  async initAndGetManager(auth) {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register(\"authEvent\", (iframeEvent) => {\n      _assert(\n        iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent,\n        auth,\n        \"invalid-auth-event\"\n        /* AuthErrorCode.INVALID_AUTH_EVENT */\n      );\n      const handled = manager.onEvent(iframeEvent.authEvent);\n      return {\n        status: handled ? \"ACK\" : \"ERROR\"\n        /* GapiOutcome.ERROR */\n      };\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    this.eventManagers[auth._key()] = { manager };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n  _isIframeWebStorageSupported(auth, cb) {\n    const iframe = this.iframes[auth._key()];\n    iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, (result) => {\n      var _a;\n      const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\n      if (isSupported !== void 0) {\n        cb(!!isSupported);\n      }\n      _fail(\n        auth,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n  }\n  _originValidation(auth) {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n    return this.originValidationPromises[key];\n  }\n  get _shouldInitProactively() {\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n};\nvar browserPopupRedirectResolver = BrowserPopupRedirectResolver;\nvar MultiFactorAssertionImpl = class {\n  constructor(factorId) {\n    this.factorId = factorId;\n  }\n  _process(auth, session, displayName) {\n    switch (session.type) {\n      case \"enroll\":\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case \"signin\":\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail(\"unexpected MultiFactorSessionType\");\n    }\n  }\n};\nvar PhoneMultiFactorAssertionImpl = class _PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n  constructor(credential) {\n    super(\n      \"phone\"\n      /* FactorId.PHONE */\n    );\n    this.credential = credential;\n  }\n  /** @internal */\n  static _fromCredential(credential) {\n    return new _PhoneMultiFactorAssertionImpl(credential);\n  }\n  /** @internal */\n  _finalizeEnroll(auth, idToken, displayName) {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n  /** @internal */\n  _finalizeSignIn(auth, mfaPendingCredential) {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n};\nvar PhoneMultiFactorGenerator = class {\n  constructor() {\n  }\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential) {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n};\nPhoneMultiFactorGenerator.FACTOR_ID = \"phone\";\nvar TotpMultiFactorGenerator = class {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(secret, oneTimePassword) {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(enrollmentId, oneTimePassword) {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n  }\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(session) {\n    var _a;\n    const mfaSession = session;\n    _assert(\n      typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== \"undefined\",\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n  }\n};\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\";\nvar TotpMultiFactorAssertionImpl = class _TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n  constructor(otp, enrollmentId, secret) {\n    super(\n      \"totp\"\n      /* FactorId.TOTP */\n    );\n    this.otp = otp;\n    this.enrollmentId = enrollmentId;\n    this.secret = secret;\n  }\n  /** @internal */\n  static _fromSecret(secret, otp) {\n    return new _TotpMultiFactorAssertionImpl(otp, void 0, secret);\n  }\n  /** @internal */\n  static _fromEnrollmentId(enrollmentId, otp) {\n    return new _TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n  /** @internal */\n  async _finalizeEnroll(auth, idToken, displayName) {\n    _assert(\n      typeof this.secret !== \"undefined\",\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n  /** @internal */\n  async _finalizeSignIn(auth, mfaPendingCredential) {\n    _assert(\n      this.enrollmentId !== void 0 && this.otp !== void 0,\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    const totpVerificationInfo = { verificationCode: this.otp };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n};\nvar TotpSecret = class _TotpSecret {\n  // The public members are declared outside the constructor so the docs can be generated.\n  constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n    this.sessionInfo = sessionInfo;\n    this.auth = auth;\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n    return new _TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n  }\n  /** @internal */\n  _makeTotpVerificationInfo(otp) {\n    return { sessionInfo: this.sessionInfo, verificationCode: otp };\n  }\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName, issuer) {\n    var _a;\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || \"unknownuser\";\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n};\nfunction _isEmptyString(input) {\n  return typeof input === \"undefined\" || (input === null || input === void 0 ? void 0 : input.length) === 0;\n}\nvar name = \"@firebase/auth\";\nvar version = \"1.4.0\";\nvar AuthInterop = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.internalListeners = /* @__PURE__ */ new Map();\n  }\n  getUid() {\n    var _a;\n    this.assertAuthConfigured();\n    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n  }\n  async getToken(forceRefresh) {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n  addAuthTokenListener(listener) {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n    const unsubscribe = this.auth.onIdTokenChanged((user) => {\n      listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n  removeAuthTokenListener(listener) {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n  assertAuthConfigured() {\n    _assert(\n      this.auth._initializationPromise,\n      \"dependent-sdk-initialized-before-auth\"\n      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */\n    );\n  }\n  updateProactiveRefresh() {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n};\nfunction getVersionForPlatform(clientPlatform) {\n  switch (clientPlatform) {\n    case \"Node\":\n      return \"node\";\n    case \"ReactNative\":\n      return \"rn\";\n    case \"Worker\":\n      return \"webworker\";\n    case \"Cordova\":\n      return \"cordova\";\n    default:\n      return void 0;\n  }\n}\nfunction registerAuth(clientPlatform) {\n  _registerComponent(new Component(\n    \"auth\",\n    (container, { options: deps }) => {\n      const app = container.getProvider(\"app\").getImmediate();\n      const heartbeatServiceProvider = container.getProvider(\"heartbeat\");\n      const appCheckServiceProvider = container.getProvider(\"app-check-internal\");\n      const { apiKey, authDomain } = app.options;\n      _assert(apiKey && !apiKey.includes(\":\"), \"invalid-api-key\", { appName: app.name });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\",\n        tokenApiHost: \"securetoken.googleapis.com\",\n        apiScheme: \"https\",\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    },\n    \"PUBLIC\"\n    /* ComponentType.PUBLIC */\n  ).setInstantiationMode(\n    \"EXPLICIT\"\n    /* InstantiationMode.EXPLICIT */\n  ).setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n    const authInternalProvider = container.getProvider(\n      \"auth-internal\"\n      /* _ComponentName.AUTH_INTERNAL */\n    );\n    authInternalProvider.initialize();\n  }));\n  _registerComponent(new Component(\n    \"auth-internal\",\n    (container) => {\n      const auth = _castAuth(container.getProvider(\n        \"auth\"\n        /* _ComponentName.AUTH */\n      ).getImmediate());\n      return ((auth2) => new AuthInterop(auth2))(auth);\n    },\n    \"PRIVATE\"\n    /* ComponentType.PRIVATE */\n  ).setInstantiationMode(\n    \"EXPLICIT\"\n    /* InstantiationMode.EXPLICIT */\n  ));\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  registerVersion(name, version, \"esm2017\");\n}\nvar DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nvar authIdTokenMaxAge = getExperimentalSetting(\"authIdTokenMaxAge\") || DEFAULT_ID_TOKEN_MAX_AGE;\nvar lastPostedIdToken = null;\nvar mintCookieFactory = (url) => async (user) => {\n  const idTokenResult = user && await user.getIdTokenResult();\n  const idTokenAge = idTokenResult && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1e3;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? \"POST\" : \"DELETE\",\n    headers: idToken ? {\n      \"Authorization\": `Bearer ${idToken}`\n    } : {}\n  });\n};\nfunction getAuth(app = getApp()) {\n  const provider = _getProvider(app, \"auth\");\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [\n      indexedDBLocalPersistence,\n      browserLocalPersistence,\n      browserSessionPersistence\n    ]\n  });\n  const authTokenSyncUrl = getExperimentalSetting(\"authTokenSyncURL\");\n  if (authTokenSyncUrl) {\n    const mintCookie = mintCookieFactory(authTokenSyncUrl);\n    beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n    onIdTokenChanged(auth, (user) => mintCookie(user));\n  }\n  const authEmulatorHost = getDefaultEmulatorHost(\"auth\");\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  }\n  return auth;\n}\nregisterAuth(\n  \"Browser\"\n  /* ClientPlatform.BROWSER */\n);\n\nexport {\n  FactorId,\n  ProviderId,\n  SignInMethod,\n  OperationType,\n  ActionCodeOperation,\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY,\n  getIdToken,\n  getIdTokenResult,\n  reload,\n  inMemoryPersistence,\n  initializeAuth,\n  connectAuthEmulator,\n  AuthCredential,\n  EmailAuthCredential,\n  OAuthCredential,\n  PhoneAuthCredential,\n  ActionCodeURL,\n  parseActionCodeURL,\n  EmailAuthProvider,\n  OAuthProvider,\n  FacebookAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  SAMLAuthProvider,\n  TwitterAuthProvider,\n  signInAnonymously,\n  unlink,\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCustomToken,\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink,\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail,\n  updateProfile,\n  updateEmail,\n  updatePassword,\n  getAdditionalUserInfo,\n  setPersistence,\n  initializeRecaptchaConfig,\n  validatePassword,\n  onIdTokenChanged,\n  beforeAuthStateChanged,\n  onAuthStateChanged,\n  useDeviceLanguage,\n  updateCurrentUser,\n  signOut,\n  revokeAccessToken,\n  deleteUser,\n  getMultiFactorResolver,\n  multiFactor,\n  browserLocalPersistence,\n  browserSessionPersistence,\n  indexedDBLocalPersistence,\n  RecaptchaVerifier,\n  signInWithPhoneNumber,\n  linkWithPhoneNumber,\n  reauthenticateWithPhoneNumber,\n  updatePhoneNumber,\n  PhoneAuthProvider,\n  signInWithPopup,\n  reauthenticateWithPopup,\n  linkWithPopup,\n  signInWithRedirect,\n  reauthenticateWithRedirect,\n  linkWithRedirect,\n  getRedirectResult,\n  browserPopupRedirectResolver,\n  PhoneMultiFactorGenerator,\n  TotpMultiFactorGenerator,\n  TotpSecret,\n  getAuth\n};\n/*! Bundled license information:\n\n@firebase/auth/dist/esm2017/index-61e5ac61.js:\n  (**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n\n@firebase/auth/dist/esm2017/index-61e5ac61.js:\n  (**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n\n@firebase/auth/dist/esm2017/index-61e5ac61.js:\n  (**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n*/\n//# sourceMappingURL=chunk-5MUGQBSR.js.map\n",
      "start": 1701867792352,
      "end": 1701867792434,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:react-swc",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1701867792434,
      "end": 1701867792434,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1701867792434,
      "end": 1701867792435,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1701867792435,
      "end": 1701867792435,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1701867792435,
      "end": 1701867792435,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1701867792435,
      "end": 1701867792435,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import {\n  Component,\n  ErrorFactory,\n  FirebaseError,\n  LogLevel,\n  Logger,\n  SDK_VERSION,\n  _getProvider,\n  _registerComponent,\n  base64Decode,\n  createSubscribe,\n  deepEqual,\n  extractQuerystring,\n  getApp,\n  getDefaultEmulatorHost,\n  getExperimentalSetting,\n  getModularInstance,\n  getUA,\n  isBrowserExtension,\n  isEmpty,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  querystring,\n  querystringDecode,\n  registerVersion\n} from \"/node_modules/.vite/deps/chunk-B7GYBXJM.js?v=c929456e\";\n\n// node_modules/tslib/tslib.es6.mjs\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s)\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n        t[p[i]] = s[p[i]];\n    }\n  return t;\n}\n\n// node_modules/@firebase/auth/dist/esm2017/index-61e5ac61.js\nvar FactorId = {\n  /** Phone as second factor */\n  PHONE: \"phone\",\n  TOTP: \"totp\"\n};\nvar ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: \"facebook.com\",\n  /** GitHub provider ID */\n  GITHUB: \"github.com\",\n  /** Google provider ID */\n  GOOGLE: \"google.com\",\n  /** Password provider */\n  PASSWORD: \"password\",\n  /** Phone provider */\n  PHONE: \"phone\",\n  /** Twitter provider ID */\n  TWITTER: \"twitter.com\"\n};\nvar SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: \"emailLink\",\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: \"password\",\n  /** Facebook sign in method */\n  FACEBOOK: \"facebook.com\",\n  /** GitHub sign in method */\n  GITHUB: \"github.com\",\n  /** Google sign in method */\n  GOOGLE: \"google.com\",\n  /** Phone sign in method */\n  PHONE: \"phone\",\n  /** Twitter sign in method */\n  TWITTER: \"twitter.com\"\n};\nvar OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: \"link\",\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: \"reauthenticate\",\n  /** Operation involving signing in a user. */\n  SIGN_IN: \"signIn\"\n};\nvar ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: \"EMAIL_SIGNIN\",\n  /** The password reset action. */\n  PASSWORD_RESET: \"PASSWORD_RESET\",\n  /** The email revocation action. */\n  RECOVER_EMAIL: \"RECOVER_EMAIL\",\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\",\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\",\n  /** The email verification action. */\n  VERIFY_EMAIL: \"VERIFY_EMAIL\"\n};\nfunction _debugErrorMap() {\n  return {\n    [\n      \"admin-restricted-operation\"\n      /* AuthErrorCode.ADMIN_ONLY_OPERATION */\n    ]: \"This operation is restricted to administrators only.\",\n    [\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    ]: \"\",\n    [\n      \"app-not-authorized\"\n      /* AuthErrorCode.APP_NOT_AUTHORIZED */\n    ]: \"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.\",\n    [\n      \"app-not-installed\"\n      /* AuthErrorCode.APP_NOT_INSTALLED */\n    ]: \"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.\",\n    [\n      \"captcha-check-failed\"\n      /* AuthErrorCode.CAPTCHA_CHECK_FAILED */\n    ]: \"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.\",\n    [\n      \"code-expired\"\n      /* AuthErrorCode.CODE_EXPIRED */\n    ]: \"The SMS code has expired. Please re-send the verification code to try again.\",\n    [\n      \"cordova-not-ready\"\n      /* AuthErrorCode.CORDOVA_NOT_READY */\n    ]: \"Cordova framework is not ready.\",\n    [\n      \"cors-unsupported\"\n      /* AuthErrorCode.CORS_UNSUPPORTED */\n    ]: \"This browser is not supported.\",\n    [\n      \"credential-already-in-use\"\n      /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */\n    ]: \"This credential is already associated with a different user account.\",\n    [\n      \"custom-token-mismatch\"\n      /* AuthErrorCode.CREDENTIAL_MISMATCH */\n    ]: \"The custom token corresponds to a different audience.\",\n    [\n      \"requires-recent-login\"\n      /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */\n    ]: \"This operation is sensitive and requires recent authentication. Log in again before retrying this request.\",\n    [\n      \"dependent-sdk-initialized-before-auth\"\n      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */\n    ]: \"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.\",\n    [\n      \"dynamic-link-not-activated\"\n      /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */\n    ]: \"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.\",\n    [\n      \"email-change-needs-verification\"\n      /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */\n    ]: \"Multi-factor users must always have a verified email.\",\n    [\n      \"email-already-in-use\"\n      /* AuthErrorCode.EMAIL_EXISTS */\n    ]: \"The email address is already in use by another account.\",\n    [\n      \"emulator-config-failed\"\n      /* AuthErrorCode.EMULATOR_CONFIG_FAILED */\n    ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling \"connectAuthEmulator()\" sooner.',\n    [\n      \"expired-action-code\"\n      /* AuthErrorCode.EXPIRED_OOB_CODE */\n    ]: \"The action code has expired.\",\n    [\n      \"cancelled-popup-request\"\n      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */\n    ]: \"This operation has been cancelled due to another conflicting popup being opened.\",\n    [\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"invalid-app-credential\"\n      /* AuthErrorCode.INVALID_APP_CREDENTIAL */\n    ]: \"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.\",\n    [\n      \"invalid-app-id\"\n      /* AuthErrorCode.INVALID_APP_ID */\n    ]: \"The mobile app identifier is not registed for the current project.\",\n    [\n      \"invalid-user-token\"\n      /* AuthErrorCode.INVALID_AUTH */\n    ]: \"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.\",\n    [\n      \"invalid-auth-event\"\n      /* AuthErrorCode.INVALID_AUTH_EVENT */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"invalid-verification-code\"\n      /* AuthErrorCode.INVALID_CODE */\n    ]: \"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.\",\n    [\n      \"invalid-continue-uri\"\n      /* AuthErrorCode.INVALID_CONTINUE_URI */\n    ]: \"The continue URL provided in the request is invalid.\",\n    [\n      \"invalid-cordova-configuration\"\n      /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */\n    ]: \"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.\",\n    [\n      \"invalid-custom-token\"\n      /* AuthErrorCode.INVALID_CUSTOM_TOKEN */\n    ]: \"The custom token format is incorrect. Please check the documentation.\",\n    [\n      \"invalid-dynamic-link-domain\"\n      /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */\n    ]: \"The provided dynamic link domain is not configured or authorized for the current project.\",\n    [\n      \"invalid-email\"\n      /* AuthErrorCode.INVALID_EMAIL */\n    ]: \"The email address is badly formatted.\",\n    [\n      \"invalid-emulator-scheme\"\n      /* AuthErrorCode.INVALID_EMULATOR_SCHEME */\n    ]: \"Emulator URL must start with a valid scheme (http:// or https://).\",\n    [\n      \"invalid-api-key\"\n      /* AuthErrorCode.INVALID_API_KEY */\n    ]: \"Your API key is invalid, please check you have copied it correctly.\",\n    [\n      \"invalid-cert-hash\"\n      /* AuthErrorCode.INVALID_CERT_HASH */\n    ]: \"The SHA-1 certificate hash provided is invalid.\",\n    [\n      \"invalid-credential\"\n      /* AuthErrorCode.INVALID_IDP_RESPONSE */\n    ]: \"The supplied auth credential is malformed or has expired.\",\n    [\n      \"invalid-message-payload\"\n      /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */\n    ]: \"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.\",\n    [\n      \"invalid-multi-factor-session\"\n      /* AuthErrorCode.INVALID_MFA_SESSION */\n    ]: \"The request does not contain a valid proof of first factor successful sign-in.\",\n    [\n      \"invalid-oauth-provider\"\n      /* AuthErrorCode.INVALID_OAUTH_PROVIDER */\n    ]: \"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.\",\n    [\n      \"invalid-oauth-client-id\"\n      /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */\n    ]: \"The OAuth client ID provided is either invalid or does not match the specified API key.\",\n    [\n      \"unauthorized-domain\"\n      /* AuthErrorCode.INVALID_ORIGIN */\n    ]: \"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.\",\n    [\n      \"invalid-action-code\"\n      /* AuthErrorCode.INVALID_OOB_CODE */\n    ]: \"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.\",\n    [\n      \"wrong-password\"\n      /* AuthErrorCode.INVALID_PASSWORD */\n    ]: \"The password is invalid or the user does not have a password.\",\n    [\n      \"invalid-persistence-type\"\n      /* AuthErrorCode.INVALID_PERSISTENCE */\n    ]: \"The specified persistence type is invalid. It can only be local, session or none.\",\n    [\n      \"invalid-phone-number\"\n      /* AuthErrorCode.INVALID_PHONE_NUMBER */\n    ]: \"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].\",\n    [\n      \"invalid-provider-id\"\n      /* AuthErrorCode.INVALID_PROVIDER_ID */\n    ]: \"The specified provider ID is invalid.\",\n    [\n      \"invalid-recipient-email\"\n      /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */\n    ]: \"The email corresponding to this action failed to send as the provided recipient email address is invalid.\",\n    [\n      \"invalid-sender\"\n      /* AuthErrorCode.INVALID_SENDER */\n    ]: \"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.\",\n    [\n      \"invalid-verification-id\"\n      /* AuthErrorCode.INVALID_SESSION_INFO */\n    ]: \"The verification ID used to create the phone auth credential is invalid.\",\n    [\n      \"invalid-tenant-id\"\n      /* AuthErrorCode.INVALID_TENANT_ID */\n    ]: \"The Auth instance's tenant ID is invalid.\",\n    [\n      \"login-blocked\"\n      /* AuthErrorCode.LOGIN_BLOCKED */\n    ]: \"Login blocked by user-provided method: {$originalMessage}\",\n    [\n      \"missing-android-pkg-name\"\n      /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */\n    ]: \"An Android Package Name must be provided if the Android App is required to be installed.\",\n    [\n      \"auth-domain-config-required\"\n      /* AuthErrorCode.MISSING_AUTH_DOMAIN */\n    ]: \"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.\",\n    [\n      \"missing-app-credential\"\n      /* AuthErrorCode.MISSING_APP_CREDENTIAL */\n    ]: \"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.\",\n    [\n      \"missing-verification-code\"\n      /* AuthErrorCode.MISSING_CODE */\n    ]: \"The phone auth credential was created with an empty SMS verification code.\",\n    [\n      \"missing-continue-uri\"\n      /* AuthErrorCode.MISSING_CONTINUE_URI */\n    ]: \"A continue URL must be provided in the request.\",\n    [\n      \"missing-iframe-start\"\n      /* AuthErrorCode.MISSING_IFRAME_START */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"missing-ios-bundle-id\"\n      /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */\n    ]: \"An iOS Bundle ID must be provided if an App Store ID is provided.\",\n    [\n      \"missing-or-invalid-nonce\"\n      /* AuthErrorCode.MISSING_OR_INVALID_NONCE */\n    ]: \"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.\",\n    [\n      \"missing-password\"\n      /* AuthErrorCode.MISSING_PASSWORD */\n    ]: \"A non-empty password must be provided\",\n    [\n      \"missing-multi-factor-info\"\n      /* AuthErrorCode.MISSING_MFA_INFO */\n    ]: \"No second factor identifier is provided.\",\n    [\n      \"missing-multi-factor-session\"\n      /* AuthErrorCode.MISSING_MFA_SESSION */\n    ]: \"The request is missing proof of first factor successful sign-in.\",\n    [\n      \"missing-phone-number\"\n      /* AuthErrorCode.MISSING_PHONE_NUMBER */\n    ]: \"To send verification codes, provide a phone number for the recipient.\",\n    [\n      \"missing-verification-id\"\n      /* AuthErrorCode.MISSING_SESSION_INFO */\n    ]: \"The phone auth credential was created with an empty verification ID.\",\n    [\n      \"app-deleted\"\n      /* AuthErrorCode.MODULE_DESTROYED */\n    ]: \"This instance of FirebaseApp has been deleted.\",\n    [\n      \"multi-factor-info-not-found\"\n      /* AuthErrorCode.MFA_INFO_NOT_FOUND */\n    ]: \"The user does not have a second factor matching the identifier provided.\",\n    [\n      \"multi-factor-auth-required\"\n      /* AuthErrorCode.MFA_REQUIRED */\n    ]: \"Proof of ownership of a second factor is required to complete sign-in.\",\n    [\n      \"account-exists-with-different-credential\"\n      /* AuthErrorCode.NEED_CONFIRMATION */\n    ]: \"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.\",\n    [\n      \"network-request-failed\"\n      /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n    ]: \"A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.\",\n    [\n      \"no-auth-event\"\n      /* AuthErrorCode.NO_AUTH_EVENT */\n    ]: \"An internal AuthError has occurred.\",\n    [\n      \"no-such-provider\"\n      /* AuthErrorCode.NO_SUCH_PROVIDER */\n    ]: \"User was not linked to an account with the given provider.\",\n    [\n      \"null-user\"\n      /* AuthErrorCode.NULL_USER */\n    ]: \"A null user object was provided as the argument for an operation which requires a non-null user object.\",\n    [\n      \"operation-not-allowed\"\n      /* AuthErrorCode.OPERATION_NOT_ALLOWED */\n    ]: \"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.\",\n    [\n      \"operation-not-supported-in-this-environment\"\n      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */\n    ]: 'This operation is not supported in the environment this application is running on. \"location.protocol\" must be http, https or chrome-extension and web storage must be enabled.',\n    [\n      \"popup-blocked\"\n      /* AuthErrorCode.POPUP_BLOCKED */\n    ]: \"Unable to establish a connection with the popup. It may have been blocked by the browser.\",\n    [\n      \"popup-closed-by-user\"\n      /* AuthErrorCode.POPUP_CLOSED_BY_USER */\n    ]: \"The popup has been closed by the user before finalizing the operation.\",\n    [\n      \"provider-already-linked\"\n      /* AuthErrorCode.PROVIDER_ALREADY_LINKED */\n    ]: \"User can only be linked to one identity for the given provider.\",\n    [\n      \"quota-exceeded\"\n      /* AuthErrorCode.QUOTA_EXCEEDED */\n    ]: \"The project's quota for this operation has been exceeded.\",\n    [\n      \"redirect-cancelled-by-user\"\n      /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */\n    ]: \"The redirect operation has been cancelled by the user before finalizing.\",\n    [\n      \"redirect-operation-pending\"\n      /* AuthErrorCode.REDIRECT_OPERATION_PENDING */\n    ]: \"A redirect sign-in operation is already pending.\",\n    [\n      \"rejected-credential\"\n      /* AuthErrorCode.REJECTED_CREDENTIAL */\n    ]: \"The request contains malformed or mismatching credentials.\",\n    [\n      \"second-factor-already-in-use\"\n      /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */\n    ]: \"The second factor is already enrolled on this account.\",\n    [\n      \"maximum-second-factor-count-exceeded\"\n      /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */\n    ]: \"The maximum allowed number of second factors on a user has been exceeded.\",\n    [\n      \"tenant-id-mismatch\"\n      /* AuthErrorCode.TENANT_ID_MISMATCH */\n    ]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [\n      \"timeout\"\n      /* AuthErrorCode.TIMEOUT */\n    ]: \"The operation has timed out.\",\n    [\n      \"user-token-expired\"\n      /* AuthErrorCode.TOKEN_EXPIRED */\n    ]: \"The user's credential is no longer valid. The user must sign in again.\",\n    [\n      \"too-many-requests\"\n      /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */\n    ]: \"We have blocked all requests from this device due to unusual activity. Try again later.\",\n    [\n      \"unauthorized-continue-uri\"\n      /* AuthErrorCode.UNAUTHORIZED_DOMAIN */\n    ]: \"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.\",\n    [\n      \"unsupported-first-factor\"\n      /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */\n    ]: \"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.\",\n    [\n      \"unsupported-persistence-type\"\n      /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */\n    ]: \"The current environment does not support the specified persistence type.\",\n    [\n      \"unsupported-tenant-operation\"\n      /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */\n    ]: \"This operation is not supported in a multi-tenant context.\",\n    [\n      \"unverified-email\"\n      /* AuthErrorCode.UNVERIFIED_EMAIL */\n    ]: \"The operation requires a verified email.\",\n    [\n      \"user-cancelled\"\n      /* AuthErrorCode.USER_CANCELLED */\n    ]: \"The user did not grant your application the permissions it requested.\",\n    [\n      \"user-not-found\"\n      /* AuthErrorCode.USER_DELETED */\n    ]: \"There is no user record corresponding to this identifier. The user may have been deleted.\",\n    [\n      \"user-disabled\"\n      /* AuthErrorCode.USER_DISABLED */\n    ]: \"The user account has been disabled by an administrator.\",\n    [\n      \"user-mismatch\"\n      /* AuthErrorCode.USER_MISMATCH */\n    ]: \"The supplied credentials do not correspond to the previously signed in user.\",\n    [\n      \"user-signed-out\"\n      /* AuthErrorCode.USER_SIGNED_OUT */\n    ]: \"\",\n    [\n      \"weak-password\"\n      /* AuthErrorCode.WEAK_PASSWORD */\n    ]: \"The password must be 6 characters long or more.\",\n    [\n      \"web-storage-unsupported\"\n      /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */\n    ]: \"This browser is not supported or 3rd party cookies and data may be disabled.\",\n    [\n      \"already-initialized\"\n      /* AuthErrorCode.ALREADY_INITIALIZED */\n    ]: \"initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.\",\n    [\n      \"missing-recaptcha-token\"\n      /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */\n    ]: \"The reCAPTCHA token is missing when sending request to the backend.\",\n    [\n      \"invalid-recaptcha-token\"\n      /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */\n    ]: \"The reCAPTCHA token is invalid when sending request to the backend.\",\n    [\n      \"invalid-recaptcha-action\"\n      /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */\n    ]: \"The reCAPTCHA action is invalid when sending request to the backend.\",\n    [\n      \"recaptcha-not-enabled\"\n      /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */\n    ]: \"reCAPTCHA Enterprise integration is not enabled for this project.\",\n    [\n      \"missing-client-type\"\n      /* AuthErrorCode.MISSING_CLIENT_TYPE */\n    ]: \"The reCAPTCHA client type is missing when sending request to the backend.\",\n    [\n      \"missing-recaptcha-version\"\n      /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */\n    ]: \"The reCAPTCHA version is missing when sending request to the backend.\",\n    [\n      \"invalid-req-type\"\n      /* AuthErrorCode.INVALID_REQ_TYPE */\n    ]: \"Invalid request parameters.\",\n    [\n      \"invalid-recaptcha-version\"\n      /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */\n    ]: \"The reCAPTCHA version is invalid when sending request to the backend.\",\n    [\n      \"unsupported-password-policy-schema-version\"\n      /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */\n    ]: \"The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.\",\n    [\n      \"password-does-not-meet-requirements\"\n      /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */\n    ]: \"The password does not meet the requirements.\"\n  };\n}\nfunction _prodErrorMap() {\n  return {\n    [\n      \"dependent-sdk-initialized-before-auth\"\n      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */\n    ]: \"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.\"\n  };\n}\nvar debugErrorMap = _debugErrorMap;\nvar prodErrorMap = _prodErrorMap;\nvar _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory(\"auth\", \"Firebase\", _prodErrorMap());\nvar AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: \"auth/admin-restricted-operation\",\n  ARGUMENT_ERROR: \"auth/argument-error\",\n  APP_NOT_AUTHORIZED: \"auth/app-not-authorized\",\n  APP_NOT_INSTALLED: \"auth/app-not-installed\",\n  CAPTCHA_CHECK_FAILED: \"auth/captcha-check-failed\",\n  CODE_EXPIRED: \"auth/code-expired\",\n  CORDOVA_NOT_READY: \"auth/cordova-not-ready\",\n  CORS_UNSUPPORTED: \"auth/cors-unsupported\",\n  CREDENTIAL_ALREADY_IN_USE: \"auth/credential-already-in-use\",\n  CREDENTIAL_MISMATCH: \"auth/custom-token-mismatch\",\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: \"auth/requires-recent-login\",\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: \"auth/dependent-sdk-initialized-before-auth\",\n  DYNAMIC_LINK_NOT_ACTIVATED: \"auth/dynamic-link-not-activated\",\n  EMAIL_CHANGE_NEEDS_VERIFICATION: \"auth/email-change-needs-verification\",\n  EMAIL_EXISTS: \"auth/email-already-in-use\",\n  EMULATOR_CONFIG_FAILED: \"auth/emulator-config-failed\",\n  EXPIRED_OOB_CODE: \"auth/expired-action-code\",\n  EXPIRED_POPUP_REQUEST: \"auth/cancelled-popup-request\",\n  INTERNAL_ERROR: \"auth/internal-error\",\n  INVALID_API_KEY: \"auth/invalid-api-key\",\n  INVALID_APP_CREDENTIAL: \"auth/invalid-app-credential\",\n  INVALID_APP_ID: \"auth/invalid-app-id\",\n  INVALID_AUTH: \"auth/invalid-user-token\",\n  INVALID_AUTH_EVENT: \"auth/invalid-auth-event\",\n  INVALID_CERT_HASH: \"auth/invalid-cert-hash\",\n  INVALID_CODE: \"auth/invalid-verification-code\",\n  INVALID_CONTINUE_URI: \"auth/invalid-continue-uri\",\n  INVALID_CORDOVA_CONFIGURATION: \"auth/invalid-cordova-configuration\",\n  INVALID_CUSTOM_TOKEN: \"auth/invalid-custom-token\",\n  INVALID_DYNAMIC_LINK_DOMAIN: \"auth/invalid-dynamic-link-domain\",\n  INVALID_EMAIL: \"auth/invalid-email\",\n  INVALID_EMULATOR_SCHEME: \"auth/invalid-emulator-scheme\",\n  INVALID_IDP_RESPONSE: \"auth/invalid-credential\",\n  INVALID_MESSAGE_PAYLOAD: \"auth/invalid-message-payload\",\n  INVALID_MFA_SESSION: \"auth/invalid-multi-factor-session\",\n  INVALID_OAUTH_CLIENT_ID: \"auth/invalid-oauth-client-id\",\n  INVALID_OAUTH_PROVIDER: \"auth/invalid-oauth-provider\",\n  INVALID_OOB_CODE: \"auth/invalid-action-code\",\n  INVALID_ORIGIN: \"auth/unauthorized-domain\",\n  INVALID_PASSWORD: \"auth/wrong-password\",\n  INVALID_PERSISTENCE: \"auth/invalid-persistence-type\",\n  INVALID_PHONE_NUMBER: \"auth/invalid-phone-number\",\n  INVALID_PROVIDER_ID: \"auth/invalid-provider-id\",\n  INVALID_RECIPIENT_EMAIL: \"auth/invalid-recipient-email\",\n  INVALID_SENDER: \"auth/invalid-sender\",\n  INVALID_SESSION_INFO: \"auth/invalid-verification-id\",\n  INVALID_TENANT_ID: \"auth/invalid-tenant-id\",\n  MFA_INFO_NOT_FOUND: \"auth/multi-factor-info-not-found\",\n  MFA_REQUIRED: \"auth/multi-factor-auth-required\",\n  MISSING_ANDROID_PACKAGE_NAME: \"auth/missing-android-pkg-name\",\n  MISSING_APP_CREDENTIAL: \"auth/missing-app-credential\",\n  MISSING_AUTH_DOMAIN: \"auth/auth-domain-config-required\",\n  MISSING_CODE: \"auth/missing-verification-code\",\n  MISSING_CONTINUE_URI: \"auth/missing-continue-uri\",\n  MISSING_IFRAME_START: \"auth/missing-iframe-start\",\n  MISSING_IOS_BUNDLE_ID: \"auth/missing-ios-bundle-id\",\n  MISSING_OR_INVALID_NONCE: \"auth/missing-or-invalid-nonce\",\n  MISSING_MFA_INFO: \"auth/missing-multi-factor-info\",\n  MISSING_MFA_SESSION: \"auth/missing-multi-factor-session\",\n  MISSING_PHONE_NUMBER: \"auth/missing-phone-number\",\n  MISSING_SESSION_INFO: \"auth/missing-verification-id\",\n  MODULE_DESTROYED: \"auth/app-deleted\",\n  NEED_CONFIRMATION: \"auth/account-exists-with-different-credential\",\n  NETWORK_REQUEST_FAILED: \"auth/network-request-failed\",\n  NULL_USER: \"auth/null-user\",\n  NO_AUTH_EVENT: \"auth/no-auth-event\",\n  NO_SUCH_PROVIDER: \"auth/no-such-provider\",\n  OPERATION_NOT_ALLOWED: \"auth/operation-not-allowed\",\n  OPERATION_NOT_SUPPORTED: \"auth/operation-not-supported-in-this-environment\",\n  POPUP_BLOCKED: \"auth/popup-blocked\",\n  POPUP_CLOSED_BY_USER: \"auth/popup-closed-by-user\",\n  PROVIDER_ALREADY_LINKED: \"auth/provider-already-linked\",\n  QUOTA_EXCEEDED: \"auth/quota-exceeded\",\n  REDIRECT_CANCELLED_BY_USER: \"auth/redirect-cancelled-by-user\",\n  REDIRECT_OPERATION_PENDING: \"auth/redirect-operation-pending\",\n  REJECTED_CREDENTIAL: \"auth/rejected-credential\",\n  SECOND_FACTOR_ALREADY_ENROLLED: \"auth/second-factor-already-in-use\",\n  SECOND_FACTOR_LIMIT_EXCEEDED: \"auth/maximum-second-factor-count-exceeded\",\n  TENANT_ID_MISMATCH: \"auth/tenant-id-mismatch\",\n  TIMEOUT: \"auth/timeout\",\n  TOKEN_EXPIRED: \"auth/user-token-expired\",\n  TOO_MANY_ATTEMPTS_TRY_LATER: \"auth/too-many-requests\",\n  UNAUTHORIZED_DOMAIN: \"auth/unauthorized-continue-uri\",\n  UNSUPPORTED_FIRST_FACTOR: \"auth/unsupported-first-factor\",\n  UNSUPPORTED_PERSISTENCE: \"auth/unsupported-persistence-type\",\n  UNSUPPORTED_TENANT_OPERATION: \"auth/unsupported-tenant-operation\",\n  UNVERIFIED_EMAIL: \"auth/unverified-email\",\n  USER_CANCELLED: \"auth/user-cancelled\",\n  USER_DELETED: \"auth/user-not-found\",\n  USER_DISABLED: \"auth/user-disabled\",\n  USER_MISMATCH: \"auth/user-mismatch\",\n  USER_SIGNED_OUT: \"auth/user-signed-out\",\n  WEAK_PASSWORD: \"auth/weak-password\",\n  WEB_STORAGE_UNSUPPORTED: \"auth/web-storage-unsupported\",\n  ALREADY_INITIALIZED: \"auth/already-initialized\",\n  RECAPTCHA_NOT_ENABLED: \"auth/recaptcha-not-enabled\",\n  MISSING_RECAPTCHA_TOKEN: \"auth/missing-recaptcha-token\",\n  INVALID_RECAPTCHA_TOKEN: \"auth/invalid-recaptcha-token\",\n  INVALID_RECAPTCHA_ACTION: \"auth/invalid-recaptcha-action\",\n  MISSING_CLIENT_TYPE: \"auth/missing-client-type\",\n  MISSING_RECAPTCHA_VERSION: \"auth/missing-recaptcha-version\",\n  INVALID_RECAPTCHA_VERSION: \"auth/invalid-recaptcha-version\",\n  INVALID_REQ_TYPE: \"auth/invalid-req-type\"\n};\nvar logClient = new Logger(\"@firebase/auth\");\nfunction _logWarn(msg, ...args) {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction _logError(msg, ...args) {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction _fail(authOrCode, ...rest) {\n  throw createErrorInternal(authOrCode, ...rest);\n}\nfunction _createError(authOrCode, ...rest) {\n  return createErrorInternal(authOrCode, ...rest);\n}\nfunction _errorWithCustomMessage(auth, code, message) {\n  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });\n  const factory = new ErrorFactory(\"auth\", \"Firebase\", errorMap);\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\nfunction _assertInstanceOf(auth, object, instance) {\n  const constructorInstance = instance;\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(\n        auth,\n        \"argument-error\"\n        /* AuthErrorCode.ARGUMENT_ERROR */\n      );\n    }\n    throw _errorWithCustomMessage(auth, \"argument-error\", `Type of ${object.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);\n  }\n}\nfunction createErrorInternal(authOrCode, ...rest) {\n  if (typeof authOrCode !== \"string\") {\n    const code = rest[0];\n    const fullParams = [...rest.slice(1)];\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n    return authOrCode._errorFactory.create(code, ...fullParams);\n  }\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n}\nfunction _assert(assertion, authOrCode, ...rest) {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\nfunction debugFail(failure) {\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n  throw new Error(message);\n}\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\nfunction _getCurrentUrl() {\n  var _a;\n  return typeof self !== \"undefined\" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || \"\";\n}\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === \"http:\" || _getCurrentScheme() === \"https:\";\n}\nfunction _getCurrentScheme() {\n  var _a;\n  return typeof self !== \"undefined\" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\nfunction _isOnline() {\n  if (typeof navigator !== \"undefined\" && navigator && \"onLine\" in navigator && typeof navigator.onLine === \"boolean\" && // Apply only for traditional web apps and Chrome extensions.\n  // This is especially true for Cordova apps which have unreliable\n  // navigator.onLine behavior unless cordova-plugin-network-information is\n  // installed which overwrites the native navigator.onLine value and\n  // defines navigator.connection.\n  (_isHttpOrHttps() || isBrowserExtension() || \"connection\" in navigator)) {\n    return navigator.onLine;\n  }\n  return true;\n}\nfunction _getUserLanguage() {\n  if (typeof navigator === \"undefined\") {\n    return null;\n  }\n  const navigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language || // Couldn't determine language.\n    null\n  );\n}\nvar Delay = class {\n  constructor(shortDelay, longDelay) {\n    this.shortDelay = shortDelay;\n    this.longDelay = longDelay;\n    debugAssert(longDelay > shortDelay, \"Short delay should be less than long delay!\");\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n  get() {\n    if (!_isOnline()) {\n      return Math.min(5e3, this.shortDelay);\n    }\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n};\nfunction _emulatorUrl(config, path) {\n  debugAssert(config.emulator, \"Emulator should always be set here\");\n  const { url } = config.emulator;\n  if (!path) {\n    return url;\n  }\n  return `${url}${path.startsWith(\"/\") ? path.slice(1) : path}`;\n}\nvar FetchProvider = class {\n  static initialize(fetchImpl, headersImpl, responseImpl) {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n  static fetch() {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== \"undefined\" && \"fetch\" in self) {\n      return self.fetch;\n    }\n    if (typeof globalThis !== \"undefined\" && globalThis.fetch) {\n      return globalThis.fetch;\n    }\n    if (typeof fetch !== \"undefined\") {\n      return fetch;\n    }\n    debugFail(\"Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n  }\n  static headers() {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== \"undefined\" && \"Headers\" in self) {\n      return self.Headers;\n    }\n    if (typeof globalThis !== \"undefined\" && globalThis.Headers) {\n      return globalThis.Headers;\n    }\n    if (typeof Headers !== \"undefined\") {\n      return Headers;\n    }\n    debugFail(\"Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n  }\n  static response() {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== \"undefined\" && \"Response\" in self) {\n      return self.Response;\n    }\n    if (typeof globalThis !== \"undefined\" && globalThis.Response) {\n      return globalThis.Response;\n    }\n    if (typeof Response !== \"undefined\") {\n      return Response;\n    }\n    debugFail(\"Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n  }\n};\nvar SERVER_ERROR_MAP = {\n  // Custom token errors.\n  [\n    \"CREDENTIAL_MISMATCH\"\n    /* ServerError.CREDENTIAL_MISMATCH */\n  ]: \"custom-token-mismatch\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_CUSTOM_TOKEN\"\n    /* ServerError.MISSING_CUSTOM_TOKEN */\n  ]: \"internal-error\",\n  // Create Auth URI errors.\n  [\n    \"INVALID_IDENTIFIER\"\n    /* ServerError.INVALID_IDENTIFIER */\n  ]: \"invalid-email\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_CONTINUE_URI\"\n    /* ServerError.MISSING_CONTINUE_URI */\n  ]: \"internal-error\",\n  // Sign in with email and password errors (some apply to sign up too).\n  [\n    \"INVALID_PASSWORD\"\n    /* ServerError.INVALID_PASSWORD */\n  ]: \"wrong-password\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_PASSWORD\"\n    /* ServerError.MISSING_PASSWORD */\n  ]: \"missing-password\",\n  // Sign up with email and password errors.\n  [\n    \"EMAIL_EXISTS\"\n    /* ServerError.EMAIL_EXISTS */\n  ]: \"email-already-in-use\",\n  [\n    \"PASSWORD_LOGIN_DISABLED\"\n    /* ServerError.PASSWORD_LOGIN_DISABLED */\n  ]: \"operation-not-allowed\",\n  // Verify assertion for sign in with credential errors:\n  [\n    \"INVALID_IDP_RESPONSE\"\n    /* ServerError.INVALID_IDP_RESPONSE */\n  ]: \"invalid-credential\",\n  [\n    \"INVALID_PENDING_TOKEN\"\n    /* ServerError.INVALID_PENDING_TOKEN */\n  ]: \"invalid-credential\",\n  [\n    \"FEDERATED_USER_ID_ALREADY_LINKED\"\n    /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */\n  ]: \"credential-already-in-use\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_REQ_TYPE\"\n    /* ServerError.MISSING_REQ_TYPE */\n  ]: \"internal-error\",\n  // Send Password reset email errors:\n  [\n    \"EMAIL_NOT_FOUND\"\n    /* ServerError.EMAIL_NOT_FOUND */\n  ]: \"user-not-found\",\n  [\n    \"RESET_PASSWORD_EXCEED_LIMIT\"\n    /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */\n  ]: \"too-many-requests\",\n  [\n    \"EXPIRED_OOB_CODE\"\n    /* ServerError.EXPIRED_OOB_CODE */\n  ]: \"expired-action-code\",\n  [\n    \"INVALID_OOB_CODE\"\n    /* ServerError.INVALID_OOB_CODE */\n  ]: \"invalid-action-code\",\n  // This can only happen if the SDK sends a bad request.\n  [\n    \"MISSING_OOB_CODE\"\n    /* ServerError.MISSING_OOB_CODE */\n  ]: \"internal-error\",\n  // Operations that require ID token in request:\n  [\n    \"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\"\n    /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */\n  ]: \"requires-recent-login\",\n  [\n    \"INVALID_ID_TOKEN\"\n    /* ServerError.INVALID_ID_TOKEN */\n  ]: \"invalid-user-token\",\n  [\n    \"TOKEN_EXPIRED\"\n    /* ServerError.TOKEN_EXPIRED */\n  ]: \"user-token-expired\",\n  [\n    \"USER_NOT_FOUND\"\n    /* ServerError.USER_NOT_FOUND */\n  ]: \"user-token-expired\",\n  // Other errors.\n  [\n    \"TOO_MANY_ATTEMPTS_TRY_LATER\"\n    /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */\n  ]: \"too-many-requests\",\n  [\n    \"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\"\n    /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */\n  ]: \"password-does-not-meet-requirements\",\n  // Phone Auth related errors.\n  [\n    \"INVALID_CODE\"\n    /* ServerError.INVALID_CODE */\n  ]: \"invalid-verification-code\",\n  [\n    \"INVALID_SESSION_INFO\"\n    /* ServerError.INVALID_SESSION_INFO */\n  ]: \"invalid-verification-id\",\n  [\n    \"INVALID_TEMPORARY_PROOF\"\n    /* ServerError.INVALID_TEMPORARY_PROOF */\n  ]: \"invalid-credential\",\n  [\n    \"MISSING_SESSION_INFO\"\n    /* ServerError.MISSING_SESSION_INFO */\n  ]: \"missing-verification-id\",\n  [\n    \"SESSION_EXPIRED\"\n    /* ServerError.SESSION_EXPIRED */\n  ]: \"code-expired\",\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [\n    \"MISSING_ANDROID_PACKAGE_NAME\"\n    /* ServerError.MISSING_ANDROID_PACKAGE_NAME */\n  ]: \"missing-android-pkg-name\",\n  [\n    \"UNAUTHORIZED_DOMAIN\"\n    /* ServerError.UNAUTHORIZED_DOMAIN */\n  ]: \"unauthorized-continue-uri\",\n  // getProjectConfig errors when clientId is passed.\n  [\n    \"INVALID_OAUTH_CLIENT_ID\"\n    /* ServerError.INVALID_OAUTH_CLIENT_ID */\n  ]: \"invalid-oauth-client-id\",\n  // User actions (sign-up or deletion) disabled errors.\n  [\n    \"ADMIN_ONLY_OPERATION\"\n    /* ServerError.ADMIN_ONLY_OPERATION */\n  ]: \"admin-restricted-operation\",\n  // Multi factor related errors.\n  [\n    \"INVALID_MFA_PENDING_CREDENTIAL\"\n    /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */\n  ]: \"invalid-multi-factor-session\",\n  [\n    \"MFA_ENROLLMENT_NOT_FOUND\"\n    /* ServerError.MFA_ENROLLMENT_NOT_FOUND */\n  ]: \"multi-factor-info-not-found\",\n  [\n    \"MISSING_MFA_ENROLLMENT_ID\"\n    /* ServerError.MISSING_MFA_ENROLLMENT_ID */\n  ]: \"missing-multi-factor-info\",\n  [\n    \"MISSING_MFA_PENDING_CREDENTIAL\"\n    /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */\n  ]: \"missing-multi-factor-session\",\n  [\n    \"SECOND_FACTOR_EXISTS\"\n    /* ServerError.SECOND_FACTOR_EXISTS */\n  ]: \"second-factor-already-in-use\",\n  [\n    \"SECOND_FACTOR_LIMIT_EXCEEDED\"\n    /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */\n  ]: \"maximum-second-factor-count-exceeded\",\n  // Blocking functions related errors.\n  [\n    \"BLOCKING_FUNCTION_ERROR_RESPONSE\"\n    /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */\n  ]: \"internal-error\",\n  // Recaptcha related errors.\n  [\n    \"RECAPTCHA_NOT_ENABLED\"\n    /* ServerError.RECAPTCHA_NOT_ENABLED */\n  ]: \"recaptcha-not-enabled\",\n  [\n    \"MISSING_RECAPTCHA_TOKEN\"\n    /* ServerError.MISSING_RECAPTCHA_TOKEN */\n  ]: \"missing-recaptcha-token\",\n  [\n    \"INVALID_RECAPTCHA_TOKEN\"\n    /* ServerError.INVALID_RECAPTCHA_TOKEN */\n  ]: \"invalid-recaptcha-token\",\n  [\n    \"INVALID_RECAPTCHA_ACTION\"\n    /* ServerError.INVALID_RECAPTCHA_ACTION */\n  ]: \"invalid-recaptcha-action\",\n  [\n    \"MISSING_CLIENT_TYPE\"\n    /* ServerError.MISSING_CLIENT_TYPE */\n  ]: \"missing-client-type\",\n  [\n    \"MISSING_RECAPTCHA_VERSION\"\n    /* ServerError.MISSING_RECAPTCHA_VERSION */\n  ]: \"missing-recaptcha-version\",\n  [\n    \"INVALID_RECAPTCHA_VERSION\"\n    /* ServerError.INVALID_RECAPTCHA_VERSION */\n  ]: \"invalid-recaptcha-version\",\n  [\n    \"INVALID_REQ_TYPE\"\n    /* ServerError.INVALID_REQ_TYPE */\n  ]: \"invalid-req-type\"\n  /* AuthErrorCode.INVALID_REQ_TYPE */\n};\nvar DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);\nfunction _addTidIfNecessary(auth, request) {\n  if (auth.tenantId && !request.tenantId) {\n    return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });\n  }\n  return request;\n}\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === \"GET\") {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n    const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);\n    const headers = await auth._getAdditionalHeaders();\n    headers[\n      \"Content-Type\"\n      /* HttpHeader.CONTENT_TYPE */\n    ] = \"application/json\";\n    if (auth.languageCode) {\n      headers[\n        \"X-Firebase-Locale\"\n        /* HttpHeader.X_FIREBASE_LOCALE */\n      ] = auth.languageCode;\n    }\n    return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({\n      method,\n      headers,\n      referrerPolicy: \"no-referrer\"\n    }, body));\n  });\n}\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n  auth._canInitEmulator = false;\n  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\n  try {\n    const networkTimeout = new NetworkTimeout(auth);\n    const response = await Promise.race([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n    networkTimeout.clearNetworkTimeout();\n    const json = await response.json();\n    if (\"needConfirmation\" in json) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\", json);\n    }\n    if (response.ok && !(\"errorMessage\" in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(\" : \");\n      if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\") {\n        throw _makeTaggedError(auth, \"credential-already-in-use\", json);\n      } else if (serverErrorCode === \"EMAIL_EXISTS\") {\n        throw _makeTaggedError(auth, \"email-already-in-use\", json);\n      } else if (serverErrorCode === \"USER_DISABLED\") {\n        throw _makeTaggedError(auth, \"user-disabled\", json);\n      }\n      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, \"-\");\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    _fail(auth, \"network-request-failed\", { \"message\": String(e) });\n  }\n}\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n  const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n  if (\"mfaPendingCredential\" in serverResponse) {\n    _fail(auth, \"multi-factor-auth-required\", {\n      _serverResponse: serverResponse\n    });\n  }\n  return serverResponse;\n}\nfunction _getFinalTarget(auth, host, path, query) {\n  const base = `${host}${path}?${query}`;\n  if (!auth.config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n  return _emulatorUrl(auth.config, base);\n}\nfunction _parseEnforcementState(enforcementStateStr) {\n  switch (enforcementStateStr) {\n    case \"ENFORCE\":\n      return \"ENFORCE\";\n    case \"AUDIT\":\n      return \"AUDIT\";\n    case \"OFF\":\n      return \"OFF\";\n    default:\n      return \"ENFORCEMENT_STATE_UNSPECIFIED\";\n  }\n}\nvar NetworkTimeout = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.timer = null;\n    this.promise = new Promise((_, reject) => {\n      this.timer = setTimeout(() => {\n        return reject(_createError(\n          this.auth,\n          \"network-request-failed\"\n          /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n        ));\n      }, DEFAULT_API_TIMEOUT_MS.get());\n    });\n  }\n  clearNetworkTimeout() {\n    clearTimeout(this.timer);\n  }\n};\nfunction _makeTaggedError(auth, code, response) {\n  const errorParams = {\n    appName: auth.name\n  };\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n  const error = _createError(auth, code, errorParams);\n  error.customData._tokenResponse = response;\n  return error;\n}\nfunction isV2(grecaptcha) {\n  return grecaptcha !== void 0 && grecaptcha.getResponse !== void 0;\n}\nfunction isEnterprise(grecaptcha) {\n  return grecaptcha !== void 0 && grecaptcha.enterprise !== void 0;\n}\nvar RecaptchaConfig = class {\n  constructor(response) {\n    this.siteKey = \"\";\n    this.recaptchaEnforcementState = [];\n    if (response.recaptchaKey === void 0) {\n      throw new Error(\"recaptchaKey undefined\");\n    }\n    this.siteKey = response.recaptchaKey.split(\"/\")[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n  /**\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n   *\n   * @param providerStr - The provider whose enforcement state is to be returned.\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n   */\n  getProviderEnforcementState(providerStr) {\n    if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n      return null;\n    }\n    for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n      if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n        return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n   *\n   * @param providerStr - The provider whose enablement state is to be returned.\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n   */\n  isProviderEnabled(providerStr) {\n    return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" || this.getProviderEnforcementState(providerStr) === \"AUDIT\";\n  }\n};\nasync function getRecaptchaParams(auth) {\n  return (await _performApiRequest(\n    auth,\n    \"GET\",\n    \"/v1/recaptchaParams\"\n    /* Endpoint.GET_RECAPTCHA_PARAM */\n  )).recaptchaSiteKey || \"\";\n}\nasync function getRecaptchaConfig(auth, request) {\n  return _performApiRequest(auth, \"GET\", \"/v2/recaptchaConfig\", _addTidIfNecessary(auth, request));\n}\nasync function deleteAccount(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:delete\", request);\n}\nasync function deleteLinkedAccounts(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", request);\n}\nasync function getAccountInfo(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:lookup\", request);\n}\nfunction utcTimestampToDateString(utcTimestamp) {\n  if (!utcTimestamp) {\n    return void 0;\n  }\n  try {\n    const date = new Date(Number(utcTimestamp));\n    if (!isNaN(date.getTime())) {\n      return date.toUTCString();\n    }\n  } catch (e) {\n  }\n  return void 0;\n}\nfunction getIdToken(user, forceRefresh = false) {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\nasync function getIdTokenResult(user, forceRefresh = false) {\n  const userInternal = getModularInstance(user);\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  const firebase = typeof claims.firebase === \"object\" ? claims.firebase : void 0;\n  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase[\"sign_in_provider\"];\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n    signInProvider: signInProvider || null,\n    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase[\"sign_in_second_factor\"]) || null\n  };\n}\nfunction secondsStringToMilliseconds(seconds) {\n  return Number(seconds) * 1e3;\n}\nfunction _parseToken(token) {\n  const [algorithm, payload, signature] = token.split(\".\");\n  if (algorithm === void 0 || payload === void 0 || signature === void 0) {\n    _logError(\"JWT malformed, contained fewer than 3 sections\");\n    return null;\n  }\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError(\"Failed to decode base64 JWT payload\");\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\"Caught error parsing JWT payload as JSON\", e === null || e === void 0 ? void 0 : e.toString());\n    return null;\n  }\n}\nfunction _tokenExpiresIn(token) {\n  const parsedToken = _parseToken(token);\n  _assert(\n    parsedToken,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  _assert(\n    typeof parsedToken.exp !== \"undefined\",\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  _assert(\n    typeof parsedToken.iat !== \"undefined\",\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n    throw e;\n  }\n}\nfunction isUserInvalidated({ code }) {\n  return code === `auth/${\"user-disabled\"}` || code === `auth/${\"user-token-expired\"}`;\n}\nvar ProactiveRefresh = class {\n  constructor(user) {\n    this.user = user;\n    this.isRunning = false;\n    this.timerId = null;\n    this.errorBackoff = 3e4;\n  }\n  _start() {\n    if (this.isRunning) {\n      return;\n    }\n    this.isRunning = true;\n    this.schedule();\n  }\n  _stop() {\n    if (!this.isRunning) {\n      return;\n    }\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n  getInterval(wasError) {\n    var _a;\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        96e4\n        /* Duration.RETRY_BACKOFF_MAX */\n      );\n      return interval;\n    } else {\n      this.errorBackoff = 3e4;\n      const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n      const interval = expTime - Date.now() - 3e5;\n      return Math.max(0, interval);\n    }\n  }\n  schedule(wasError = false) {\n    if (!this.isRunning) {\n      return;\n    }\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n  async iteration() {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"network-request-failed\"}`) {\n        this.schedule(\n          /* wasError */\n          true\n        );\n      }\n      return;\n    }\n    this.schedule();\n  }\n};\nvar UserMetadata = class {\n  constructor(createdAt, lastLoginAt) {\n    this.createdAt = createdAt;\n    this.lastLoginAt = lastLoginAt;\n    this._initializeTime();\n  }\n  _initializeTime() {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n  _copy(metadata) {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n  toJSON() {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n};\nasync function _reloadWithoutSaving(user) {\n  var _a;\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));\n  _assert(\n    response === null || response === void 0 ? void 0 : response.users.length,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  const coreAccount = response.users[0];\n  user._notifyReloadListener(coreAccount);\n  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n  const updates = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n  Object.assign(user, updates);\n}\nasync function reload(user) {\n  const userInternal = getModularInstance(user);\n  await _reloadWithoutSaving(userInternal);\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\nfunction mergeProviderData(original, newData) {\n  const deduped = original.filter((o) => !newData.some((n) => n.providerId === o.providerId));\n  return [...deduped, ...newData];\n}\nfunction extractProviderData(providers) {\n  return providers.map((_a) => {\n    var { providerId } = _a, provider = __rest(_a, [\"providerId\"]);\n    return {\n      providerId,\n      uid: provider.rawId || \"\",\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\nasync function requestStsToken(auth, refreshToken) {\n  const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n    const body = querystring({\n      \"grant_type\": \"refresh_token\",\n      \"refresh_token\": refreshToken\n    }).slice(1);\n    const { tokenApiHost, apiKey } = auth.config;\n    const url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\", `key=${apiKey}`);\n    const headers = await auth._getAdditionalHeaders();\n    headers[\n      \"Content-Type\"\n      /* HttpHeader.CONTENT_TYPE */\n    ] = \"application/x-www-form-urlencoded\";\n    return FetchProvider.fetch()(url, {\n      method: \"POST\",\n      headers,\n      body\n    });\n  });\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\nasync function revokeToken(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts:revokeToken\", _addTidIfNecessary(auth, request));\n}\nvar StsTokenManager = class _StsTokenManager {\n  constructor() {\n    this.refreshToken = null;\n    this.accessToken = null;\n    this.expirationTime = null;\n  }\n  get isExpired() {\n    return !this.expirationTime || Date.now() > this.expirationTime - 3e4;\n  }\n  updateFromServerResponse(response) {\n    _assert(\n      response.idToken,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    _assert(\n      typeof response.idToken !== \"undefined\",\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    _assert(\n      typeof response.refreshToken !== \"undefined\",\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const expiresIn = \"expiresIn\" in response && typeof response.expiresIn !== \"undefined\" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n  }\n  async getToken(auth, forceRefresh = false) {\n    _assert(\n      !this.accessToken || this.refreshToken,\n      auth,\n      \"user-token-expired\"\n      /* AuthErrorCode.TOKEN_EXPIRED */\n    );\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken);\n      return this.accessToken;\n    }\n    return null;\n  }\n  clearRefreshToken() {\n    this.refreshToken = null;\n  }\n  async refresh(auth, oldToken) {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);\n    this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n  }\n  updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1e3;\n  }\n  static fromJSON(appName, object) {\n    const { refreshToken, accessToken, expirationTime } = object;\n    const manager = new _StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === \"string\", \"internal-error\", {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === \"string\", \"internal-error\", {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(typeof expirationTime === \"number\", \"internal-error\", {\n        appName\n      });\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n  toJSON() {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n  _assign(stsTokenManager) {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n  _clone() {\n    return Object.assign(new _StsTokenManager(), this.toJSON());\n  }\n  _performRefresh() {\n    return debugFail(\"not implemented\");\n  }\n};\nfunction assertStringOrUndefined(assertion, appName) {\n  _assert(typeof assertion === \"string\" || typeof assertion === \"undefined\", \"internal-error\", { appName });\n}\nvar UserImpl = class _UserImpl {\n  constructor(_a) {\n    var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\n    this.providerId = \"firebase\";\n    this.proactiveRefresh = new ProactiveRefresh(this);\n    this.reloadUserInfo = null;\n    this.reloadListener = null;\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);\n  }\n  async getIdToken(forceRefresh) {\n    const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n    _assert(\n      accessToken,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n    return accessToken;\n  }\n  getIdTokenResult(forceRefresh) {\n    return getIdTokenResult(this, forceRefresh);\n  }\n  reload() {\n    return reload(this);\n  }\n  _assign(user) {\n    if (this === user) {\n      return;\n    }\n    _assert(\n      this.uid === user.uid,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map((userInfo) => Object.assign({}, userInfo));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n  _clone(auth) {\n    const newUser = new _UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n  _onReload(callback) {\n    _assert(\n      !this.reloadListener,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n  _notifyReloadListener(userInfo) {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      this.reloadUserInfo = userInfo;\n    }\n  }\n  _startProactiveRefresh() {\n    this.proactiveRefresh._start();\n  }\n  _stopProactiveRefresh() {\n    this.proactiveRefresh._stop();\n  }\n  async _updateTokensIfNecessary(response, reload2 = false) {\n    let tokensRefreshed = false;\n    if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n    if (reload2) {\n      await _reloadWithoutSaving(this);\n    }\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n  async delete() {\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n    return this.auth.signOut();\n  }\n  toJSON() {\n    return Object.assign(Object.assign({\n      uid: this.uid,\n      email: this.email || void 0,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || void 0,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || void 0,\n      phoneNumber: this.phoneNumber || void 0,\n      tenantId: this.tenantId || void 0,\n      providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId\n    }, this.metadata.toJSON()), {\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n    });\n  }\n  get refreshToken() {\n    return this.stsTokenManager.refreshToken || \"\";\n  }\n  static _fromJSON(auth, object) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : void 0;\n    const email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;\n    const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : void 0;\n    const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;\n    const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : void 0;\n    const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;\n    const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;\n    const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;\n    const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;\n    _assert(\n      uid && plainObjectTokenManager,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n    _assert(\n      typeof uid === \"string\",\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === \"boolean\",\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    _assert(\n      typeof isAnonymous === \"boolean\",\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new _UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));\n    }\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n    return user;\n  }\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n    const user = new _UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n};\nvar instanceCache = /* @__PURE__ */ new Map();\nfunction _getInstance(cls) {\n  debugAssert(cls instanceof Function, \"Expected a class definition\");\n  let instance = instanceCache.get(cls);\n  if (instance) {\n    debugAssert(instance instanceof cls, \"Instance stored in cache mismatched with class\");\n    return instance;\n  }\n  instance = new cls();\n  instanceCache.set(cls, instance);\n  return instance;\n}\nvar InMemoryPersistence = class {\n  constructor() {\n    this.type = \"NONE\";\n    this.storage = {};\n  }\n  async _isAvailable() {\n    return true;\n  }\n  async _set(key, value) {\n    this.storage[key] = value;\n  }\n  async _get(key) {\n    const value = this.storage[key];\n    return value === void 0 ? null : value;\n  }\n  async _remove(key) {\n    delete this.storage[key];\n  }\n  _addListener(_key, _listener) {\n    return;\n  }\n  _removeListener(_key, _listener) {\n    return;\n  }\n};\nInMemoryPersistence.type = \"NONE\";\nvar inMemoryPersistence = InMemoryPersistence;\nfunction _persistenceKeyName(key, apiKey, appName) {\n  return `${\"firebase\"}:${key}:${apiKey}:${appName}`;\n}\nvar PersistenceUserManager = class _PersistenceUserManager {\n  constructor(persistence, auth, userKey) {\n    this.persistence = persistence;\n    this.auth = auth;\n    this.userKey = userKey;\n    const { config, name: name2 } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name2);\n    this.fullPersistenceKey = _persistenceKeyName(\"persistence\", config.apiKey, name2);\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n  setCurrentUser(user) {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n  async getCurrentUser() {\n    const blob = await this.persistence._get(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n  removeCurrentUser() {\n    return this.persistence._remove(this.fullUserKey);\n  }\n  savePersistenceForRedirect() {\n    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n  }\n  async setPersistence(newPersistence) {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n    this.persistence = newPersistence;\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n  delete() {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n  static async create(auth, persistenceHierarchy, userKey = \"authUser\") {\n    if (!persistenceHierarchy.length) {\n      return new _PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n    }\n    const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {\n      if (await persistence._isAvailable()) {\n        return persistence;\n      }\n      return void 0;\n    }))).filter((persistence) => persistence);\n    let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n    let userToMigrate = null;\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob);\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch (_a) {\n      }\n    }\n    const migrationHierarchy = availablePersistences.filter((p) => p._shouldAllowMigration);\n    if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n      return new _PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n    await Promise.all(persistenceHierarchy.map(async (persistence) => {\n      if (persistence !== selectedPersistence) {\n        try {\n          await persistence._remove(key);\n        } catch (_a) {\n        }\n      }\n    }));\n    return new _PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n};\nfunction _getBrowserName(userAgent) {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes(\"opera/\") || ua.includes(\"opr/\") || ua.includes(\"opios/\")) {\n    return \"Opera\";\n  } else if (_isIEMobile(ua)) {\n    return \"IEMobile\";\n  } else if (ua.includes(\"msie\") || ua.includes(\"trident/\")) {\n    return \"IE\";\n  } else if (ua.includes(\"edge/\")) {\n    return \"Edge\";\n  } else if (_isFirefox(ua)) {\n    return \"Firefox\";\n  } else if (ua.includes(\"silk/\")) {\n    return \"Silk\";\n  } else if (_isBlackBerry(ua)) {\n    return \"Blackberry\";\n  } else if (_isWebOS(ua)) {\n    return \"Webos\";\n  } else if (_isSafari(ua)) {\n    return \"Safari\";\n  } else if ((ua.includes(\"chrome/\") || _isChromeIOS(ua)) && !ua.includes(\"edge/\")) {\n    return \"Chrome\";\n  } else if (_isAndroid(ua)) {\n    return \"Android\";\n  } else {\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\n      return matches[1];\n    }\n  }\n  return \"Other\";\n}\nfunction _isFirefox(ua = getUA()) {\n  return /firefox\\//i.test(ua);\n}\nfunction _isSafari(userAgent = getUA()) {\n  const ua = userAgent.toLowerCase();\n  return ua.includes(\"safari/\") && !ua.includes(\"chrome/\") && !ua.includes(\"crios/\") && !ua.includes(\"android\");\n}\nfunction _isChromeIOS(ua = getUA()) {\n  return /crios\\//i.test(ua);\n}\nfunction _isIEMobile(ua = getUA()) {\n  return /iemobile/i.test(ua);\n}\nfunction _isAndroid(ua = getUA()) {\n  return /android/i.test(ua);\n}\nfunction _isBlackBerry(ua = getUA()) {\n  return /blackberry/i.test(ua);\n}\nfunction _isWebOS(ua = getUA()) {\n  return /webos/i.test(ua);\n}\nfunction _isIOS(ua = getUA()) {\n  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n}\nfunction _isIOSStandalone(ua = getUA()) {\n  var _a;\n  return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\n}\nfunction _isIE10() {\n  return isIE() && document.documentMode === 10;\n}\nfunction _isMobileBrowser(ua = getUA()) {\n  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n}\nfunction _isIframe() {\n  try {\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getClientVersion(clientPlatform, frameworks = []) {\n  let reportedPlatform;\n  switch (clientPlatform) {\n    case \"Browser\":\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case \"Worker\":\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length ? frameworks.join(\",\") : \"FirebaseCore-web\";\n  return `${reportedPlatform}/${\"JsCore\"}/${SDK_VERSION}/${reportedFrameworks}`;\n}\nvar AuthMiddlewareQueue = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.queue = [];\n  }\n  pushCallback(callback, onAbort) {\n    const wrappedCallback = (user) => new Promise((resolve, reject) => {\n      try {\n        const result = callback(user);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    });\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n    const index = this.queue.length - 1;\n    return () => {\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n  async runMiddleware(nextUser) {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n    const onAbortStack = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n        }\n      }\n      throw this.auth._errorFactory.create(\"login-blocked\", {\n        originalMessage: e === null || e === void 0 ? void 0 : e.message\n      });\n    }\n  }\n};\nasync function _getPasswordPolicy(auth, request = {}) {\n  return _performApiRequest(auth, \"GET\", \"/v2/passwordPolicy\", _addTidIfNecessary(auth, request));\n}\nvar MINIMUM_MIN_PASSWORD_LENGTH = 6;\nvar PasswordPolicyImpl = class {\n  constructor(response) {\n    var _a, _b, _c, _d;\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== void 0) {\n      this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== void 0) {\n      this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== void 0) {\n      this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== void 0) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n    }\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === \"ENFORCEMENT_STATE_UNSPECIFIED\") {\n      this.enforcementState = \"OFF\";\n    }\n    this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join(\"\")) !== null && _c !== void 0 ? _c : \"\";\n    this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\n    this.schemaVersion = response.schemaVersion;\n  }\n  validatePassword(password) {\n    var _a, _b, _c, _d, _e, _f;\n    const status = {\n      isValid: true,\n      passwordPolicy: this\n    };\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n    status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\n    status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\n    status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\n    status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\n    status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\n    status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\n    return status;\n  }\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  validatePasswordLengthOptions(password, status) {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  validatePasswordCharacterOptions(password, status) {\n    this.updatePasswordCharacterOptionsStatuses(\n      status,\n      /* containsLowercaseCharacter= */\n      false,\n      /* containsUppercaseCharacter= */\n      false,\n      /* containsNumericCharacter= */\n      false,\n      /* containsNonAlphanumericCharacter= */\n      false\n    );\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        /* containsLowercaseCharacter= */\n        passwordChar >= \"a\" && passwordChar <= \"z\",\n        /* containsUppercaseCharacter= */\n        passwordChar >= \"A\" && passwordChar <= \"Z\",\n        /* containsNumericCharacter= */\n        passwordChar >= \"0\" && passwordChar <= \"9\",\n        /* containsNonAlphanumericCharacter= */\n        this.allowedNonAlphanumericCharacters.includes(passwordChar)\n      );\n    }\n  }\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n    }\n  }\n};\nvar AuthImpl = class {\n  constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n    this.appCheckServiceProvider = appCheckServiceProvider;\n    this.config = config;\n    this.currentUser = null;\n    this.emulatorConfig = null;\n    this.operations = Promise.resolve();\n    this.authStateSubscription = new Subscription(this);\n    this.idTokenSubscription = new Subscription(this);\n    this.beforeStateQueue = new AuthMiddlewareQueue(this);\n    this.redirectUser = null;\n    this.isProactiveRefreshEnabled = false;\n    this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n    this._canInitEmulator = true;\n    this._isInitialized = false;\n    this._deleted = false;\n    this._initializationPromise = null;\n    this._popupRedirectResolver = null;\n    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n    this._agentRecaptchaConfig = null;\n    this._tenantRecaptchaConfigs = {};\n    this._projectPasswordPolicy = null;\n    this._tenantPasswordPolicies = {};\n    this.lastNotifiedUid = void 0;\n    this.languageCode = null;\n    this.tenantId = null;\n    this.settings = { appVerificationDisabledForTesting: false };\n    this.frameworks = [];\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n  _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n    this._initializationPromise = this.queue(async () => {\n      var _a, _b;\n      if (this._deleted) {\n        return;\n      }\n      this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n      if (this._deleted) {\n        return;\n      }\n      if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n        }\n      }\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\n      if (this._deleted) {\n        return;\n      }\n      this._isInitialized = true;\n    });\n    return this._initializationPromise;\n  }\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent() {\n    if (this._deleted) {\n      return;\n    }\n    const user = await this.assertedPersistence.getCurrentUser();\n    if (!this.currentUser && !user) {\n      return;\n    }\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      this._currentUser._assign(user);\n      await this.currentUser.getIdToken();\n      return;\n    }\n    await this._updateCurrentUser(\n      user,\n      /* skipBeforeStateCallbacks */\n      true\n    );\n  }\n  async initializeCurrentUser(popupRedirectResolver) {\n    var _a;\n    const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n      const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n      if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {\n        futureCurrentUser = result.user;\n        needsTocheckMiddleware = true;\n      }\n    }\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n    if (!futureCurrentUser._redirectEventId) {\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n        }\n      }\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    _assert(\n      this._popupRedirectResolver,\n      this,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    await this.getOrInitRedirectPersistenceManager();\n    if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n  async tryRedirectSignIn(redirectResolver) {\n    let result = null;\n    try {\n      result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n    } catch (e) {\n      await this._setRedirectUser(null);\n    }\n    return result;\n  }\n  async reloadAndSetCurrentUserOrClear(user) {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${\"network-request-failed\"}`) {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n    return this.directlySetCurrentUser(user);\n  }\n  useDeviceLanguage() {\n    this.languageCode = _getUserLanguage();\n  }\n  async _delete() {\n    this._deleted = true;\n  }\n  async updateCurrentUser(userExtern) {\n    const user = userExtern ? getModularInstance(userExtern) : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        \"invalid-user-token\"\n        /* AuthErrorCode.INVALID_AUTH */\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n  async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        \"tenant-id-mismatch\"\n        /* AuthErrorCode.TENANT_ID_MISMATCH */\n      );\n    }\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user);\n      this.notifyAuthListeners();\n    });\n  }\n  async signOut() {\n    await this.beforeStateQueue.runMiddleware(null);\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n    return this._updateCurrentUser(\n      null,\n      /* skipBeforeStateCallbacks */\n      true\n    );\n  }\n  setPersistence(persistence) {\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n  _getRecaptchaConfig() {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n  async validatePassword(password) {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n    const passwordPolicy = this._getPasswordPolicyInternal();\n    if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n      return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\", {}));\n    }\n    return passwordPolicy.validatePassword(password);\n  }\n  _getPasswordPolicyInternal() {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n  async _updatePasswordPolicy() {\n    const response = await _getPasswordPolicy(this);\n    const passwordPolicy = new PasswordPolicyImpl(response);\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n  _getPersistence() {\n    return this.assertedPersistence.persistence.type;\n  }\n  _updateErrorMap(errorMap) {\n    this._errorFactory = new ErrorFactory(\"auth\", \"Firebase\", errorMap());\n  }\n  onAuthStateChanged(nextOrObserver, error, completed) {\n    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n  }\n  beforeAuthStateChanged(callback, onAbort) {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n  onIdTokenChanged(nextOrObserver, error, completed) {\n    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n  }\n  authStateReady() {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   */\n  async revokeAccessToken(token) {\n    if (this.currentUser) {\n      const idToken = await this.currentUser.getIdToken();\n      const request = {\n        providerId: \"apple.com\",\n        tokenType: \"ACCESS_TOKEN\",\n        token,\n        idToken\n      };\n      if (this.tenantId != null) {\n        request.tenantId = this.tenantId;\n      }\n      await revokeToken(this, request);\n    }\n  }\n  toJSON() {\n    var _a;\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n    };\n  }\n  async _setRedirectUser(user, popupRedirectResolver) {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n    return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n  }\n  async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n    if (!this.redirectPersistenceManager) {\n      const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n      _assert(\n        resolver,\n        this,\n        \"argument-error\"\n        /* AuthErrorCode.ARGUMENT_ERROR */\n      );\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        \"redirectUser\"\n        /* KeyName.REDIRECT_USER */\n      );\n      this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n    }\n    return this.redirectPersistenceManager;\n  }\n  async _redirectUserForId(id) {\n    var _a, _b;\n    if (this._isInitialized) {\n      await this.queue(async () => {\n      });\n    }\n    if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\n      return this._currentUser;\n    }\n    if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\n      return this.redirectUser;\n    }\n    return null;\n  }\n  async _persistUserIfCurrent(user) {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user) {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n  _key() {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n  _startProactiveRefresh() {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n  _stopProactiveRefresh() {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n  /** Returns the current user cast as the internal type */\n  get _currentUser() {\n    return this.currentUser;\n  }\n  notifyAuthListeners() {\n    var _a, _b;\n    if (!this._isInitialized) {\n      return;\n    }\n    this.idTokenSubscription.next(this.currentUser);\n    const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n  registerStateListener(subscription, nextOrObserver, error, completed) {\n    if (this._deleted) {\n      return () => {\n      };\n    }\n    const cb = typeof nextOrObserver === \"function\" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n    let isUnsubscribed = false;\n    const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n    _assert(\n      promise,\n      this,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n    if (typeof nextOrObserver === \"function\") {\n      const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  async directlySetCurrentUser(user) {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n    this.currentUser = user;\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n  queue(action) {\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n  get assertedPersistence() {\n    _assert(\n      this.persistenceManager,\n      this,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return this.persistenceManager;\n  }\n  _logFramework(framework) {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n  }\n  _getFrameworks() {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders() {\n    var _a;\n    const headers = {\n      [\n        \"X-Client-Version\"\n        /* HttpHeader.X_CLIENT_VERSION */\n      ]: this.clientVersion\n    };\n    if (this.app.options.appId) {\n      headers[\n        \"X-Firebase-gmpid\"\n        /* HttpHeader.X_FIREBASE_GMPID */\n      ] = this.app.options.appId;\n    }\n    const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({\n      optional: true\n    })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\n    if (heartbeatsHeader) {\n      headers[\n        \"X-Firebase-Client\"\n        /* HttpHeader.X_FIREBASE_CLIENT */\n      ] = heartbeatsHeader;\n    }\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[\n        \"X-Firebase-AppCheck\"\n        /* HttpHeader.X_FIREBASE_APP_CHECK */\n      ] = appCheckToken;\n    }\n    return headers;\n  }\n  async _getAppCheckToken() {\n    var _a;\n    const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());\n    if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\n      _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n    }\n    return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\n  }\n};\nfunction _castAuth(auth) {\n  return getModularInstance(auth);\n}\nvar Subscription = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.observer = null;\n    this.addObserver = createSubscribe((observer) => this.observer = observer);\n  }\n  get next() {\n    _assert(\n      this.observer,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return this.observer.next.bind(this.observer);\n  }\n};\nfunction getScriptParentElement() {\n  var _a, _b;\n  return (_b = (_a = document.getElementsByTagName(\"head\")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\n}\nfunction _loadJS(url) {\n  return new Promise((resolve, reject) => {\n    const el = document.createElement(\"script\");\n    el.setAttribute(\"src\", url);\n    el.onload = resolve;\n    el.onerror = (e) => {\n      const error = _createError(\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n      error.customData = e;\n      reject(error);\n    };\n    el.type = \"text/javascript\";\n    el.charset = \"UTF-8\";\n    getScriptParentElement().appendChild(el);\n  });\n}\nfunction _generateCallbackName(prefix) {\n  return `__${prefix}${Math.floor(Math.random() * 1e6)}`;\n}\nvar RECAPTCHA_ENTERPRISE_URL = \"https://www.google.com/recaptcha/enterprise.js?render=\";\nvar RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = \"recaptcha-enterprise\";\nvar FAKE_TOKEN = \"NO_RECAPTCHA\";\nvar RecaptchaEnterpriseVerifier = class {\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern) {\n    this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n    this.auth = _castAuth(authExtern);\n  }\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(action = \"verify\", forceRefresh = false) {\n    async function retrieveSiteKey(auth) {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== void 0) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n      return new Promise(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: \"CLIENT_TYPE_WEB\",\n          version: \"RECAPTCHA_ENTERPRISE\"\n          /* RecaptchaVersion.ENTERPRISE */\n        }).then((response) => {\n          if (response.recaptchaKey === void 0) {\n            reject(new Error(\"recaptcha Enterprise site key undefined\"));\n          } else {\n            const config = new RecaptchaConfig(response);\n            if (auth.tenantId == null) {\n              auth._agentRecaptchaConfig = config;\n            } else {\n              auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n            }\n            return resolve(config.siteKey);\n          }\n        }).catch((error) => {\n          reject(error);\n        });\n      });\n    }\n    function retrieveRecaptchaToken(siteKey, resolve, reject) {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise.execute(siteKey, { action }).then((token) => {\n            resolve(token);\n          }).catch(() => {\n            resolve(FAKE_TOKEN);\n          });\n        });\n      } else {\n        reject(Error(\"No reCAPTCHA enterprise script loaded.\"));\n      }\n    }\n    return new Promise((resolve, reject) => {\n      retrieveSiteKey(this.auth).then((siteKey) => {\n        if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n          retrieveRecaptchaToken(siteKey, resolve, reject);\n        } else {\n          if (typeof window === \"undefined\") {\n            reject(new Error(\"RecaptchaVerifier is only supported in browser\"));\n            return;\n          }\n          _loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey).then(() => {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          }).catch((error) => {\n            reject(error);\n          });\n        }\n      }).catch((error) => {\n        reject(error);\n      });\n    });\n  }\n};\nasync function injectRecaptchaFields(auth, request, action, captchaResp = false) {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  try {\n    captchaResponse = await verifier.verify(action);\n  } catch (error) {\n    captchaResponse = await verifier.verify(action, true);\n  }\n  const newRequest = Object.assign({}, request);\n  if (!captchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { \"captchaResp\": captchaResponse });\n  }\n  Object.assign(newRequest, {\n    \"clientType\": \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  });\n  Object.assign(newRequest, {\n    \"recaptchaVersion\": \"RECAPTCHA_ENTERPRISE\"\n    /* RecaptchaVersion.ENTERPRISE */\n  });\n  return newRequest;\n}\nasync function handleRecaptchaFlow(authInstance, request, actionName, actionMethod) {\n  var _a;\n  if ((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\n    \"EMAIL_PASSWORD_PROVIDER\"\n    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */\n  )) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInstance,\n      request,\n      actionName,\n      actionName === \"getOobCode\"\n      /* RecaptchaActionName.GET_OOB_CODE */\n    );\n    return actionMethod(authInstance, requestWithRecaptcha);\n  } else {\n    return actionMethod(authInstance, request).catch(async (error) => {\n      if (error.code === `auth/${\"missing-recaptcha-token\"}`) {\n        console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n        const requestWithRecaptcha = await injectRecaptchaFields(\n          authInstance,\n          request,\n          actionName,\n          actionName === \"getOobCode\"\n          /* RecaptchaActionName.GET_OOB_CODE */\n        );\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n}\nasync function _initializeRecaptchaConfig(auth) {\n  const authInternal = _castAuth(auth);\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: \"CLIENT_TYPE_WEB\",\n    version: \"RECAPTCHA_ENTERPRISE\"\n    /* RecaptchaVersion.ENTERPRISE */\n  });\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n  if (config.isProviderEnabled(\n    \"EMAIL_PASSWORD_PROVIDER\"\n    /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */\n  )) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\nfunction initializeAuth(app, deps) {\n  const provider = _getProvider(app, \"auth\");\n  if (provider.isInitialized()) {\n    const auth2 = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n    if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\n      return auth2;\n    } else {\n      _fail(\n        auth2,\n        \"already-initialized\"\n        /* AuthErrorCode.ALREADY_INITIALIZED */\n      );\n    }\n  }\n  const auth = provider.initialize({ options: deps });\n  return auth;\n}\nfunction _initializeAuthInstance(auth, deps) {\n  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\nfunction connectAuthEmulator(auth, url, options) {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    \"emulator-config-failed\"\n    /* AuthErrorCode.EMULATOR_CONFIG_FAILED */\n  );\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    \"invalid-emulator-scheme\"\n    /* AuthErrorCode.INVALID_EMULATOR_SCHEME */\n  );\n  const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? \"\" : `:${port}`;\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(\":\", \"\"),\n    options: Object.freeze({ disableWarnings })\n  });\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\nfunction extractProtocol(url) {\n  const protocolEnd = url.indexOf(\":\");\n  return protocolEnd < 0 ? \"\" : url.substr(0, protocolEnd + 1);\n}\nfunction extractHostAndPort(url) {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length));\n  if (!authority) {\n    return { host: \"\", port: null };\n  }\n  const hostAndPort = authority[2].split(\"@\").pop() || \"\";\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(\":\");\n    return { host, port: parsePort(port) };\n  }\n}\nfunction parsePort(portStr) {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\nfunction emitEmulatorWarning() {\n  function attachBanner() {\n    const el = document.createElement(\"p\");\n    const sty = el.style;\n    el.innerText = \"Running in emulator mode. Do not use with production credentials.\";\n    sty.position = \"fixed\";\n    sty.width = \"100%\";\n    sty.backgroundColor = \"#ffffff\";\n    sty.border = \".1em solid #000000\";\n    sty.color = \"#b50000\";\n    sty.bottom = \"0px\";\n    sty.left = \"0px\";\n    sty.margin = \"0px\";\n    sty.zIndex = \"10000\";\n    sty.textAlign = \"center\";\n    el.classList.add(\"firebase-emulator-warning\");\n    document.body.appendChild(el);\n  }\n  if (typeof console !== \"undefined\" && typeof console.info === \"function\") {\n    console.info(\"WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.\");\n  }\n  if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n    if (document.readyState === \"loading\") {\n      window.addEventListener(\"DOMContentLoaded\", attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\nvar AuthCredential = class {\n  /** @internal */\n  constructor(providerId, signInMethod) {\n    this.providerId = providerId;\n    this.signInMethod = signInMethod;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return debugFail(\"not implemented\");\n  }\n  /** @internal */\n  _getIdTokenResponse(_auth) {\n    return debugFail(\"not implemented\");\n  }\n  /** @internal */\n  _linkToIdToken(_auth, _idToken) {\n    return debugFail(\"not implemented\");\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth) {\n    return debugFail(\"not implemented\");\n  }\n};\nasync function resetPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:resetPassword\", _addTidIfNecessary(auth, request));\n}\nasync function updateEmailPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", request);\n}\nasync function linkEmailPassword(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:signUp\", request);\n}\nasync function applyActionCode$1(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithPassword(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPassword\", _addTidIfNecessary(auth, request));\n}\nasync function sendOobCode(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:sendOobCode\", _addTidIfNecessary(auth, request));\n}\nasync function sendEmailVerification$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function sendPasswordResetEmail$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function sendSignInLinkToEmail$1(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function verifyAndChangeEmail(auth, request) {\n  return sendOobCode(auth, request);\n}\nasync function signInWithEmailLink$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithEmailLink\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithEmailLinkForLinking(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithEmailLink\", _addTidIfNecessary(auth, request));\n}\nvar EmailAuthCredential = class _EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  constructor(_email, _password, signInMethod, _tenantId = null) {\n    super(\"password\", signInMethod);\n    this._email = _email;\n    this._password = _password;\n    this._tenantId = _tenantId;\n  }\n  /** @internal */\n  static _fromEmailAndPassword(email, password) {\n    return new _EmailAuthCredential(\n      email,\n      password,\n      \"password\"\n      /* SignInMethod.EMAIL_PASSWORD */\n    );\n  }\n  /** @internal */\n  static _fromEmailAndCode(email, oobCode, tenantId = null) {\n    return new _EmailAuthCredential(email, oobCode, \"emailLink\", tenantId);\n  }\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON() {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n      if (obj.signInMethod === \"password\") {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === \"emailLink\") {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n  /** @internal */\n  async _getIdTokenResponse(auth) {\n    switch (this.signInMethod) {\n      case \"password\":\n        const request = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: \"CLIENT_TYPE_WEB\"\n          /* RecaptchaClientType.WEB */\n        };\n        return handleRecaptchaFlow(auth, request, \"signInWithPassword\", signInWithPassword);\n      case \"emailLink\":\n        return signInWithEmailLink$1(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n    }\n  }\n  /** @internal */\n  async _linkToIdToken(auth, idToken) {\n    switch (this.signInMethod) {\n      case \"password\":\n        const request = {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: \"CLIENT_TYPE_WEB\"\n          /* RecaptchaClientType.WEB */\n        };\n        return handleRecaptchaFlow(auth, request, \"signUpPassword\", linkEmailPassword);\n      case \"emailLink\":\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n    }\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    return this._getIdTokenResponse(auth);\n  }\n};\nasync function signInWithIdp(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithIdp\", _addTidIfNecessary(auth, request));\n}\nvar IDP_REQUEST_URI$1 = \"http://localhost\";\nvar OAuthCredential = class _OAuthCredential extends AuthCredential {\n  constructor() {\n    super(...arguments);\n    this.pendingToken = null;\n  }\n  /** @internal */\n  static _fromParams(params) {\n    const cred = new _OAuthCredential(params.providerId, params.signInMethod);\n    if (params.idToken || params.accessToken) {\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(\n        \"argument-error\"\n        /* AuthErrorCode.ARGUMENT_ERROR */\n      );\n    }\n    return cred;\n  }\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON() {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    const { providerId, signInMethod } = obj, rest = __rest(obj, [\"providerId\", \"signInMethod\"]);\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n    const cred = new _OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || void 0;\n    cred.accessToken = rest.accessToken || void 0;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n  buildRequest() {\n    const request = {\n      requestUri: IDP_REQUEST_URI$1,\n      returnSecureToken: true\n    };\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody = {};\n      if (this.idToken) {\n        postBody[\"id_token\"] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody[\"access_token\"] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody[\"oauth_token_secret\"] = this.secret;\n      }\n      postBody[\"providerId\"] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody[\"nonce\"] = this.nonce;\n      }\n      request.postBody = querystring(postBody);\n    }\n    return request;\n  }\n};\nasync function sendPhoneVerificationCode(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:sendVerificationCode\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithPhoneNumber$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPhoneNumber\", _addTidIfNecessary(auth, request));\n}\nasync function linkWithPhoneNumber$1(auth, request) {\n  const response = await _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPhoneNumber\", _addTidIfNecessary(auth, request));\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, \"account-exists-with-different-credential\", response);\n  }\n  return response;\n}\nvar VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n  [\n    \"USER_NOT_FOUND\"\n    /* ServerError.USER_NOT_FOUND */\n  ]: \"user-not-found\"\n  /* AuthErrorCode.USER_DELETED */\n};\nasync function verifyPhoneNumberForExisting(auth, request) {\n  const apiRequest = Object.assign(Object.assign({}, request), { operation: \"REAUTH\" });\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithPhoneNumber\", _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n}\nvar PhoneAuthCredential = class _PhoneAuthCredential extends AuthCredential {\n  constructor(params) {\n    super(\n      \"phone\",\n      \"phone\"\n      /* SignInMethod.PHONE */\n    );\n    this.params = params;\n  }\n  /** @internal */\n  static _fromVerification(verificationId, verificationCode) {\n    return new _PhoneAuthCredential({ verificationId, verificationCode });\n  }\n  /** @internal */\n  static _fromTokenResponse(phoneNumber, temporaryProof) {\n    return new _PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n  /** @internal */\n  _makeVerificationRequest() {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON() {\n    const obj = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n    return obj;\n  }\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json) {\n    if (typeof json === \"string\") {\n      json = JSON.parse(json);\n    }\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;\n    if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n      return null;\n    }\n    return new _PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n};\nfunction parseMode(mode) {\n  switch (mode) {\n    case \"recoverEmail\":\n      return \"RECOVER_EMAIL\";\n    case \"resetPassword\":\n      return \"PASSWORD_RESET\";\n    case \"signIn\":\n      return \"EMAIL_SIGNIN\";\n    case \"verifyEmail\":\n      return \"VERIFY_EMAIL\";\n    case \"verifyAndChangeEmail\":\n      return \"VERIFY_AND_CHANGE_EMAIL\";\n    case \"revertSecondFactorAddition\":\n      return \"REVERT_SECOND_FACTOR_ADDITION\";\n    default:\n      return null;\n  }\n}\nfunction parseDeepLink(url) {\n  const link = querystringDecode(extractQuerystring(url))[\"link\"];\n  const doubleDeepLink = link ? querystringDecode(extractQuerystring(link))[\"deep_link_id\"] : null;\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\"deep_link_id\"];\n  const iOSDoubleDeepLink = iOSDeepLink ? querystringDecode(extractQuerystring(iOSDeepLink))[\"link\"] : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\nvar ActionCodeURL = class _ActionCodeURL {\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink) {\n    var _a, _b, _c, _d, _e, _f;\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = (_a = searchParams[\n      \"apiKey\"\n      /* QueryField.API_KEY */\n    ]) !== null && _a !== void 0 ? _a : null;\n    const code = (_b = searchParams[\n      \"oobCode\"\n      /* QueryField.CODE */\n    ]) !== null && _b !== void 0 ? _b : null;\n    const operation = parseMode((_c = searchParams[\n      \"mode\"\n      /* QueryField.MODE */\n    ]) !== null && _c !== void 0 ? _c : null);\n    _assert(\n      apiKey && code && operation,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = (_d = searchParams[\n      \"continueUrl\"\n      /* QueryField.CONTINUE_URL */\n    ]) !== null && _d !== void 0 ? _d : null;\n    this.languageCode = (_e = searchParams[\n      \"languageCode\"\n      /* QueryField.LANGUAGE_CODE */\n    ]) !== null && _e !== void 0 ? _e : null;\n    this.tenantId = (_f = searchParams[\n      \"tenantId\"\n      /* QueryField.TENANT_ID */\n    ]) !== null && _f !== void 0 ? _f : null;\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link) {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new _ActionCodeURL(actionLink);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nfunction parseActionCodeURL(link) {\n  return ActionCodeURL.parseLink(link);\n}\nvar EmailAuthProvider = class _EmailAuthProvider {\n  constructor() {\n    this.providerId = _EmailAuthProvider.PROVIDER_ID;\n  }\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email, password) {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(email, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(\n      actionCodeUrl,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n  }\n};\nEmailAuthProvider.PROVIDER_ID = \"password\";\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\";\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\";\nvar FederatedAuthProvider = class {\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(providerId) {\n    this.providerId = providerId;\n    this.defaultLanguageCode = null;\n    this.customParameters = {};\n  }\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode) {\n    this.defaultLanguageCode = languageCode;\n  }\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters) {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters() {\n    return this.customParameters;\n  }\n};\nvar BaseOAuthProvider = class extends FederatedAuthProvider {\n  constructor() {\n    super(...arguments);\n    this.scopes = [];\n  }\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope) {\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes() {\n    return [...this.scopes];\n  }\n};\nvar OAuthProvider = class _OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    _assert(\n      \"providerId\" in obj && \"signInMethod\" in obj,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params) {\n    return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));\n  }\n  /** An internal credential method that accepts more permissive options */\n  _credential(params) {\n    _assert(\n      params.idToken || params.accessToken,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n  }\n  static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;\n    if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n      return null;\n    }\n    if (!providerId) {\n      return null;\n    }\n    try {\n      return new _OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n};\nvar FacebookAuthProvider = class _FacebookAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"facebook.com\"\n      /* ProviderId.FACEBOOK */\n    );\n  }\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: _FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: _FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse || !(\"oauthAccessToken\" in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return _FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\";\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\";\nvar GoogleAuthProvider = class _GoogleAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"google.com\"\n      /* ProviderId.GOOGLE */\n    );\n    this.addScope(\"profile\");\n  }\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(idToken, accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: _GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: _GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthIdToken, oauthAccessToken } = tokenResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      return null;\n    }\n    try {\n      return _GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\";\nGoogleAuthProvider.PROVIDER_ID = \"google.com\";\nvar GithubAuthProvider = class _GithubAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"github.com\"\n      /* ProviderId.GITHUB */\n    );\n  }\n  /**\n   * Creates a credential for Github.\n   *\n   * @param accessToken - Github access token.\n   */\n  static credential(accessToken) {\n    return OAuthCredential._fromParams({\n      providerId: _GithubAuthProvider.PROVIDER_ID,\n      signInMethod: _GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _GithubAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse || !(\"oauthAccessToken\" in tokenResponse)) {\n      return null;\n    }\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n    try {\n      return _GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\";\nGithubAuthProvider.PROVIDER_ID = \"github.com\";\nvar IDP_REQUEST_URI = \"http://localhost\";\nvar SAMLAuthCredential = class _SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  constructor(providerId, pendingToken) {\n    super(providerId, providerId);\n    this.pendingToken = pendingToken;\n  }\n  /** @internal */\n  _getIdTokenResponse(auth) {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _linkToIdToken(auth, idToken) {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n  /** @internal */\n  _getReauthenticationResolver(auth) {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON() {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json) {\n    const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken } = obj;\n    if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n      return null;\n    }\n    return new _SAMLAuthCredential(providerId, pendingToken);\n  }\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId, pendingToken) {\n    return new _SAMLAuthCredential(providerId, pendingToken);\n  }\n  buildRequest() {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n};\nvar SAML_PROVIDER_PREFIX = \"saml.\";\nvar SAMLAuthProvider = class _SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId) {\n    _assert(\n      providerId.startsWith(SAML_PROVIDER_PREFIX),\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    super(providerId);\n  }\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n  }\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json) {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(\n      credential,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return credential;\n  }\n  static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { pendingToken, providerId } = tokenResponse;\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n};\nvar TwitterAuthProvider = class _TwitterAuthProvider extends BaseOAuthProvider {\n  constructor() {\n    super(\n      \"twitter.com\"\n      /* ProviderId.TWITTER */\n    );\n  }\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token, secret) {\n    return OAuthCredential._fromParams({\n      providerId: _TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: _TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    return _TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error) {\n    return _TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } = tokenResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n    try {\n      return _TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch (_a) {\n      return null;\n    }\n  }\n};\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\";\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\";\nasync function signUp(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signUp\", _addTidIfNecessary(auth, request));\n}\nvar UserCredentialImpl = class _UserCredentialImpl {\n  constructor(params) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n  static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n    const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new _UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n  static async _forOperation(user, operationType, response) {\n    await user._updateTokensIfNecessary(\n      response,\n      /* reload */\n      true\n    );\n    const providerId = providerIdForResponse(response);\n    return new _UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n};\nfunction providerIdForResponse(response) {\n  if (response.providerId) {\n    return response.providerId;\n  }\n  if (\"phoneNumber\" in response) {\n    return \"phone\";\n  }\n  return null;\n}\nasync function signInAnonymously(auth) {\n  var _a;\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\n    return new UserCredentialImpl({\n      user: authInternal.currentUser,\n      providerId: null,\n      operationType: \"signIn\"\n      /* OperationType.SIGN_IN */\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\", response, true);\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\nvar MultiFactorError = class _MultiFactorError extends FirebaseError {\n  constructor(auth, error, operationType, user) {\n    var _a;\n    super(error.code, error.message);\n    this.operationType = operationType;\n    this.user = user;\n    Object.setPrototypeOf(this, _MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : void 0,\n      _serverResponse: error.customData._serverResponse,\n      operationType\n    };\n  }\n  static _fromErrorAndOperation(auth, error, operationType, user) {\n    return new _MultiFactorError(auth, error, operationType, user);\n  }\n};\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n  const idTokenProvider = operationType === \"reauthenticate\" ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n  return idTokenProvider.catch((error) => {\n    if (error.code === `auth/${\"multi-factor-auth-required\"}`) {\n      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n    }\n    throw error;\n  });\n}\nfunction providerDataAsNames(providerData) {\n  return new Set(providerData.map(({ providerId }) => providerId).filter((pid) => !!pid));\n}\nasync function unlink(user, providerId) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n  userInternal.providerData = userInternal.providerData.filter((pd) => providersLeft.has(pd.providerId));\n  if (!providersLeft.has(\n    \"phone\"\n    /* ProviderId.PHONE */\n  )) {\n    userInternal.phoneNumber = null;\n  }\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\nasync function _link$1(user, credential, bypassAuthState = false) {\n  const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n  return UserCredentialImpl._forOperation(user, \"link\", response);\n}\nasync function _assertLinkedStatus(expected, user, provider) {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n  const code = expected === false ? \"provider-already-linked\" : \"no-such-provider\";\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\n  const { auth } = user;\n  const operationType = \"reauthenticate\";\n  try {\n    const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n    _assert(\n      response.idToken,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const parsed = _parseToken(response.idToken);\n    _assert(\n      parsed,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const { sub: localId } = parsed;\n    _assert(\n      user.uid === localId,\n      auth,\n      \"user-mismatch\"\n      /* AuthErrorCode.USER_MISMATCH */\n    );\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\"}`) {\n      _fail(\n        auth,\n        \"user-mismatch\"\n        /* AuthErrorCode.USER_MISMATCH */\n      );\n    }\n    throw e;\n  }\n}\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\n  const operationType = \"signIn\";\n  const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\nasync function signInWithCredential(auth, credential) {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\nasync function linkWithCredential(user, credential) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n  return _link$1(userInternal, credential);\n}\nasync function reauthenticateWithCredential(user, credential) {\n  return _reauthenticate(getModularInstance(user), credential);\n}\nasync function signInWithCustomToken$1(auth, request) {\n  return _performSignInRequest(auth, \"POST\", \"/v1/accounts:signInWithCustomToken\", _addTidIfNecessary(auth, request));\n}\nasync function signInWithCustomToken(auth, customToken) {\n  const authInternal = _castAuth(auth);\n  const response = await signInWithCustomToken$1(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\", response);\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\nvar MultiFactorInfoImpl = class {\n  constructor(factorId, response) {\n    this.factorId = factorId;\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n  static _fromServerResponse(auth, enrollment) {\n    if (\"phoneInfo\" in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    } else if (\"totpInfo\" in enrollment) {\n      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n  }\n};\nvar PhoneMultiFactorInfoImpl = class _PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n  constructor(response) {\n    super(\"phone\", response);\n    this.phoneNumber = response.phoneInfo;\n  }\n  static _fromServerResponse(_auth, enrollment) {\n    return new _PhoneMultiFactorInfoImpl(enrollment);\n  }\n};\nvar TotpMultiFactorInfoImpl = class _TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n  constructor(response) {\n    super(\"totp\", response);\n  }\n  static _fromServerResponse(_auth, enrollment) {\n    return new _TotpMultiFactorInfoImpl(enrollment);\n  }\n};\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n  var _a;\n  _assert(\n    ((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0,\n    auth,\n    \"invalid-continue-uri\"\n    /* AuthErrorCode.INVALID_CONTINUE_URI */\n  );\n  _assert(\n    typeof actionCodeSettings.dynamicLinkDomain === \"undefined\" || actionCodeSettings.dynamicLinkDomain.length > 0,\n    auth,\n    \"invalid-dynamic-link-domain\"\n    /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */\n  );\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n  if (actionCodeSettings.iOS) {\n    _assert(\n      actionCodeSettings.iOS.bundleId.length > 0,\n      auth,\n      \"missing-ios-bundle-id\"\n      /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */\n    );\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n  if (actionCodeSettings.android) {\n    _assert(\n      actionCodeSettings.android.packageName.length > 0,\n      auth,\n      \"missing-android-pkg-name\"\n      /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */\n    );\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\nasync function recachePasswordPolicy(auth) {\n  const authInternal = _castAuth(auth);\n  if (authInternal._getPasswordPolicyInternal()) {\n    await authInternal._updatePasswordPolicy();\n  }\n}\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    requestType: \"PASSWORD_RESET\",\n    email,\n    clientType: \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n  }\n  await handleRecaptchaFlow(authInternal, request, \"getOobCode\", sendPasswordResetEmail$1);\n}\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\n  await resetPassword(getModularInstance(auth), {\n    oobCode,\n    newPassword\n  }).catch(async (error) => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\"}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n}\nasync function applyActionCode(auth, oobCode) {\n  await applyActionCode$1(getModularInstance(auth), { oobCode });\n}\nasync function checkActionCode(auth, oobCode) {\n  const authModular = getModularInstance(auth);\n  const response = await resetPassword(authModular, { oobCode });\n  const operation = response.requestType;\n  _assert(\n    operation,\n    authModular,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  switch (operation) {\n    case \"EMAIL_SIGNIN\":\n      break;\n    case \"VERIFY_AND_CHANGE_EMAIL\":\n      _assert(\n        response.newEmail,\n        authModular,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n      break;\n    case \"REVERT_SECOND_FACTOR_ADDITION\":\n      _assert(\n        response.mfaInfo,\n        authModular,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n    default:\n      _assert(\n        response.email,\n        authModular,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n  }\n  let multiFactorInfo = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n  }\n  return {\n    data: {\n      email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" ? response.newEmail : response.email) || null,\n      previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" ? response.email : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\nasync function verifyPasswordResetCode(auth, code) {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  return data.email;\n}\nasync function createUserWithEmailAndPassword(auth, email, password) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  };\n  const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\", signUp);\n  const response = await signUpResponse.catch((error) => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\"}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\", response);\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\nfunction signInWithEmailAndPassword(auth, email, password) {\n  return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async (error) => {\n    if (error.code === `auth/${\"password-does-not-meet-requirements\"}`) {\n      void recachePasswordPolicy(auth);\n    }\n    throw error;\n  });\n}\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n  const authInternal = _castAuth(auth);\n  const request = {\n    requestType: \"EMAIL_SIGNIN\",\n    email,\n    clientType: \"CLIENT_TYPE_WEB\"\n    /* RecaptchaClientType.WEB */\n  };\n  function setActionCodeSettings(request2, actionCodeSettings2) {\n    _assert(\n      actionCodeSettings2.handleCodeInApp,\n      authInternal,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    if (actionCodeSettings2) {\n      _setActionCodeSettingsOnRequest(authInternal, request2, actionCodeSettings2);\n    }\n  }\n  setActionCodeSettings(request, actionCodeSettings);\n  await handleRecaptchaFlow(authInternal, request, \"getOobCode\", sendSignInLinkToEmail$1);\n}\nfunction isSignInWithEmailLink(auth, emailLink) {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\";\n}\nasync function signInWithEmailLink(auth, email, emailLink) {\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n  _assert(\n    credential._tenantId === (authModular.tenantId || null),\n    authModular,\n    \"tenant-id-mismatch\"\n    /* AuthErrorCode.TENANT_ID_MISMATCH */\n  );\n  return signInWithCredential(authModular, credential);\n}\nasync function createAuthUri(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:createAuthUri\", _addTidIfNecessary(auth, request));\n}\nasync function fetchSignInMethodsForEmail(auth, email) {\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : \"http://localhost\";\n  const request = {\n    identifier: email,\n    continueUri\n  };\n  const { signinMethods } = await createAuthUri(getModularInstance(auth), request);\n  return signinMethods || [];\n}\nasync function sendEmailVerification(user, actionCodeSettings) {\n  const userInternal = getModularInstance(user);\n  const idToken = await user.getIdToken();\n  const request = {\n    requestType: \"VERIFY_EMAIL\",\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n  }\n  const { email } = await sendEmailVerification$1(userInternal.auth, request);\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n  const userInternal = getModularInstance(user);\n  const idToken = await user.getIdToken();\n  const request = {\n    requestType: \"VERIFY_AND_CHANGE_EMAIL\",\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n  }\n  const { email } = await verifyAndChangeEmail(userInternal.auth, request);\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\nasync function updateProfile$1(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v1/accounts:update\", request);\n}\nasync function updateProfile(user, { displayName, photoURL: photoUrl }) {\n  if (displayName === void 0 && photoUrl === void 0) {\n    return;\n  }\n  const userInternal = getModularInstance(user);\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n  const passwordProvider = userInternal.providerData.find(\n    ({ providerId }) => providerId === \"password\"\n    /* ProviderId.PASSWORD */\n  );\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n  await userInternal._updateTokensIfNecessary(response);\n}\nfunction updateEmail(user, newEmail) {\n  return updateEmailOrPassword(getModularInstance(user), newEmail, null);\n}\nfunction updatePassword(user, newPassword) {\n  return updateEmailOrPassword(getModularInstance(user), null, newPassword);\n}\nasync function updateEmailOrPassword(user, email, password) {\n  const { auth } = user;\n  const idToken = await user.getIdToken();\n  const request = {\n    idToken,\n    returnSecureToken: true\n  };\n  if (email) {\n    request.email = email;\n  }\n  if (password) {\n    request.password = password;\n  }\n  const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n  await user._updateTokensIfNecessary(\n    response,\n    /* reload */\n    true\n  );\n}\nfunction _fromIdTokenResponse(idTokenResponse) {\n  var _a, _b;\n  if (!idTokenResponse) {\n    return null;\n  }\n  const { providerId } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n  const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\";\n  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n    const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b[\"sign_in_provider\"];\n    if (signInProvider) {\n      const filteredProviderId = signInProvider !== \"anonymous\" && signInProvider !== \"custom\" ? signInProvider : null;\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case \"facebook.com\":\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case \"github.com\":\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case \"google.com\":\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case \"twitter.com\":\n      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n    case \"custom\":\n    case \"anonymous\":\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\nvar GenericAdditionalUserInfo = class {\n  constructor(isNewUser, providerId, profile = {}) {\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n  }\n};\nvar FederatedAdditionalUserInfoWithUsername = class extends GenericAdditionalUserInfo {\n  constructor(isNewUser, providerId, profile, username) {\n    super(isNewUser, providerId, profile);\n    this.username = username;\n  }\n};\nvar FacebookAdditionalUserInfo = class extends GenericAdditionalUserInfo {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"facebook.com\", profile);\n  }\n};\nvar GithubAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"github.com\", profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === \"string\" ? profile === null || profile === void 0 ? void 0 : profile.login : null);\n  }\n};\nvar GoogleAdditionalUserInfo = class extends GenericAdditionalUserInfo {\n  constructor(isNewUser, profile) {\n    super(isNewUser, \"google.com\", profile);\n  }\n};\nvar TwitterAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser, profile, screenName) {\n    super(isNewUser, \"twitter.com\", profile, screenName);\n  }\n};\nfunction getAdditionalUserInfo(userCredential) {\n  const { user, _tokenResponse } = userCredential;\n  if (user.isAnonymous && !_tokenResponse) {\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n  return _fromIdTokenResponse(_tokenResponse);\n}\nfunction setPersistence(auth, persistence) {\n  return getModularInstance(auth).setPersistence(persistence);\n}\nfunction initializeRecaptchaConfig(auth) {\n  return _initializeRecaptchaConfig(auth);\n}\nasync function validatePassword(auth, password) {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\n  return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\n  return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\nfunction useDeviceLanguage(auth) {\n  getModularInstance(auth).useDeviceLanguage();\n}\nfunction updateCurrentUser(auth, user) {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\nfunction signOut(auth) {\n  return getModularInstance(auth).signOut();\n}\nfunction revokeAccessToken(auth, token) {\n  const authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\nasync function deleteUser(user) {\n  return getModularInstance(user).delete();\n}\nvar MultiFactorSessionImpl = class _MultiFactorSessionImpl {\n  constructor(type, credential, user) {\n    this.type = type;\n    this.credential = credential;\n    this.user = user;\n  }\n  static _fromIdtoken(idToken, user) {\n    return new _MultiFactorSessionImpl(\"enroll\", idToken, user);\n  }\n  static _fromMfaPendingCredential(mfaPendingCredential) {\n    return new _MultiFactorSessionImpl(\"signin\", mfaPendingCredential);\n  }\n  toJSON() {\n    const key = this.type === \"enroll\" ? \"idToken\" : \"pendingCredential\";\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n  static fromJSON(obj) {\n    var _a, _b;\n    if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n      if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\n        return _MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n      } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\n        return _MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n      }\n    }\n    return null;\n  }\n};\nvar MultiFactorResolverImpl = class _MultiFactorResolverImpl {\n  constructor(session, hints, signInResolver) {\n    this.session = session;\n    this.hints = hints;\n    this.signInResolver = signInResolver;\n  }\n  /** @internal */\n  static _fromError(authExtern, error) {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map((enrollment) => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n    _assert(\n      serverResponse.mfaPendingCredential,\n      auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n    return new _MultiFactorResolverImpl(session, hints, async (assertion) => {\n      const mfaResponse = await assertion._process(auth, session);\n      delete serverResponse.mfaInfo;\n      delete serverResponse.mfaPendingCredential;\n      const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\n      switch (error.operationType) {\n        case \"signIn\":\n          const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n          await auth._updateCurrentUser(userCredential.user);\n          return userCredential;\n        case \"reauthenticate\":\n          _assert(\n            error.user,\n            auth,\n            \"internal-error\"\n            /* AuthErrorCode.INTERNAL_ERROR */\n          );\n          return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n        default:\n          _fail(\n            auth,\n            \"internal-error\"\n            /* AuthErrorCode.INTERNAL_ERROR */\n          );\n      }\n    });\n  }\n  async resolveSignIn(assertionExtern) {\n    const assertion = assertionExtern;\n    return this.signInResolver(assertion);\n  }\n};\nfunction getMultiFactorResolver(auth, error) {\n  var _a;\n  const authModular = getModularInstance(auth);\n  const errorInternal = error;\n  _assert(\n    error.customData.operationType,\n    authModular,\n    \"argument-error\"\n    /* AuthErrorCode.ARGUMENT_ERROR */\n  );\n  _assert(\n    (_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential,\n    authModular,\n    \"argument-error\"\n    /* AuthErrorCode.ARGUMENT_ERROR */\n  );\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\nfunction startEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:start\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:finalize\", _addTidIfNecessary(auth, request));\n}\nfunction startEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:start\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:finalize\", _addTidIfNecessary(auth, request));\n}\nfunction withdrawMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaEnrollment:withdraw\", _addTidIfNecessary(auth, request));\n}\nvar MultiFactorUserImpl = class _MultiFactorUserImpl {\n  constructor(user) {\n    this.user = user;\n    this.enrolledFactors = [];\n    user._onReload((userInfo) => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map((enrollment) => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n      }\n    });\n  }\n  static _fromUser(user) {\n    return new _MultiFactorUserImpl(user);\n  }\n  async getSession() {\n    return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n  }\n  async enroll(assertionExtern, displayName) {\n    const assertion = assertionExtern;\n    const session = await this.getSession();\n    const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    return this.user.reload();\n  }\n  async unenroll(infoOrUid) {\n    const mfaEnrollmentId = typeof infoOrUid === \"string\" ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n        idToken,\n        mfaEnrollmentId\n      }));\n      this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n};\nvar multiFactorUserCache = /* @__PURE__ */ new WeakMap();\nfunction multiFactor(user) {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n  }\n  return multiFactorUserCache.get(userModular);\n}\nvar STORAGE_AVAILABLE_KEY = \"__sak\";\nvar BrowserPersistenceClass = class {\n  constructor(storageRetriever, type) {\n    this.storageRetriever = storageRetriever;\n    this.type = type;\n  }\n  _isAvailable() {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, \"1\");\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch (_a) {\n      return Promise.resolve(false);\n    }\n  }\n  _set(key, value) {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n  _get(key) {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n  _remove(key) {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n  get storage() {\n    return this.storageRetriever();\n  }\n};\nfunction _iframeCannotSyncWebStorage() {\n  const ua = getUA();\n  return _isSafari(ua) || _isIOS(ua);\n}\nvar _POLLING_INTERVAL_MS$1 = 1e3;\nvar IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\nvar BrowserLocalPersistence = class extends BrowserPersistenceClass {\n  constructor() {\n    super(\n      () => window.localStorage,\n      \"LOCAL\"\n      /* PersistenceType.LOCAL */\n    );\n    this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n    this.listeners = {};\n    this.localCache = {};\n    this.pollTimer = null;\n    this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();\n    this.fallbackToPolling = _isMobileBrowser();\n    this._shouldAllowMigration = true;\n  }\n  forAllChangedKeys(cb) {\n    for (const key of Object.keys(this.listeners)) {\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n  onStorageEvent(event, poll = false) {\n    if (!event.key) {\n      this.forAllChangedKeys((key2, _oldValue, newValue) => {\n        this.notifyListeners(key2, newValue);\n      });\n      return;\n    }\n    const key = event.key;\n    if (poll) {\n      this.detachListener();\n    } else {\n      this.stopPolling();\n    }\n    if (this.safariLocalStorageNotSynced) {\n      const storedValue2 = this.storage.getItem(key);\n      if (event.newValue !== storedValue2) {\n        if (event.newValue !== null) {\n          this.storage.setItem(key, event.newValue);\n        } else {\n          this.storage.removeItem(key);\n        }\n      } else if (this.localCache[key] === event.newValue && !poll) {\n        return;\n      }\n    }\n    const triggerListeners = () => {\n      const storedValue2 = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue2) {\n        return;\n      }\n      this.notifyListeners(key, storedValue2);\n    };\n    const storedValue = this.storage.getItem(key);\n    if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n  notifyListeners(key, value) {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n  startPolling() {\n    this.stopPolling();\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys((key, oldValue, newValue) => {\n        this.onStorageEvent(\n          new StorageEvent(\"storage\", {\n            key,\n            oldValue,\n            newValue\n          }),\n          /* poll */\n          true\n        );\n      });\n    }, _POLLING_INTERVAL_MS$1);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n  attachListener() {\n    window.addEventListener(\"storage\", this.boundEventHandler);\n  }\n  detachListener() {\n    window.removeEventListener(\"storage\", this.boundEventHandler);\n  }\n  _addListener(key, listener) {\n    if (Object.keys(this.listeners).length === 0) {\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = /* @__PURE__ */ new Set();\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n  _removeListener(key, listener) {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n  // Update local cache on base operations:\n  async _set(key, value) {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n  async _get(key) {\n    const value = await super._get(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n  async _remove(key) {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n};\nBrowserLocalPersistence.type = \"LOCAL\";\nvar browserLocalPersistence = BrowserLocalPersistence;\nvar BrowserSessionPersistence = class extends BrowserPersistenceClass {\n  constructor() {\n    super(\n      () => window.sessionStorage,\n      \"SESSION\"\n      /* PersistenceType.SESSION */\n    );\n  }\n  _addListener(_key, _listener) {\n    return;\n  }\n  _removeListener(_key, _listener) {\n    return;\n  }\n};\nBrowserSessionPersistence.type = \"SESSION\";\nvar browserSessionPersistence = BrowserSessionPersistence;\nfunction _allSettled(promises) {\n  return Promise.all(promises.map(async (promise) => {\n    try {\n      const value = await promise;\n      return {\n        fulfilled: true,\n        value\n      };\n    } catch (reason) {\n      return {\n        fulfilled: false,\n        reason\n      };\n    }\n  }));\n}\nvar Receiver = class _Receiver {\n  constructor(eventTarget) {\n    this.eventTarget = eventTarget;\n    this.handlersMap = {};\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget) {\n    const existingInstance = this.receivers.find((receiver) => receiver.isListeningto(eventTarget));\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new _Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n  isListeningto(eventTarget) {\n    return this.eventTarget === eventTarget;\n  }\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  async handleEvent(event) {\n    const messageEvent = event;\n    const { eventId, eventType, data } = messageEvent.data;\n    const handlers = this.handlersMap[eventType];\n    if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\n      return;\n    }\n    messageEvent.ports[0].postMessage({\n      status: \"ack\",\n      eventId,\n      eventType\n    });\n    const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: \"done\",\n      eventId,\n      eventType,\n      response\n    });\n  }\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe(eventType, eventHandler) {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener(\"message\", this.boundEventHandler);\n    }\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = /* @__PURE__ */ new Set();\n    }\n    this.handlersMap[eventType].add(eventHandler);\n  }\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe(eventType, eventHandler) {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener(\"message\", this.boundEventHandler);\n    }\n  }\n};\nReceiver.receivers = [];\nfunction _generateEventId(prefix = \"\", digits = 10) {\n  let random = \"\";\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\nvar Sender = class {\n  constructor(target) {\n    this.target = target;\n    this.handlers = /* @__PURE__ */ new Set();\n  }\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  removeMessageHandler(handler) {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\"message\", handler.onMessage);\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send(eventType, data, timeout = 50) {\n    const messageChannel = typeof MessageChannel !== \"undefined\" ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(\n        \"connection_unavailable\"\n        /* _MessageError.CONNECTION_UNAVAILABLE */\n      );\n    }\n    let completionTimer;\n    let handler;\n    return new Promise((resolve, reject) => {\n      const eventId = _generateEventId(\"\", 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(\n          \"unsupported_event\"\n          /* _MessageError.UNSUPPORTED_EVENT */\n        ));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event) {\n          const messageEvent = event;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case \"ack\":\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(\n                () => {\n                  reject(new Error(\n                    \"timeout\"\n                    /* _MessageError.TIMEOUT */\n                  ));\n                },\n                3e3\n                /* _TimeoutDuration.COMPLETION */\n              );\n              break;\n            case \"done\":\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(\n                \"invalid_response\"\n                /* _MessageError.INVALID_RESPONSE */\n              ));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener(\"message\", handler.onMessage);\n      this.target.postMessage({\n        eventType,\n        eventId,\n        data\n      }, [messageChannel.port2]);\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n};\nfunction _window() {\n  return window;\n}\nfunction _setWindowLocation(url) {\n  _window().location.href = url;\n}\nfunction _isWorker() {\n  return typeof _window()[\"WorkerGlobalScope\"] !== \"undefined\" && typeof _window()[\"importScripts\"] === \"function\";\n}\nasync function _getActiveServiceWorker() {\n  if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch (_a) {\n    return null;\n  }\n}\nfunction _getServiceWorkerController() {\n  var _a;\n  return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\n}\nfunction _getWorkerGlobalScope() {\n  return _isWorker() ? self : null;\n}\nvar DB_NAME = \"firebaseLocalStorageDb\";\nvar DB_VERSION = 1;\nvar DB_OBJECTSTORE_NAME = \"firebaseLocalStorage\";\nvar DB_DATA_KEYPATH = \"fbase_key\";\nvar DBPromise = class {\n  constructor(request) {\n    this.request = request;\n  }\n  toPromise() {\n    return new Promise((resolve, reject) => {\n      this.request.addEventListener(\"success\", () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener(\"error\", () => {\n        reject(this.request.error);\n      });\n    });\n  }\n};\nfunction getObjectStore(db, isReadWrite) {\n  return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? \"readwrite\" : \"readonly\").objectStore(DB_OBJECTSTORE_NAME);\n}\nfunction _deleteDatabase() {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise(request).toPromise();\n}\nfunction _openDatabase() {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener(\"error\", () => {\n      reject(request.error);\n    });\n    request.addEventListener(\"upgradeneeded\", () => {\n      const db = request.result;\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n    request.addEventListener(\"success\", async () => {\n      const db = request.result;\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\nasync function _putObject(db, key, value) {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise(request).toPromise();\n}\nasync function getObject(db, key) {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise(request).toPromise();\n  return data === void 0 ? null : data.value;\n}\nfunction _deleteObject(db, key) {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise(request).toPromise();\n}\nvar _POLLING_INTERVAL_MS = 800;\nvar _TRANSACTION_RETRY_COUNT = 3;\nvar IndexedDBLocalPersistence = class {\n  constructor() {\n    this.type = \"LOCAL\";\n    this._shouldAllowMigration = true;\n    this.listeners = {};\n    this.localCache = {};\n    this.pollTimer = null;\n    this.pendingWrites = 0;\n    this.receiver = null;\n    this.sender = null;\n    this.serviceWorkerReceiverAvailable = false;\n    this.activeServiceWorker = null;\n    this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {\n    }, () => {\n    });\n  }\n  async _openDb() {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n  async _withRetries(op) {\n    let numAttempts = 0;\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = void 0;\n        }\n      }\n    }\n  }\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  async initializeServiceWorkerMessaging() {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  async initializeReceiver() {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n    this.receiver._subscribe(\"keyChanged\", async (_origin, data) => {\n      const keys = await this._poll();\n      return {\n        keyProcessed: keys.includes(data.key)\n      };\n    });\n    this.receiver._subscribe(\"ping\", async (_origin, _data) => {\n      return [\n        \"keyChanged\"\n        /* _EventType.KEY_CHANGED */\n      ];\n    });\n  }\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  async initializeSender() {\n    var _a, _b;\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    const results = await this.sender._send(\n      \"ping\",\n      {},\n      800\n      /* _TimeoutDuration.LONG_ACK */\n    );\n    if (!results) {\n      return;\n    }\n    if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\n      \"keyChanged\"\n      /* _EventType.KEY_CHANGED */\n    ))) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  async notifyServiceWorker(key) {\n    if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {\n      return;\n    }\n    try {\n      await this.sender._send(\n        \"keyChanged\",\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable ? 800 : 50\n        /* _TimeoutDuration.ACK */\n      );\n    } catch (_a) {\n    }\n  }\n  async _isAvailable() {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, \"1\");\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch (_a) {\n    }\n    return false;\n  }\n  async _withPendingWrite(write) {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n  async _set(key, value) {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n  async _get(key) {\n    const obj = await this._withRetries((db) => getObject(db, key));\n    this.localCache[key] = obj;\n    return obj;\n  }\n  async _remove(key) {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n  async _poll() {\n    const result = await this._withRetries((db) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise(getAllRequest).toPromise();\n    });\n    if (!result) {\n      return [];\n    }\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n    const keys = [];\n    const keysInResult = /* @__PURE__ */ new Set();\n    for (const { fbase_key: key, value } of result) {\n      keysInResult.add(key);\n      if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n        this.notifyListeners(key, value);\n        keys.push(key);\n      }\n    }\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n  notifyListeners(key, newValue) {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n  startPolling() {\n    this.stopPolling();\n    this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n  _addListener(key, listener) {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = /* @__PURE__ */ new Set();\n      void this._get(key);\n    }\n    this.listeners[key].add(listener);\n  }\n  _removeListener(key, listener) {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n};\nIndexedDBLocalPersistence.type = \"LOCAL\";\nvar indexedDBLocalPersistence = IndexedDBLocalPersistence;\nfunction startSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaSignIn:start\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInPhoneMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaSignIn:finalize\", _addTidIfNecessary(auth, request));\n}\nfunction finalizeSignInTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\", \"/v2/accounts/mfaSignIn:finalize\", _addTidIfNecessary(auth, request));\n}\nvar _SOLVE_TIME_MS = 500;\nvar _EXPIRATION_TIME_MS = 6e4;\nvar _WIDGET_ID_START = 1e12;\nvar MockReCaptcha = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.counter = _WIDGET_ID_START;\n    this._widgets = /* @__PURE__ */ new Map();\n  }\n  render(container, parameters) {\n    const id = this.counter;\n    this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n    this.counter++;\n    return id;\n  }\n  reset(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\n    this._widgets.delete(id);\n  }\n  getResponse(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || \"\";\n  }\n  async execute(optWidgetId) {\n    var _a;\n    const id = optWidgetId || _WIDGET_ID_START;\n    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\n    return \"\";\n  }\n};\nvar MockWidget = class {\n  constructor(containerOrId, appName, params) {\n    this.params = params;\n    this.timerId = null;\n    this.deleted = false;\n    this.responseToken = null;\n    this.clickHandler = () => {\n      this.execute();\n    };\n    const container = typeof containerOrId === \"string\" ? document.getElementById(containerOrId) : containerOrId;\n    _assert(container, \"argument-error\", { appName });\n    this.container = container;\n    this.isVisible = this.params.size !== \"invisible\";\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener(\"click\", this.clickHandler);\n    }\n  }\n  getResponse() {\n    this.checkIfDeleted();\n    return this.responseToken;\n  }\n  delete() {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener(\"click\", this.clickHandler);\n  }\n  execute() {\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n    this.timerId = window.setTimeout(() => {\n      this.responseToken = generateRandomAlphaNumericString(50);\n      const { callback, \"expired-callback\": expiredCallback } = this.params;\n      if (callback) {\n        try {\n          callback(this.responseToken);\n        } catch (e) {\n        }\n      }\n      this.timerId = window.setTimeout(() => {\n        this.timerId = null;\n        this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {\n          }\n        }\n        if (this.isVisible) {\n          this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  }\n  checkIfDeleted() {\n    if (this.deleted) {\n      throw new Error(\"reCAPTCHA mock was already deleted!\");\n    }\n  }\n};\nfunction generateRandomAlphaNumericString(len) {\n  const chars = [];\n  const allowedChars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  for (let i = 0; i < len; i++) {\n    chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n  }\n  return chars.join(\"\");\n}\nvar _JSLOAD_CALLBACK = _generateCallbackName(\"rcb\");\nvar NETWORK_TIMEOUT_DELAY = new Delay(3e4, 6e4);\nvar RECAPTCHA_BASE = \"https://www.google.com/recaptcha/api.js?\";\nvar ReCaptchaLoaderImpl = class {\n  constructor() {\n    var _a;\n    this.hostLanguage = \"\";\n    this.counter = 0;\n    this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\n  }\n  load(auth, hl = \"\") {\n    _assert(\n      isHostLanguageValid(hl),\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha);\n    }\n    return new Promise((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(\n          auth,\n          \"network-request-failed\"\n          /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n        ));\n      }, NETWORK_TIMEOUT_DELAY.get());\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n        const recaptcha = _window().grecaptcha;\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(\n            auth,\n            \"internal-error\"\n            /* AuthErrorCode.INTERNAL_ERROR */\n          ));\n          return;\n        }\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n      const url = `${RECAPTCHA_BASE}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: \"explicit\",\n        hl\n      })}`;\n      _loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        ));\n      });\n    });\n  }\n  clearedOneInstance() {\n    this.counter--;\n  }\n  shouldResolveImmediately(hl) {\n    var _a;\n    return !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n  }\n};\nfunction isHostLanguageValid(hl) {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\nvar MockReCaptchaLoaderImpl = class {\n  async load(auth) {\n    return new MockReCaptcha(auth);\n  }\n  clearedOneInstance() {\n  }\n};\nvar RECAPTCHA_VERIFIER_TYPE = \"recaptcha\";\nvar DEFAULT_PARAMS = {\n  theme: \"light\",\n  type: \"image\"\n};\nvar RecaptchaVerifier = class {\n  /**\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   */\n  constructor(authExtern, containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS)) {\n    this.parameters = parameters;\n    this.type = RECAPTCHA_VERIFIER_TYPE;\n    this.destroyed = false;\n    this.widgetId = null;\n    this.tokenChangeListeners = /* @__PURE__ */ new Set();\n    this.renderPromise = null;\n    this.recaptcha = null;\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === \"invisible\";\n    _assert(\n      typeof document !== \"undefined\",\n      this.auth,\n      \"operation-not-supported-in-this-environment\"\n      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */\n    );\n    const container = typeof containerOrId === \"string\" ? document.getElementById(containerOrId) : containerOrId;\n    _assert(\n      container,\n      this.auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n    this.validateStartingState();\n  }\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify() {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n    return new Promise((resolve) => {\n      const tokenChange = (token) => {\n        if (!token) {\n          return;\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render() {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n    this.renderPromise = this.makeRenderPromise().catch((e) => {\n      this.renderPromise = null;\n      throw e;\n    });\n    return this.renderPromise;\n  }\n  /** @internal */\n  _reset() {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear() {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach((node) => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n  validateStartingState() {\n    _assert(\n      !this.parameters.sitekey,\n      this.auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    _assert(\n      typeof document !== \"undefined\",\n      this.auth,\n      \"operation-not-supported-in-this-environment\"\n      /* AuthErrorCode.OPERATION_NOT_SUPPORTED */\n    );\n  }\n  makeTokenCallback(existing) {\n    return (token) => {\n      this.tokenChangeListeners.forEach((listener) => listener(token));\n      if (typeof existing === \"function\") {\n        existing(token);\n      } else if (typeof existing === \"string\") {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === \"function\") {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n  assertNotDestroyed() {\n    _assert(\n      !this.destroyed,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n  }\n  async makeRenderPromise() {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement(\"div\");\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n      this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n    }\n    return this.widgetId;\n  }\n  async init() {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(\n      siteKey,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    this.parameters.sitekey = siteKey;\n  }\n  getAssertedRecaptcha() {\n    _assert(\n      this.recaptcha,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return this.recaptcha;\n  }\n};\nfunction domReady() {\n  let resolver = null;\n  return new Promise((resolve) => {\n    if (document.readyState === \"complete\") {\n      resolve();\n      return;\n    }\n    resolver = () => resolve();\n    window.addEventListener(\"load\", resolver);\n  }).catch((e) => {\n    if (resolver) {\n      window.removeEventListener(\"load\", resolver);\n    }\n    throw e;\n  });\n}\nvar ConfirmationResultImpl = class {\n  constructor(verificationId, onConfirmation) {\n    this.verificationId = verificationId;\n    this.onConfirmation = onConfirmation;\n  }\n  confirm(verificationCode) {\n    const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n    return this.onConfirmation(authCredential);\n  }\n};\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, (cred) => signInWithCredential(authInternal, cred));\n}\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n  const userInternal = getModularInstance(user);\n  await _assertLinkedStatus(\n    false,\n    userInternal,\n    \"phone\"\n    /* ProviderId.PHONE */\n  );\n  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, (cred) => linkWithCredential(userInternal, cred));\n}\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n  const userInternal = getModularInstance(user);\n  const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\n  return new ConfirmationResultImpl(verificationId, (cred) => reauthenticateWithCredential(userInternal, cred));\n}\nasync function _verifyPhoneNumber(auth, options, verifier) {\n  var _a;\n  const recaptchaToken = await verifier.verify();\n  try {\n    _assert(\n      typeof recaptchaToken === \"string\",\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    _assert(\n      verifier.type === RECAPTCHA_VERIFIER_TYPE,\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    let phoneInfoOptions;\n    if (typeof options === \"string\") {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n    if (\"session\" in phoneInfoOptions) {\n      const session = phoneInfoOptions.session;\n      if (\"phoneNumber\" in phoneInfoOptions) {\n        _assert(\n          session.type === \"enroll\",\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n        const response = await startEnrollPhoneMfa(auth, {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken\n          }\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === \"signin\",\n          auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n        const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;\n        _assert(\n          mfaEnrollmentId,\n          auth,\n          \"missing-multi-factor-info\"\n          /* AuthErrorCode.MISSING_MFA_INFO */\n        );\n        const response = await startSignInPhoneMfa(auth, {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            recaptchaToken\n          }\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const { sessionInfo } = await sendPhoneVerificationCode(auth, {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        recaptchaToken\n      });\n      return sessionInfo;\n    }\n  } finally {\n    verifier._reset();\n  }\n}\nasync function updatePhoneNumber(user, credential) {\n  await _link$1(getModularInstance(user), credential);\n}\nvar PhoneAuthProvider = class _PhoneAuthProvider {\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth) {\n    this.providerId = _PhoneAuthProvider.PROVIDER_ID;\n    this.auth = _castAuth(auth);\n  }\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - For abuse prevention, this method also requires a\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\n   * {@link RecaptchaVerifier}.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow..\n   */\n  verifyPhoneNumber(phoneOptions, applicationVerifier) {\n    return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));\n  }\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(verificationId, verificationCode) {\n    return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n  }\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(userCredential) {\n    const credential = userCredential;\n    return _PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error) {\n    return _PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n  }\n  static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } = tokenResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n    }\n    return null;\n  }\n};\nPhoneAuthProvider.PROVIDER_ID = \"phone\";\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\";\nfunction _withDefaultResolver(auth, resolverOverride) {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n  _assert(\n    auth._popupRedirectResolver,\n    auth,\n    \"argument-error\"\n    /* AuthErrorCode.ARGUMENT_ERROR */\n  );\n  return auth._popupRedirectResolver;\n}\nvar IdpCredential = class extends AuthCredential {\n  constructor(params) {\n    super(\n      \"custom\",\n      \"custom\"\n      /* ProviderId.CUSTOM */\n    );\n    this.params = params;\n  }\n  _getIdTokenResponse(auth) {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n  _linkToIdToken(auth, idToken) {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n  _getReauthenticationResolver(auth) {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n  _buildIdpRequest(idToken) {\n    const request = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n    if (idToken) {\n      request.idToken = idToken;\n    }\n    return request;\n  }\n};\nfunction _signIn(params) {\n  return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n}\nfunction _reauth(params) {\n  const { auth, user } = params;\n  _assert(\n    user,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n}\nasync function _link(params) {\n  const { auth, user } = params;\n  _assert(\n    user,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n}\nvar AbstractPopupRedirectOperation = class {\n  constructor(auth, filter, resolver, user, bypassAuthState = false) {\n    this.auth = auth;\n    this.resolver = resolver;\n    this.user = user;\n    this.bypassAuthState = bypassAuthState;\n    this.pendingPromise = null;\n    this.eventManager = null;\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n  execute() {\n    return new Promise(async (resolve, reject) => {\n      this.pendingPromise = { resolve, reject };\n      try {\n        this.eventManager = await this.resolver._initialize(this.auth);\n        await this.onExecution();\n        this.eventManager.registerConsumer(this);\n      } catch (e) {\n        this.reject(e);\n      }\n    });\n  }\n  async onAuthEvent(event) {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n    const params = {\n      auth: this.auth,\n      requestUri: urlResponse,\n      sessionId,\n      tenantId: tenantId || void 0,\n      postBody: postBody || void 0,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  onError(error) {\n    this.reject(error);\n  }\n  getIdpTask(type) {\n    switch (type) {\n      case \"signInViaPopup\":\n      case \"signInViaRedirect\":\n        return _signIn;\n      case \"linkViaPopup\":\n      case \"linkViaRedirect\":\n        return _link;\n      case \"reauthViaPopup\":\n      case \"reauthViaRedirect\":\n        return _reauth;\n      default:\n        _fail(\n          this.auth,\n          \"internal-error\"\n          /* AuthErrorCode.INTERNAL_ERROR */\n        );\n    }\n  }\n  resolve(cred) {\n    debugAssert(this.pendingPromise, \"Pending promise was never set\");\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n  reject(error) {\n    debugAssert(this.pendingPromise, \"Pending promise was never set\");\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n  unregisterAndCleanUp() {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n};\nvar _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2e3, 1e4);\nasync function signInWithPopup(auth, provider, resolver) {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(authInternal, \"signInViaPopup\", provider, resolverInternal);\n  return action.executeNotNull();\n}\nasync function reauthenticateWithPopup(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\", provider, resolverInternal, userInternal);\n  return action.executeNotNull();\n}\nasync function linkWithPopup(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(userInternal.auth, \"linkViaPopup\", provider, resolverInternal, userInternal);\n  return action.executeNotNull();\n}\nvar PopupOperation = class _PopupOperation extends AbstractPopupRedirectOperation {\n  constructor(auth, filter, provider, resolver, user) {\n    super(auth, filter, resolver, user);\n    this.provider = provider;\n    this.authWindow = null;\n    this.pollId = null;\n    if (_PopupOperation.currentPopupAction) {\n      _PopupOperation.currentPopupAction.cancel();\n    }\n    _PopupOperation.currentPopupAction = this;\n  }\n  async executeNotNull() {\n    const result = await this.execute();\n    _assert(\n      result,\n      this.auth,\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    return result;\n  }\n  async onExecution() {\n    debugAssert(this.filter.length === 1, \"Popup operations only handle one event\");\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(\n      this.auth,\n      this.provider,\n      this.filter[0],\n      // There's always one, see constructor\n      eventId\n    );\n    this.authWindow.associatedEvent = eventId;\n    this.resolver._originValidation(this.auth).catch((e) => {\n      this.reject(e);\n    });\n    this.resolver._isIframeWebStorageSupported(this.auth, (isSupported) => {\n      if (!isSupported) {\n        this.reject(_createError(\n          this.auth,\n          \"web-storage-unsupported\"\n          /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */\n        ));\n      }\n    });\n    this.pollUserCancellation();\n  }\n  get eventId() {\n    var _a;\n    return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\n  }\n  cancel() {\n    this.reject(_createError(\n      this.auth,\n      \"cancelled-popup-request\"\n      /* AuthErrorCode.EXPIRED_POPUP_REQUEST */\n    ));\n  }\n  cleanUp() {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n    this.authWindow = null;\n    this.pollId = null;\n    _PopupOperation.currentPopupAction = null;\n  }\n  pollUserCancellation() {\n    const poll = () => {\n      var _a, _b;\n      if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\n        this.pollId = window.setTimeout(\n          () => {\n            this.pollId = null;\n            this.reject(_createError(\n              this.auth,\n              \"popup-closed-by-user\"\n              /* AuthErrorCode.POPUP_CLOSED_BY_USER */\n            ));\n          },\n          8e3\n          /* _Timeout.AUTH_EVENT */\n        );\n        return;\n      }\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n    poll();\n  }\n};\nPopupOperation.currentPopupAction = null;\nvar PENDING_REDIRECT_KEY = \"pendingRedirect\";\nvar redirectOutcomeMap = /* @__PURE__ */ new Map();\nvar RedirectAction = class extends AbstractPopupRedirectOperation {\n  constructor(auth, resolver, bypassAuthState = false) {\n    super(auth, [\n      \"signInViaRedirect\",\n      \"linkViaRedirect\",\n      \"reauthViaRedirect\",\n      \"unknown\"\n      /* AuthEventType.UNKNOWN */\n    ], resolver, void 0, bypassAuthState);\n    this.eventId = null;\n  }\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute() {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n    return readyOutcome();\n  }\n  async onAuthEvent(event) {\n    if (event.type === \"signInViaRedirect\") {\n      return super.onAuthEvent(event);\n    } else if (event.type === \"unknown\") {\n      this.resolve(null);\n      return;\n    }\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n  async onExecution() {\n  }\n  cleanUp() {\n  }\n};\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!await persistence._isAvailable()) {\n    return false;\n  }\n  const hasPendingRedirect = await persistence._get(key) === \"true\";\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\nasync function _setPendingRedirectStatus(resolver, auth) {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), \"true\");\n}\nfunction _overrideRedirectResult(auth, result) {\n  redirectOutcomeMap.set(auth._key(), result);\n}\nfunction resolverPersistence(resolver) {\n  return _getInstance(resolver._redirectPersistence);\n}\nfunction pendingRedirectKey(auth) {\n  return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n}\nfunction signInWithRedirect(auth, provider, resolver) {\n  return _signInWithRedirect(auth, provider, resolver);\n}\nasync function _signInWithRedirect(auth, provider, resolver) {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    \"signInViaRedirect\"\n    /* AuthEventType.SIGN_IN_VIA_REDIRECT */\n  );\n}\nfunction reauthenticateWithRedirect(user, provider, resolver) {\n  return _reauthenticateWithRedirect(user, provider, resolver);\n}\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  await userInternal.auth._initializationPromise;\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\", eventId);\n}\nfunction linkWithRedirect(user, provider, resolver) {\n  return _linkWithRedirect(user, provider, resolver);\n}\nasync function _linkWithRedirect(user, provider, resolver) {\n  const userInternal = getModularInstance(user);\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  await userInternal.auth._initializationPromise;\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\", eventId);\n}\nasync function getRedirectResult(auth, resolver) {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n  return result;\n}\nasync function prepareUserForRedirect(user) {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\nvar EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1e3;\nvar AuthEventManager = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.cachedEventUids = /* @__PURE__ */ new Set();\n    this.consumers = /* @__PURE__ */ new Set();\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n    this.lastProcessedEventTime = Date.now();\n  }\n  registerConsumer(authEventConsumer) {\n    this.consumers.add(authEventConsumer);\n    if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n  unregisterConsumer(authEventConsumer) {\n    this.consumers.delete(authEventConsumer);\n  }\n  onEvent(event) {\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n    let handled = false;\n    this.consumers.forEach((consumer) => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      return handled;\n    }\n    this.hasHandledPotentialRedirect = true;\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n    return handled;\n  }\n  sendToConsumer(event, consumer) {\n    var _a;\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split(\"auth/\")[1]) || \"internal-error\";\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n  isEventForConsumer(event, consumer) {\n    const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n  hasEventBeenHandled(event) {\n    if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {\n      this.cachedEventUids.clear();\n    }\n    return this.cachedEventUids.has(eventUid(event));\n  }\n  saveEventToCache(event) {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n};\nfunction eventUid(e) {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter((v) => v).join(\"-\");\n}\nfunction isNullRedirectEvent({ type, error }) {\n  return type === \"unknown\" && (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\"}`;\n}\nfunction isRedirectEvent(event) {\n  switch (event.type) {\n    case \"signInViaRedirect\":\n    case \"linkViaRedirect\":\n    case \"reauthViaRedirect\":\n      return true;\n    case \"unknown\":\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\nasync function _getProjectConfig(auth, request = {}) {\n  return _performApiRequest(auth, \"GET\", \"/v1/projects\", request);\n}\nvar IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nvar HTTP_REGEX = /^https?/;\nasync function _validateOrigin(auth) {\n  if (auth.config.emulator) {\n    return;\n  }\n  const { authorizedDomains } = await _getProjectConfig(auth);\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch (_a) {\n    }\n  }\n  _fail(\n    auth,\n    \"unauthorized-domain\"\n    /* AuthErrorCode.INVALID_ORIGIN */\n  );\n}\nfunction matchDomain(expected) {\n  const currentUrl = _getCurrentUrl();\n  const { protocol, hostname } = new URL(currentUrl);\n  if (expected.startsWith(\"chrome-extension://\")) {\n    const ceUrl = new URL(expected);\n    if (ceUrl.hostname === \"\" && hostname === \"\") {\n      return protocol === \"chrome-extension:\" && expected.replace(\"chrome-extension://\", \"\") === currentUrl.replace(\"chrome-extension://\", \"\");\n    }\n    return protocol === \"chrome-extension:\" && ceUrl.hostname === hostname;\n  }\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    return hostname === expected;\n  }\n  const escapedDomainPattern = expected.replace(/\\./g, \"\\\\.\");\n  const re = new RegExp(\"^(.+\\\\.\" + escapedDomainPattern + \"|\" + escapedDomainPattern + \")$\", \"i\");\n  return re.test(hostname);\n}\nvar NETWORK_TIMEOUT = new Delay(3e4, 6e4);\nfunction resetUnloadedGapiModules() {\n  const beacon = _window().___jsl;\n  if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\n    for (const hint of Object.keys(beacon.H)) {\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\nfunction loadGapi(auth) {\n  return new Promise((resolve, reject) => {\n    var _a, _b, _c;\n    function loadGapiIframe() {\n      resetUnloadedGapiModules();\n      gapi.load(\"gapi.iframes\", {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          resetUnloadedGapiModules();\n          reject(_createError(\n            auth,\n            \"network-request-failed\"\n            /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n          ));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n    if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\n      resolve(gapi.iframes.getContext());\n    } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\n      loadGapiIframe();\n    } else {\n      const cbName = _generateCallbackName(\"iframefcb\");\n      _window()[cbName] = () => {\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          reject(_createError(\n            auth,\n            \"network-request-failed\"\n            /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n          ));\n        }\n      };\n      return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch((e) => reject(e));\n    }\n  }).catch((error) => {\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\nvar cachedGApiLoader = null;\nfunction _loadGapi(auth) {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\nvar PING_TIMEOUT = new Delay(5e3, 15e3);\nvar IFRAME_PATH = \"__/auth/iframe\";\nvar EMULATED_IFRAME_PATH = \"emulator/auth/iframe\";\nvar IFRAME_ATTRIBUTES = {\n  style: {\n    position: \"absolute\",\n    top: \"-100px\",\n    width: \"1px\",\n    height: \"1px\"\n  },\n  \"aria-hidden\": \"true\",\n  tabindex: \"-1\"\n};\nvar EID_FROM_APIHOST = /* @__PURE__ */ new Map([\n  [\"identitytoolkit.googleapis.com\", \"p\"],\n  [\"staging-identitytoolkit.sandbox.googleapis.com\", \"s\"],\n  [\"test-identitytoolkit.sandbox.googleapis.com\", \"t\"]\n  // test\n]);\nfunction getIframeUrl(auth) {\n  const config = auth.config;\n  _assert(\n    config.authDomain,\n    auth,\n    \"auth-domain-config-required\"\n    /* AuthErrorCode.MISSING_AUTH_DOMAIN */\n  );\n  const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n  const params = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(\",\");\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\nasync function _openIframe(auth) {\n  const context = await _loadGapi(auth);\n  const gapi2 = _window().gapi;\n  _assert(\n    gapi2,\n    auth,\n    \"internal-error\"\n    /* AuthErrorCode.INTERNAL_ERROR */\n  );\n  return context.open({\n    where: document.body,\n    url: getIframeUrl(auth),\n    messageHandlersFilter: gapi2.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n    attributes: IFRAME_ATTRIBUTES,\n    dontclear: true\n  }, (iframe) => new Promise(async (resolve, reject) => {\n    await iframe.restyle({\n      // Prevent iframe from closing on mouse out.\n      setHideOnLeave: false\n    });\n    const networkError = _createError(\n      auth,\n      \"network-request-failed\"\n      /* AuthErrorCode.NETWORK_REQUEST_FAILED */\n    );\n    const networkErrorTimer = _window().setTimeout(() => {\n      reject(networkError);\n    }, PING_TIMEOUT.get());\n    function clearTimerAndResolve() {\n      _window().clearTimeout(networkErrorTimer);\n      resolve(iframe);\n    }\n    iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n      reject(networkError);\n    });\n  }));\n}\nvar BASE_POPUP_OPTIONS = {\n  location: \"yes\",\n  resizable: \"yes\",\n  statusbar: \"yes\",\n  toolbar: \"no\"\n};\nvar DEFAULT_WIDTH = 500;\nvar DEFAULT_HEIGHT = 600;\nvar TARGET_BLANK = \"_blank\";\nvar FIREFOX_EMPTY_URL = \"http://localhost\";\nvar AuthPopup = class {\n  constructor(window2) {\n    this.window = window2;\n    this.associatedEvent = null;\n  }\n  close() {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {\n      }\n    }\n  }\n};\nfunction _open(auth, url, name2, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = \"\";\n  const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  });\n  const ua = getUA().toLowerCase();\n  if (name2) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name2;\n  }\n  if (_isFirefox(ua)) {\n    url = url || FIREFOX_EMPTY_URL;\n    options.scrollbars = \"yes\";\n  }\n  const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, \"\");\n  if (_isIOSStandalone(ua) && target !== \"_self\") {\n    openAsNewWindowIOS(url || \"\", target);\n    return new AuthPopup(null);\n  }\n  const newWin = window.open(url || \"\", target, optionsString);\n  _assert(\n    newWin,\n    auth,\n    \"popup-blocked\"\n    /* AuthErrorCode.POPUP_BLOCKED */\n  );\n  try {\n    newWin.focus();\n  } catch (e) {\n  }\n  return new AuthPopup(newWin);\n}\nfunction openAsNewWindowIOS(url, target) {\n  const el = document.createElement(\"a\");\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent(\"MouseEvent\");\n  click.initMouseEvent(\"click\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n  el.dispatchEvent(click);\n}\nvar WIDGET_PATH = \"__/auth/handler\";\nvar EMULATOR_WIDGET_PATH = \"emulator/auth/handler\";\nvar FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent(\"fac\");\nasync function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n  _assert(\n    auth.config.authDomain,\n    auth,\n    \"auth-domain-config-required\"\n    /* AuthErrorCode.MISSING_AUTH_DOMAIN */\n  );\n  _assert(\n    auth.config.apiKey,\n    auth,\n    \"invalid-api-key\"\n    /* AuthErrorCode.INVALID_API_KEY */\n  );\n  const params = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || \"\";\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter((scope) => scope !== \"\");\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(\",\");\n    }\n  }\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n  const paramsDict = params;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === void 0) {\n      delete paramsDict[key];\n    }\n  }\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : \"\";\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;\n}\nfunction getHandlerBase({ config }) {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\nvar WEB_STORAGE_SUPPORT_KEY = \"webStorageSupport\";\nvar BrowserPopupRedirectResolver = class {\n  constructor() {\n    this.eventManagers = {};\n    this.iframes = {};\n    this.originValidationPromises = {};\n    this._redirectPersistence = browserSessionPersistence;\n    this._completeRedirectFn = _getRedirectResult;\n    this._overrideRedirectResult = _overrideRedirectResult;\n  }\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(auth, provider, authType, eventId) {\n    var _a;\n    debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, \"_initialize() not called before _openPopup()\");\n    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n    return _open(auth, url, _generateEventId());\n  }\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n    _setWindowLocation(url);\n    return new Promise(() => {\n    });\n  }\n  _initialize(auth) {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const { manager, promise: promise2 } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise2, \"If manager is not set, promise should be\");\n        return promise2;\n      }\n    }\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = { promise };\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n    return promise;\n  }\n  async initAndGetManager(auth) {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register(\"authEvent\", (iframeEvent) => {\n      _assert(\n        iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent,\n        auth,\n        \"invalid-auth-event\"\n        /* AuthErrorCode.INVALID_AUTH_EVENT */\n      );\n      const handled = manager.onEvent(iframeEvent.authEvent);\n      return {\n        status: handled ? \"ACK\" : \"ERROR\"\n        /* GapiOutcome.ERROR */\n      };\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    this.eventManagers[auth._key()] = { manager };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n  _isIframeWebStorageSupported(auth, cb) {\n    const iframe = this.iframes[auth._key()];\n    iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, (result) => {\n      var _a;\n      const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\n      if (isSupported !== void 0) {\n        cb(!!isSupported);\n      }\n      _fail(\n        auth,\n        \"internal-error\"\n        /* AuthErrorCode.INTERNAL_ERROR */\n      );\n    }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n  }\n  _originValidation(auth) {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n    return this.originValidationPromises[key];\n  }\n  get _shouldInitProactively() {\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n};\nvar browserPopupRedirectResolver = BrowserPopupRedirectResolver;\nvar MultiFactorAssertionImpl = class {\n  constructor(factorId) {\n    this.factorId = factorId;\n  }\n  _process(auth, session, displayName) {\n    switch (session.type) {\n      case \"enroll\":\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case \"signin\":\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail(\"unexpected MultiFactorSessionType\");\n    }\n  }\n};\nvar PhoneMultiFactorAssertionImpl = class _PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n  constructor(credential) {\n    super(\n      \"phone\"\n      /* FactorId.PHONE */\n    );\n    this.credential = credential;\n  }\n  /** @internal */\n  static _fromCredential(credential) {\n    return new _PhoneMultiFactorAssertionImpl(credential);\n  }\n  /** @internal */\n  _finalizeEnroll(auth, idToken, displayName) {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n  /** @internal */\n  _finalizeSignIn(auth, mfaPendingCredential) {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n};\nvar PhoneMultiFactorGenerator = class {\n  constructor() {\n  }\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential) {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n};\nPhoneMultiFactorGenerator.FACTOR_ID = \"phone\";\nvar TotpMultiFactorGenerator = class {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(secret, oneTimePassword) {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(enrollmentId, oneTimePassword) {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n  }\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(session) {\n    var _a;\n    const mfaSession = session;\n    _assert(\n      typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== \"undefined\",\n      \"internal-error\"\n      /* AuthErrorCode.INTERNAL_ERROR */\n    );\n    const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n  }\n};\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\";\nvar TotpMultiFactorAssertionImpl = class _TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n  constructor(otp, enrollmentId, secret) {\n    super(\n      \"totp\"\n      /* FactorId.TOTP */\n    );\n    this.otp = otp;\n    this.enrollmentId = enrollmentId;\n    this.secret = secret;\n  }\n  /** @internal */\n  static _fromSecret(secret, otp) {\n    return new _TotpMultiFactorAssertionImpl(otp, void 0, secret);\n  }\n  /** @internal */\n  static _fromEnrollmentId(enrollmentId, otp) {\n    return new _TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n  /** @internal */\n  async _finalizeEnroll(auth, idToken, displayName) {\n    _assert(\n      typeof this.secret !== \"undefined\",\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n  /** @internal */\n  async _finalizeSignIn(auth, mfaPendingCredential) {\n    _assert(\n      this.enrollmentId !== void 0 && this.otp !== void 0,\n      auth,\n      \"argument-error\"\n      /* AuthErrorCode.ARGUMENT_ERROR */\n    );\n    const totpVerificationInfo = { verificationCode: this.otp };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n};\nvar TotpSecret = class _TotpSecret {\n  // The public members are declared outside the constructor so the docs can be generated.\n  constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n    this.sessionInfo = sessionInfo;\n    this.auth = auth;\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n    return new _TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n  }\n  /** @internal */\n  _makeTotpVerificationInfo(otp) {\n    return { sessionInfo: this.sessionInfo, verificationCode: otp };\n  }\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName, issuer) {\n    var _a;\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || \"unknownuser\";\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n};\nfunction _isEmptyString(input) {\n  return typeof input === \"undefined\" || (input === null || input === void 0 ? void 0 : input.length) === 0;\n}\nvar name = \"@firebase/auth\";\nvar version = \"1.4.0\";\nvar AuthInterop = class {\n  constructor(auth) {\n    this.auth = auth;\n    this.internalListeners = /* @__PURE__ */ new Map();\n  }\n  getUid() {\n    var _a;\n    this.assertAuthConfigured();\n    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n  }\n  async getToken(forceRefresh) {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n  addAuthTokenListener(listener) {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n    const unsubscribe = this.auth.onIdTokenChanged((user) => {\n      listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n  removeAuthTokenListener(listener) {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n  assertAuthConfigured() {\n    _assert(\n      this.auth._initializationPromise,\n      \"dependent-sdk-initialized-before-auth\"\n      /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */\n    );\n  }\n  updateProactiveRefresh() {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n};\nfunction getVersionForPlatform(clientPlatform) {\n  switch (clientPlatform) {\n    case \"Node\":\n      return \"node\";\n    case \"ReactNative\":\n      return \"rn\";\n    case \"Worker\":\n      return \"webworker\";\n    case \"Cordova\":\n      return \"cordova\";\n    default:\n      return void 0;\n  }\n}\nfunction registerAuth(clientPlatform) {\n  _registerComponent(new Component(\n    \"auth\",\n    (container, { options: deps }) => {\n      const app = container.getProvider(\"app\").getImmediate();\n      const heartbeatServiceProvider = container.getProvider(\"heartbeat\");\n      const appCheckServiceProvider = container.getProvider(\"app-check-internal\");\n      const { apiKey, authDomain } = app.options;\n      _assert(apiKey && !apiKey.includes(\":\"), \"invalid-api-key\", { appName: app.name });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\",\n        tokenApiHost: \"securetoken.googleapis.com\",\n        apiScheme: \"https\",\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    },\n    \"PUBLIC\"\n    /* ComponentType.PUBLIC */\n  ).setInstantiationMode(\n    \"EXPLICIT\"\n    /* InstantiationMode.EXPLICIT */\n  ).setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n    const authInternalProvider = container.getProvider(\n      \"auth-internal\"\n      /* _ComponentName.AUTH_INTERNAL */\n    );\n    authInternalProvider.initialize();\n  }));\n  _registerComponent(new Component(\n    \"auth-internal\",\n    (container) => {\n      const auth = _castAuth(container.getProvider(\n        \"auth\"\n        /* _ComponentName.AUTH */\n      ).getImmediate());\n      return ((auth2) => new AuthInterop(auth2))(auth);\n    },\n    \"PRIVATE\"\n    /* ComponentType.PRIVATE */\n  ).setInstantiationMode(\n    \"EXPLICIT\"\n    /* InstantiationMode.EXPLICIT */\n  ));\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  registerVersion(name, version, \"esm2017\");\n}\nvar DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nvar authIdTokenMaxAge = getExperimentalSetting(\"authIdTokenMaxAge\") || DEFAULT_ID_TOKEN_MAX_AGE;\nvar lastPostedIdToken = null;\nvar mintCookieFactory = (url) => async (user) => {\n  const idTokenResult = user && await user.getIdTokenResult();\n  const idTokenAge = idTokenResult && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1e3;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? \"POST\" : \"DELETE\",\n    headers: idToken ? {\n      \"Authorization\": `Bearer ${idToken}`\n    } : {}\n  });\n};\nfunction getAuth(app = getApp()) {\n  const provider = _getProvider(app, \"auth\");\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [\n      indexedDBLocalPersistence,\n      browserLocalPersistence,\n      browserSessionPersistence\n    ]\n  });\n  const authTokenSyncUrl = getExperimentalSetting(\"authTokenSyncURL\");\n  if (authTokenSyncUrl) {\n    const mintCookie = mintCookieFactory(authTokenSyncUrl);\n    beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n    onIdTokenChanged(auth, (user) => mintCookie(user));\n  }\n  const authEmulatorHost = getDefaultEmulatorHost(\"auth\");\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  }\n  return auth;\n}\nregisterAuth(\n  \"Browser\"\n  /* ClientPlatform.BROWSER */\n);\n\nexport {\n  FactorId,\n  ProviderId,\n  SignInMethod,\n  OperationType,\n  ActionCodeOperation,\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY,\n  getIdToken,\n  getIdTokenResult,\n  reload,\n  inMemoryPersistence,\n  initializeAuth,\n  connectAuthEmulator,\n  AuthCredential,\n  EmailAuthCredential,\n  OAuthCredential,\n  PhoneAuthCredential,\n  ActionCodeURL,\n  parseActionCodeURL,\n  EmailAuthProvider,\n  OAuthProvider,\n  FacebookAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  SAMLAuthProvider,\n  TwitterAuthProvider,\n  signInAnonymously,\n  unlink,\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCustomToken,\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink,\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail,\n  updateProfile,\n  updateEmail,\n  updatePassword,\n  getAdditionalUserInfo,\n  setPersistence,\n  initializeRecaptchaConfig,\n  validatePassword,\n  onIdTokenChanged,\n  beforeAuthStateChanged,\n  onAuthStateChanged,\n  useDeviceLanguage,\n  updateCurrentUser,\n  signOut,\n  revokeAccessToken,\n  deleteUser,\n  getMultiFactorResolver,\n  multiFactor,\n  browserLocalPersistence,\n  browserSessionPersistence,\n  indexedDBLocalPersistence,\n  RecaptchaVerifier,\n  signInWithPhoneNumber,\n  linkWithPhoneNumber,\n  reauthenticateWithPhoneNumber,\n  updatePhoneNumber,\n  PhoneAuthProvider,\n  signInWithPopup,\n  reauthenticateWithPopup,\n  linkWithPopup,\n  signInWithRedirect,\n  reauthenticateWithRedirect,\n  linkWithRedirect,\n  getRedirectResult,\n  browserPopupRedirectResolver,\n  PhoneMultiFactorGenerator,\n  TotpMultiFactorGenerator,\n  TotpSecret,\n  getAuth\n};\n/*! Bundled license information:\n\n@firebase/auth/dist/esm2017/index-61e5ac61.js:\n  (**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n\n@firebase/auth/dist/esm2017/index-61e5ac61.js:\n  (**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n\n@firebase/auth/dist/esm2017/index-61e5ac61.js:\n  (**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n  (**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *)\n*/\n//# sourceMappingURL=chunk-5MUGQBSR.js.map\n",
      "start": 1701867792435,
      "end": 1701867792438,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
