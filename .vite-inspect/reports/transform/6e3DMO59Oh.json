{
  "resolvedId": "C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/node_modules/.vite/deps/chunk-D3SRKI3F.js?v=3c106fdb",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "import {\n  getOverlayAlpha_default\n} from \"./chunk-FMFFUJ5P.js\";\nimport {\n  ThemeProvider_default,\n  _objectWithoutPropertiesLoose,\n  createBreakpoints,\n  createCssVarsProvider,\n  createGetCssVar,\n  createSpacing,\n  createTheme_default,\n  createTypography,\n  deepmerge,\n  defaultSxConfig_default,\n  identifier_default,\n  init_createTheme,\n  init_createTransitions,\n  init_createTypography,\n  init_esm,\n  init_esm2,\n  init_identifier,\n  init_objectWithoutPropertiesLoose,\n  init_styled,\n  init_useThemeProps,\n  prepareCssVars_default,\n  private_safeAlpha,\n  private_safeColorChannel,\n  private_safeDarken,\n  private_safeEmphasize,\n  private_safeLighten,\n  require_prop_types,\n  styleFunctionSx_default\n} from \"./chunk-6ZT6S2Z7.js\";\nimport {\n  require_jsx_runtime\n} from \"./chunk-U73TBONF.js\";\nimport {\n  _extends,\n  init_extends\n} from \"./chunk-HMTWVGVS.js\";\nimport {\n  require_react\n} from \"./chunk-ZGRSIX2Q.js\";\nimport {\n  __toESM\n} from \"./chunk-ROME4SDB.js\";\n\n// node_modules/@mui/material/styles/index.js\ninit_esm();\ninit_identifier();\n\n// node_modules/@mui/material/styles/adaptV4Theme.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\ninit_esm2();\nvar _excluded = [\"defaultProps\", \"mixins\", \"overrides\", \"palette\", \"props\", \"styleOverrides\"];\nvar _excluded2 = [\"type\", \"mode\"];\nfunction adaptV4Theme(inputTheme) {\n  if (true) {\n    console.warn([\"MUI: adaptV4Theme() is deprecated.\", \"Follow the upgrade guide on https://mui.com/r/migration-v4#theme.\"].join(\"\\n\"));\n  }\n  const {\n    defaultProps = {},\n    mixins = {},\n    overrides = {},\n    palette = {},\n    props = {},\n    styleOverrides = {}\n  } = inputTheme, other = _objectWithoutPropertiesLoose(inputTheme, _excluded);\n  const theme = _extends({}, other, {\n    components: {}\n  });\n  Object.keys(defaultProps).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.defaultProps = defaultProps[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(props).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.defaultProps = props[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(styleOverrides).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.styleOverrides = styleOverrides[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(overrides).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.styleOverrides = overrides[component];\n    theme.components[component] = componentValue;\n  });\n  theme.spacing = createSpacing(inputTheme.spacing);\n  const breakpoints = createBreakpoints(inputTheme.breakpoints || {});\n  const spacing = theme.spacing;\n  theme.mixins = _extends({\n    gutters: (styles = {}) => {\n      return _extends({\n        paddingLeft: spacing(2),\n        paddingRight: spacing(2)\n      }, styles, {\n        [breakpoints.up(\"sm\")]: _extends({\n          paddingLeft: spacing(3),\n          paddingRight: spacing(3)\n        }, styles[breakpoints.up(\"sm\")])\n      });\n    }\n  }, mixins);\n  const {\n    type: typeInput,\n    mode: modeInput\n  } = palette, paletteRest = _objectWithoutPropertiesLoose(palette, _excluded2);\n  const finalMode = modeInput || typeInput || \"light\";\n  theme.palette = _extends({\n    // theme.palette.text.hint\n    text: {\n      hint: finalMode === \"dark\" ? \"rgba(255, 255, 255, 0.5)\" : \"rgba(0, 0, 0, 0.38)\"\n    },\n    mode: finalMode,\n    type: finalMode\n  }, paletteRest);\n  return theme;\n}\n\n// node_modules/@mui/material/styles/index.js\ninit_esm2();\ninit_createTheme();\n\n// node_modules/@mui/material/styles/createMuiStrictModeTheme.js\ninit_esm();\ninit_createTheme();\nfunction createMuiStrictModeTheme(options, ...args) {\n  return createTheme_default(deepmerge({\n    unstable_strictMode: true\n  }, options), ...args);\n}\n\n// node_modules/@mui/material/styles/createStyles.js\nvar warnedOnce = false;\nfunction createStyles(styles) {\n  if (!warnedOnce) {\n    console.warn([\"MUI: createStyles from @mui/material/styles is deprecated.\", \"Please use @mui/styles/createStyles\"].join(\"\\n\"));\n    warnedOnce = true;\n  }\n  return styles;\n}\n\n// node_modules/@mui/material/styles/cssUtils.js\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || \"\";\n}\nfunction toUnitless(length) {\n  return parseFloat(length);\n}\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n    if (fromUnit === toUnit) {\n      return length;\n    }\n    let pxLength = toUnitless(length);\n    if (fromUnit !== \"px\") {\n      if (fromUnit === \"em\") {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === \"rem\") {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n    let outputLength = pxLength;\n    if (toUnit !== \"px\") {\n      if (toUnit === \"em\") {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === \"rem\") {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = \"rem\",\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach((breakpoint) => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`\n    };\n  });\n  return output;\n}\n\n// node_modules/@mui/material/styles/responsiveFontSizes.js\ninit_extends();\ninit_esm();\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = [\"sm\", \"md\", \"lg\"],\n    disableAlign = false,\n    factor = 2,\n    variants = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"subtitle1\", \"subtitle2\", \"body1\", \"body2\", \"caption\", \"button\", \"overline\"]\n  } = options;\n  const theme = _extends({}, themeInput);\n  theme.typography = _extends({}, theme.typography);\n  const typography = theme.typography;\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);\n  variants.forEach((variant) => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, \"rem\"));\n    if (remFontSize <= 1) {\n      return;\n    }\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(true ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : formatMuiErrorMessage(6));\n    }\n    if (!isUnitless(lineHeight)) {\n      lineHeight = parseFloat(convert(lineHeight, \"rem\")) / parseFloat(remFontSize);\n    }\n    let transform = null;\n    if (!disableAlign) {\n      transform = (value) => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: \"fontSize\",\n      min: minFontSize,\n      max: maxFontSize,\n      unit: \"rem\",\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}\n\n// node_modules/@mui/material/styles/index.js\ninit_createTransitions();\ninit_useThemeProps();\ninit_styled();\ninit_styled();\n\n// node_modules/@mui/material/styles/ThemeProvider.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React = __toESM(require_react());\nvar import_prop_types = __toESM(require_prop_types());\ninit_esm2();\ninit_identifier();\nvar import_jsx_runtime = __toESM(require_jsx_runtime());\nvar _excluded3 = [\"theme\"];\nfunction ThemeProvider(_ref) {\n  let {\n    theme: themeInput\n  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded3);\n  const scopedTheme = themeInput[identifier_default];\n  return (0, import_jsx_runtime.jsx)(ThemeProvider_default, _extends({}, props, {\n    themeId: scopedTheme ? identifier_default : void 0,\n    theme: scopedTheme || themeInput\n  }));\n}\ntrue ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: import_prop_types.default.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.func]).isRequired\n} : void 0;\n\n// node_modules/@mui/material/styles/index.js\ninit_esm2();\n\n// node_modules/@mui/material/styles/makeStyles.js\ninit_esm();\nfunction makeStyles() {\n  throw new Error(true ? `MUI: makeStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(14));\n}\n\n// node_modules/@mui/material/styles/withStyles.js\ninit_esm();\nfunction withStyles() {\n  throw new Error(true ? `MUI: withStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(15));\n}\n\n// node_modules/@mui/material/styles/withTheme.js\ninit_esm();\nfunction withTheme() {\n  throw new Error(true ? `MUI: withTheme is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(16));\n}\n\n// node_modules/@mui/material/styles/CssVarsProvider.js\ninit_extends();\ninit_esm2();\n\n// node_modules/@mui/material/styles/experimental_extendTheme.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\ninit_esm();\ninit_esm2();\n\n// node_modules/@mui/material/styles/shouldSkipGeneratingVar.js\nfunction shouldSkipGeneratingVar(keys) {\n  var _keys$;\n  return !!keys[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig\n  keys[0] === \"palette\" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));\n}\n\n// node_modules/@mui/material/styles/experimental_extendTheme.js\ninit_createTheme();\nvar _excluded4 = [\"colorSchemes\", \"cssVarPrefix\", \"shouldSkipGeneratingVar\"];\nvar _excluded22 = [\"palette\"];\nvar defaultDarkOverlays = [...Array(25)].map((_, index) => {\n  if (index === 0) {\n    return void 0;\n  }\n  const overlay = getOverlayAlpha_default(index);\n  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;\n});\nfunction assignNode(obj, keys) {\n  keys.forEach((k) => {\n    if (!obj[k]) {\n      obj[k] = {};\n    }\n  });\n}\nfunction setColor(obj, key, defaultValue) {\n  if (!obj[key] && defaultValue) {\n    obj[key] = defaultValue;\n  }\n}\nfunction setColorChannel(obj, key) {\n  if (!(`${key}Channel` in obj)) {\n    obj[`${key}Channel`] = private_safeColorChannel(obj[key], `MUI: Can't create \\`palette.${key}Channel\\` because \\`palette.${key}\\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\nTo suppress this warning, you need to explicitly provide the \\`palette.${key}Channel\\` as a string (in rgb format, e.g. \"12 12 12\") or undefined if you want to remove the channel token.`);\n  }\n}\nvar silent = (fn) => {\n  try {\n    return fn();\n  } catch (error) {\n  }\n  return void 0;\n};\nvar createGetCssVar2 = (cssVarPrefix = \"mui\") => createGetCssVar(cssVarPrefix);\nfunction extendTheme(options = {}, ...args) {\n  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;\n  const {\n    colorSchemes: colorSchemesInput = {},\n    cssVarPrefix = \"mui\",\n    shouldSkipGeneratingVar: shouldSkipGeneratingVar2 = shouldSkipGeneratingVar\n  } = options, input = _objectWithoutPropertiesLoose(options, _excluded4);\n  const getCssVar = createGetCssVar2(cssVarPrefix);\n  const _createThemeWithoutVa = createTheme_default(_extends({}, input, colorSchemesInput.light && {\n    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette\n  })), {\n    palette: lightPalette\n  } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded22);\n  const {\n    palette: darkPalette\n  } = createTheme_default({\n    palette: _extends({\n      mode: \"dark\"\n    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)\n  });\n  let theme = _extends({}, muiTheme, {\n    cssVarPrefix,\n    getCssVar,\n    colorSchemes: _extends({}, colorSchemesInput, {\n      light: _extends({}, colorSchemesInput.light, {\n        palette: lightPalette,\n        opacity: _extends({\n          inputPlaceholder: 0.42,\n          inputUnderline: 0.42,\n          switchTrackDisabled: 0.12,\n          switchTrack: 0.38\n        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),\n        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []\n      }),\n      dark: _extends({}, colorSchemesInput.dark, {\n        palette: darkPalette,\n        opacity: _extends({\n          inputPlaceholder: 0.5,\n          inputUnderline: 0.7,\n          switchTrackDisabled: 0.2,\n          switchTrack: 0.3\n        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),\n        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays\n      })\n    })\n  });\n  Object.keys(theme.colorSchemes).forEach((key) => {\n    const palette = theme.colorSchemes[key].palette;\n    const setCssVarColor = (cssVar) => {\n      const tokens = cssVar.split(\"-\");\n      const color = tokens[1];\n      const colorToken = tokens[2];\n      return getCssVar(cssVar, palette[color][colorToken]);\n    };\n    if (key === \"light\") {\n      setColor(palette.common, \"background\", \"#fff\");\n      setColor(palette.common, \"onBackground\", \"#000\");\n    } else {\n      setColor(palette.common, \"background\", \"#000\");\n      setColor(palette.common, \"onBackground\", \"#fff\");\n    }\n    assignNode(palette, [\"Alert\", \"AppBar\", \"Avatar\", \"Button\", \"Chip\", \"FilledInput\", \"LinearProgress\", \"Skeleton\", \"Slider\", \"SnackbarContent\", \"SpeedDialAction\", \"StepConnector\", \"StepContent\", \"Switch\", \"TableCell\", \"Tooltip\"]);\n    if (key === \"light\") {\n      setColor(palette.Alert, \"errorColor\", private_safeDarken(palette.error.light, 0.6));\n      setColor(palette.Alert, \"infoColor\", private_safeDarken(palette.info.light, 0.6));\n      setColor(palette.Alert, \"successColor\", private_safeDarken(palette.success.light, 0.6));\n      setColor(palette.Alert, \"warningColor\", private_safeDarken(palette.warning.light, 0.6));\n      setColor(palette.Alert, \"errorFilledBg\", setCssVarColor(\"palette-error-main\"));\n      setColor(palette.Alert, \"infoFilledBg\", setCssVarColor(\"palette-info-main\"));\n      setColor(palette.Alert, \"successFilledBg\", setCssVarColor(\"palette-success-main\"));\n      setColor(palette.Alert, \"warningFilledBg\", setCssVarColor(\"palette-warning-main\"));\n      setColor(palette.Alert, \"errorFilledColor\", silent(() => lightPalette.getContrastText(palette.error.main)));\n      setColor(palette.Alert, \"infoFilledColor\", silent(() => lightPalette.getContrastText(palette.info.main)));\n      setColor(palette.Alert, \"successFilledColor\", silent(() => lightPalette.getContrastText(palette.success.main)));\n      setColor(palette.Alert, \"warningFilledColor\", silent(() => lightPalette.getContrastText(palette.warning.main)));\n      setColor(palette.Alert, \"errorStandardBg\", private_safeLighten(palette.error.light, 0.9));\n      setColor(palette.Alert, \"infoStandardBg\", private_safeLighten(palette.info.light, 0.9));\n      setColor(palette.Alert, \"successStandardBg\", private_safeLighten(palette.success.light, 0.9));\n      setColor(palette.Alert, \"warningStandardBg\", private_safeLighten(palette.warning.light, 0.9));\n      setColor(palette.Alert, \"errorIconColor\", setCssVarColor(\"palette-error-main\"));\n      setColor(palette.Alert, \"infoIconColor\", setCssVarColor(\"palette-info-main\"));\n      setColor(palette.Alert, \"successIconColor\", setCssVarColor(\"palette-success-main\"));\n      setColor(palette.Alert, \"warningIconColor\", setCssVarColor(\"palette-warning-main\"));\n      setColor(palette.AppBar, \"defaultBg\", setCssVarColor(\"palette-grey-100\"));\n      setColor(palette.Avatar, \"defaultBg\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.Button, \"inheritContainedBg\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.Button, \"inheritContainedHoverBg\", setCssVarColor(\"palette-grey-A100\"));\n      setColor(palette.Chip, \"defaultBorder\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.Chip, \"defaultAvatarColor\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.Chip, \"defaultIconColor\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.FilledInput, \"bg\", \"rgba(0, 0, 0, 0.06)\");\n      setColor(palette.FilledInput, \"hoverBg\", \"rgba(0, 0, 0, 0.09)\");\n      setColor(palette.FilledInput, \"disabledBg\", \"rgba(0, 0, 0, 0.12)\");\n      setColor(palette.LinearProgress, \"primaryBg\", private_safeLighten(palette.primary.main, 0.62));\n      setColor(palette.LinearProgress, \"secondaryBg\", private_safeLighten(palette.secondary.main, 0.62));\n      setColor(palette.LinearProgress, \"errorBg\", private_safeLighten(palette.error.main, 0.62));\n      setColor(palette.LinearProgress, \"infoBg\", private_safeLighten(palette.info.main, 0.62));\n      setColor(palette.LinearProgress, \"successBg\", private_safeLighten(palette.success.main, 0.62));\n      setColor(palette.LinearProgress, \"warningBg\", private_safeLighten(palette.warning.main, 0.62));\n      setColor(palette.Skeleton, \"bg\", `rgba(${setCssVarColor(\"palette-text-primaryChannel\")} / 0.11)`);\n      setColor(palette.Slider, \"primaryTrack\", private_safeLighten(palette.primary.main, 0.62));\n      setColor(palette.Slider, \"secondaryTrack\", private_safeLighten(palette.secondary.main, 0.62));\n      setColor(palette.Slider, \"errorTrack\", private_safeLighten(palette.error.main, 0.62));\n      setColor(palette.Slider, \"infoTrack\", private_safeLighten(palette.info.main, 0.62));\n      setColor(palette.Slider, \"successTrack\", private_safeLighten(palette.success.main, 0.62));\n      setColor(palette.Slider, \"warningTrack\", private_safeLighten(palette.warning.main, 0.62));\n      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.8);\n      setColor(palette.SnackbarContent, \"bg\", snackbarContentBackground);\n      setColor(palette.SnackbarContent, \"color\", silent(() => lightPalette.getContrastText(snackbarContentBackground)));\n      setColor(palette.SpeedDialAction, \"fabHoverBg\", private_safeEmphasize(palette.background.paper, 0.15));\n      setColor(palette.StepConnector, \"border\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.StepContent, \"border\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.Switch, \"defaultColor\", setCssVarColor(\"palette-common-white\"));\n      setColor(palette.Switch, \"defaultDisabledColor\", setCssVarColor(\"palette-grey-100\"));\n      setColor(palette.Switch, \"primaryDisabledColor\", private_safeLighten(palette.primary.main, 0.62));\n      setColor(palette.Switch, \"secondaryDisabledColor\", private_safeLighten(palette.secondary.main, 0.62));\n      setColor(palette.Switch, \"errorDisabledColor\", private_safeLighten(palette.error.main, 0.62));\n      setColor(palette.Switch, \"infoDisabledColor\", private_safeLighten(palette.info.main, 0.62));\n      setColor(palette.Switch, \"successDisabledColor\", private_safeLighten(palette.success.main, 0.62));\n      setColor(palette.Switch, \"warningDisabledColor\", private_safeLighten(palette.warning.main, 0.62));\n      setColor(palette.TableCell, \"border\", private_safeLighten(private_safeAlpha(palette.divider, 1), 0.88));\n      setColor(palette.Tooltip, \"bg\", private_safeAlpha(palette.grey[700], 0.92));\n    } else {\n      setColor(palette.Alert, \"errorColor\", private_safeLighten(palette.error.light, 0.6));\n      setColor(palette.Alert, \"infoColor\", private_safeLighten(palette.info.light, 0.6));\n      setColor(palette.Alert, \"successColor\", private_safeLighten(palette.success.light, 0.6));\n      setColor(palette.Alert, \"warningColor\", private_safeLighten(palette.warning.light, 0.6));\n      setColor(palette.Alert, \"errorFilledBg\", setCssVarColor(\"palette-error-dark\"));\n      setColor(palette.Alert, \"infoFilledBg\", setCssVarColor(\"palette-info-dark\"));\n      setColor(palette.Alert, \"successFilledBg\", setCssVarColor(\"palette-success-dark\"));\n      setColor(palette.Alert, \"warningFilledBg\", setCssVarColor(\"palette-warning-dark\"));\n      setColor(palette.Alert, \"errorFilledColor\", silent(() => darkPalette.getContrastText(palette.error.dark)));\n      setColor(palette.Alert, \"infoFilledColor\", silent(() => darkPalette.getContrastText(palette.info.dark)));\n      setColor(palette.Alert, \"successFilledColor\", silent(() => darkPalette.getContrastText(palette.success.dark)));\n      setColor(palette.Alert, \"warningFilledColor\", silent(() => darkPalette.getContrastText(palette.warning.dark)));\n      setColor(palette.Alert, \"errorStandardBg\", private_safeDarken(palette.error.light, 0.9));\n      setColor(palette.Alert, \"infoStandardBg\", private_safeDarken(palette.info.light, 0.9));\n      setColor(palette.Alert, \"successStandardBg\", private_safeDarken(palette.success.light, 0.9));\n      setColor(palette.Alert, \"warningStandardBg\", private_safeDarken(palette.warning.light, 0.9));\n      setColor(palette.Alert, \"errorIconColor\", setCssVarColor(\"palette-error-main\"));\n      setColor(palette.Alert, \"infoIconColor\", setCssVarColor(\"palette-info-main\"));\n      setColor(palette.Alert, \"successIconColor\", setCssVarColor(\"palette-success-main\"));\n      setColor(palette.Alert, \"warningIconColor\", setCssVarColor(\"palette-warning-main\"));\n      setColor(palette.AppBar, \"defaultBg\", setCssVarColor(\"palette-grey-900\"));\n      setColor(palette.AppBar, \"darkBg\", setCssVarColor(\"palette-background-paper\"));\n      setColor(palette.AppBar, \"darkColor\", setCssVarColor(\"palette-text-primary\"));\n      setColor(palette.Avatar, \"defaultBg\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.Button, \"inheritContainedBg\", setCssVarColor(\"palette-grey-800\"));\n      setColor(palette.Button, \"inheritContainedHoverBg\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.Chip, \"defaultBorder\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.Chip, \"defaultAvatarColor\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.Chip, \"defaultIconColor\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.FilledInput, \"bg\", \"rgba(255, 255, 255, 0.09)\");\n      setColor(palette.FilledInput, \"hoverBg\", \"rgba(255, 255, 255, 0.13)\");\n      setColor(palette.FilledInput, \"disabledBg\", \"rgba(255, 255, 255, 0.12)\");\n      setColor(palette.LinearProgress, \"primaryBg\", private_safeDarken(palette.primary.main, 0.5));\n      setColor(palette.LinearProgress, \"secondaryBg\", private_safeDarken(palette.secondary.main, 0.5));\n      setColor(palette.LinearProgress, \"errorBg\", private_safeDarken(palette.error.main, 0.5));\n      setColor(palette.LinearProgress, \"infoBg\", private_safeDarken(palette.info.main, 0.5));\n      setColor(palette.LinearProgress, \"successBg\", private_safeDarken(palette.success.main, 0.5));\n      setColor(palette.LinearProgress, \"warningBg\", private_safeDarken(palette.warning.main, 0.5));\n      setColor(palette.Skeleton, \"bg\", `rgba(${setCssVarColor(\"palette-text-primaryChannel\")} / 0.13)`);\n      setColor(palette.Slider, \"primaryTrack\", private_safeDarken(palette.primary.main, 0.5));\n      setColor(palette.Slider, \"secondaryTrack\", private_safeDarken(palette.secondary.main, 0.5));\n      setColor(palette.Slider, \"errorTrack\", private_safeDarken(palette.error.main, 0.5));\n      setColor(palette.Slider, \"infoTrack\", private_safeDarken(palette.info.main, 0.5));\n      setColor(palette.Slider, \"successTrack\", private_safeDarken(palette.success.main, 0.5));\n      setColor(palette.Slider, \"warningTrack\", private_safeDarken(palette.warning.main, 0.5));\n      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.98);\n      setColor(palette.SnackbarContent, \"bg\", snackbarContentBackground);\n      setColor(palette.SnackbarContent, \"color\", silent(() => darkPalette.getContrastText(snackbarContentBackground)));\n      setColor(palette.SpeedDialAction, \"fabHoverBg\", private_safeEmphasize(palette.background.paper, 0.15));\n      setColor(palette.StepConnector, \"border\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.StepContent, \"border\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.Switch, \"defaultColor\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.Switch, \"defaultDisabledColor\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.Switch, \"primaryDisabledColor\", private_safeDarken(palette.primary.main, 0.55));\n      setColor(palette.Switch, \"secondaryDisabledColor\", private_safeDarken(palette.secondary.main, 0.55));\n      setColor(palette.Switch, \"errorDisabledColor\", private_safeDarken(palette.error.main, 0.55));\n      setColor(palette.Switch, \"infoDisabledColor\", private_safeDarken(palette.info.main, 0.55));\n      setColor(palette.Switch, \"successDisabledColor\", private_safeDarken(palette.success.main, 0.55));\n      setColor(palette.Switch, \"warningDisabledColor\", private_safeDarken(palette.warning.main, 0.55));\n      setColor(palette.TableCell, \"border\", private_safeDarken(private_safeAlpha(palette.divider, 1), 0.68));\n      setColor(palette.Tooltip, \"bg\", private_safeAlpha(palette.grey[700], 0.92));\n    }\n    setColorChannel(palette.background, \"default\");\n    setColorChannel(palette.common, \"background\");\n    setColorChannel(palette.common, \"onBackground\");\n    setColorChannel(palette, \"divider\");\n    Object.keys(palette).forEach((color) => {\n      const colors = palette[color];\n      if (colors && typeof colors === \"object\") {\n        if (colors.main) {\n          setColor(palette[color], \"mainChannel\", private_safeColorChannel(colors.main));\n        }\n        if (colors.light) {\n          setColor(palette[color], \"lightChannel\", private_safeColorChannel(colors.light));\n        }\n        if (colors.dark) {\n          setColor(palette[color], \"darkChannel\", private_safeColorChannel(colors.dark));\n        }\n        if (colors.contrastText) {\n          setColor(palette[color], \"contrastTextChannel\", private_safeColorChannel(colors.contrastText));\n        }\n        if (color === \"text\") {\n          setColorChannel(palette[color], \"primary\");\n          setColorChannel(palette[color], \"secondary\");\n        }\n        if (color === \"action\") {\n          if (colors.active) {\n            setColorChannel(palette[color], \"active\");\n          }\n          if (colors.selected) {\n            setColorChannel(palette[color], \"selected\");\n          }\n        }\n      }\n    });\n  });\n  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);\n  const parserConfig = {\n    prefix: cssVarPrefix,\n    shouldSkipGeneratingVar: shouldSkipGeneratingVar2\n  };\n  const {\n    vars: themeVars,\n    generateCssVars\n  } = prepareCssVars_default(theme, parserConfig);\n  theme.vars = themeVars;\n  theme.generateCssVars = generateCssVars;\n  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar2;\n  theme.unstable_sxConfig = _extends({}, defaultSxConfig_default, input == null ? void 0 : input.unstable_sxConfig);\n  theme.unstable_sx = function sx(props) {\n    return styleFunctionSx_default({\n      sx: props,\n      theme: this\n    });\n  };\n  return theme;\n}\n\n// node_modules/@mui/material/styles/CssVarsProvider.js\ninit_createTypography();\n\n// node_modules/@mui/material/styles/excludeVariablesFromRoot.js\nvar excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : \"\"}overlays-${index + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : \"\"}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : \"\"}palette-AppBar-darkColor`];\nvar excludeVariablesFromRoot_default = excludeVariablesFromRoot;\n\n// node_modules/@mui/material/styles/CssVarsProvider.js\ninit_identifier();\nvar defaultTheme = extendTheme();\nvar {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript\n} = createCssVarsProvider({\n  themeId: identifier_default,\n  theme: defaultTheme,\n  attribute: \"data-mui-color-scheme\",\n  modeStorageKey: \"mui-mode\",\n  colorSchemeStorageKey: \"mui-color-scheme\",\n  defaultColorScheme: {\n    light: \"light\",\n    dark: \"dark\"\n  },\n  resolveTheme: (theme) => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx_default({\n        sx: props,\n        theme: this\n      });\n    };\n    return newTheme;\n  },\n  excludeVariablesFromRoot: excludeVariablesFromRoot_default\n});\n\n// node_modules/@mui/material/styles/index.js\ninit_createTypography();\nfunction experimental_sx() {\n  throw new Error(true ? `MUI: The \\`experimental_sx\\` has been moved to \\`theme.unstable_sx\\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : formatMuiErrorMessage(20));\n}\n\nexport {\n  adaptV4Theme,\n  createMuiStrictModeTheme,\n  createStyles,\n  getUnit,\n  toUnitless,\n  responsiveFontSizes,\n  ThemeProvider,\n  makeStyles,\n  withStyles,\n  withTheme,\n  shouldSkipGeneratingVar,\n  extendTheme,\n  excludeVariablesFromRoot_default,\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript,\n  experimental_sx\n};\n//# sourceMappingURL=chunk-D3SRKI3F.js.map\n",
      "start": 1701766112087,
      "end": 1701766112172,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:react-swc",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1701766112172,
      "end": 1701766112172,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import {\n  getOverlayAlpha_default\n} from \"/node_modules/.vite/deps/chunk-FMFFUJ5P.js?v=3c106fdb\";\nimport {\n  ThemeProvider_default,\n  _objectWithoutPropertiesLoose,\n  createBreakpoints,\n  createCssVarsProvider,\n  createGetCssVar,\n  createSpacing,\n  createTheme_default,\n  createTypography,\n  deepmerge,\n  defaultSxConfig_default,\n  identifier_default,\n  init_createTheme,\n  init_createTransitions,\n  init_createTypography,\n  init_esm,\n  init_esm2,\n  init_identifier,\n  init_objectWithoutPropertiesLoose,\n  init_styled,\n  init_useThemeProps,\n  prepareCssVars_default,\n  private_safeAlpha,\n  private_safeColorChannel,\n  private_safeDarken,\n  private_safeEmphasize,\n  private_safeLighten,\n  require_prop_types,\n  styleFunctionSx_default\n} from \"/node_modules/.vite/deps/chunk-6ZT6S2Z7.js?v=3c106fdb\";\nimport {\n  require_jsx_runtime\n} from \"/node_modules/.vite/deps/chunk-U73TBONF.js?v=3c106fdb\";\nimport {\n  _extends,\n  init_extends\n} from \"/node_modules/.vite/deps/chunk-HMTWVGVS.js?v=3c106fdb\";\nimport {\n  require_react\n} from \"/node_modules/.vite/deps/chunk-ZGRSIX2Q.js?v=3c106fdb\";\nimport {\n  __toESM\n} from \"/node_modules/.vite/deps/chunk-ROME4SDB.js?v=3c106fdb\";\n\n// node_modules/@mui/material/styles/index.js\ninit_esm();\ninit_identifier();\n\n// node_modules/@mui/material/styles/adaptV4Theme.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\ninit_esm2();\nvar _excluded = [\"defaultProps\", \"mixins\", \"overrides\", \"palette\", \"props\", \"styleOverrides\"];\nvar _excluded2 = [\"type\", \"mode\"];\nfunction adaptV4Theme(inputTheme) {\n  if (true) {\n    console.warn([\"MUI: adaptV4Theme() is deprecated.\", \"Follow the upgrade guide on https://mui.com/r/migration-v4#theme.\"].join(\"\\n\"));\n  }\n  const {\n    defaultProps = {},\n    mixins = {},\n    overrides = {},\n    palette = {},\n    props = {},\n    styleOverrides = {}\n  } = inputTheme, other = _objectWithoutPropertiesLoose(inputTheme, _excluded);\n  const theme = _extends({}, other, {\n    components: {}\n  });\n  Object.keys(defaultProps).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.defaultProps = defaultProps[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(props).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.defaultProps = props[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(styleOverrides).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.styleOverrides = styleOverrides[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(overrides).forEach((component) => {\n    const componentValue = theme.components[component] || {};\n    componentValue.styleOverrides = overrides[component];\n    theme.components[component] = componentValue;\n  });\n  theme.spacing = createSpacing(inputTheme.spacing);\n  const breakpoints = createBreakpoints(inputTheme.breakpoints || {});\n  const spacing = theme.spacing;\n  theme.mixins = _extends({\n    gutters: (styles = {}) => {\n      return _extends({\n        paddingLeft: spacing(2),\n        paddingRight: spacing(2)\n      }, styles, {\n        [breakpoints.up(\"sm\")]: _extends({\n          paddingLeft: spacing(3),\n          paddingRight: spacing(3)\n        }, styles[breakpoints.up(\"sm\")])\n      });\n    }\n  }, mixins);\n  const {\n    type: typeInput,\n    mode: modeInput\n  } = palette, paletteRest = _objectWithoutPropertiesLoose(palette, _excluded2);\n  const finalMode = modeInput || typeInput || \"light\";\n  theme.palette = _extends({\n    // theme.palette.text.hint\n    text: {\n      hint: finalMode === \"dark\" ? \"rgba(255, 255, 255, 0.5)\" : \"rgba(0, 0, 0, 0.38)\"\n    },\n    mode: finalMode,\n    type: finalMode\n  }, paletteRest);\n  return theme;\n}\n\n// node_modules/@mui/material/styles/index.js\ninit_esm2();\ninit_createTheme();\n\n// node_modules/@mui/material/styles/createMuiStrictModeTheme.js\ninit_esm();\ninit_createTheme();\nfunction createMuiStrictModeTheme(options, ...args) {\n  return createTheme_default(deepmerge({\n    unstable_strictMode: true\n  }, options), ...args);\n}\n\n// node_modules/@mui/material/styles/createStyles.js\nvar warnedOnce = false;\nfunction createStyles(styles) {\n  if (!warnedOnce) {\n    console.warn([\"MUI: createStyles from @mui/material/styles is deprecated.\", \"Please use @mui/styles/createStyles\"].join(\"\\n\"));\n    warnedOnce = true;\n  }\n  return styles;\n}\n\n// node_modules/@mui/material/styles/cssUtils.js\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || \"\";\n}\nfunction toUnitless(length) {\n  return parseFloat(length);\n}\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n    if (fromUnit === toUnit) {\n      return length;\n    }\n    let pxLength = toUnitless(length);\n    if (fromUnit !== \"px\") {\n      if (fromUnit === \"em\") {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === \"rem\") {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n    let outputLength = pxLength;\n    if (toUnit !== \"px\") {\n      if (toUnit === \"em\") {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === \"rem\") {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = \"rem\",\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach((breakpoint) => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`\n    };\n  });\n  return output;\n}\n\n// node_modules/@mui/material/styles/responsiveFontSizes.js\ninit_extends();\ninit_esm();\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = [\"sm\", \"md\", \"lg\"],\n    disableAlign = false,\n    factor = 2,\n    variants = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"subtitle1\", \"subtitle2\", \"body1\", \"body2\", \"caption\", \"button\", \"overline\"]\n  } = options;\n  const theme = _extends({}, themeInput);\n  theme.typography = _extends({}, theme.typography);\n  const typography = theme.typography;\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);\n  variants.forEach((variant) => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, \"rem\"));\n    if (remFontSize <= 1) {\n      return;\n    }\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(true ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : formatMuiErrorMessage(6));\n    }\n    if (!isUnitless(lineHeight)) {\n      lineHeight = parseFloat(convert(lineHeight, \"rem\")) / parseFloat(remFontSize);\n    }\n    let transform = null;\n    if (!disableAlign) {\n      transform = (value) => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: \"fontSize\",\n      min: minFontSize,\n      max: maxFontSize,\n      unit: \"rem\",\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}\n\n// node_modules/@mui/material/styles/index.js\ninit_createTransitions();\ninit_useThemeProps();\ninit_styled();\ninit_styled();\n\n// node_modules/@mui/material/styles/ThemeProvider.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React = __toESM(require_react());\nvar import_prop_types = __toESM(require_prop_types());\ninit_esm2();\ninit_identifier();\nvar import_jsx_runtime = __toESM(require_jsx_runtime());\nvar _excluded3 = [\"theme\"];\nfunction ThemeProvider(_ref) {\n  let {\n    theme: themeInput\n  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded3);\n  const scopedTheme = themeInput[identifier_default];\n  return (0, import_jsx_runtime.jsx)(ThemeProvider_default, _extends({}, props, {\n    themeId: scopedTheme ? identifier_default : void 0,\n    theme: scopedTheme || themeInput\n  }));\n}\ntrue ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: import_prop_types.default.node,\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.func]).isRequired\n} : void 0;\n\n// node_modules/@mui/material/styles/index.js\ninit_esm2();\n\n// node_modules/@mui/material/styles/makeStyles.js\ninit_esm();\nfunction makeStyles() {\n  throw new Error(true ? `MUI: makeStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(14));\n}\n\n// node_modules/@mui/material/styles/withStyles.js\ninit_esm();\nfunction withStyles() {\n  throw new Error(true ? `MUI: withStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(15));\n}\n\n// node_modules/@mui/material/styles/withTheme.js\ninit_esm();\nfunction withTheme() {\n  throw new Error(true ? `MUI: withTheme is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details.` : formatMuiErrorMessage(16));\n}\n\n// node_modules/@mui/material/styles/CssVarsProvider.js\ninit_extends();\ninit_esm2();\n\n// node_modules/@mui/material/styles/experimental_extendTheme.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\ninit_esm();\ninit_esm2();\n\n// node_modules/@mui/material/styles/shouldSkipGeneratingVar.js\nfunction shouldSkipGeneratingVar(keys) {\n  var _keys$;\n  return !!keys[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig\n  keys[0] === \"palette\" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));\n}\n\n// node_modules/@mui/material/styles/experimental_extendTheme.js\ninit_createTheme();\nvar _excluded4 = [\"colorSchemes\", \"cssVarPrefix\", \"shouldSkipGeneratingVar\"];\nvar _excluded22 = [\"palette\"];\nvar defaultDarkOverlays = [...Array(25)].map((_, index) => {\n  if (index === 0) {\n    return void 0;\n  }\n  const overlay = getOverlayAlpha_default(index);\n  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;\n});\nfunction assignNode(obj, keys) {\n  keys.forEach((k) => {\n    if (!obj[k]) {\n      obj[k] = {};\n    }\n  });\n}\nfunction setColor(obj, key, defaultValue) {\n  if (!obj[key] && defaultValue) {\n    obj[key] = defaultValue;\n  }\n}\nfunction setColorChannel(obj, key) {\n  if (!(`${key}Channel` in obj)) {\n    obj[`${key}Channel`] = private_safeColorChannel(obj[key], `MUI: Can't create \\`palette.${key}Channel\\` because \\`palette.${key}\\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\nTo suppress this warning, you need to explicitly provide the \\`palette.${key}Channel\\` as a string (in rgb format, e.g. \"12 12 12\") or undefined if you want to remove the channel token.`);\n  }\n}\nvar silent = (fn) => {\n  try {\n    return fn();\n  } catch (error) {\n  }\n  return void 0;\n};\nvar createGetCssVar2 = (cssVarPrefix = \"mui\") => createGetCssVar(cssVarPrefix);\nfunction extendTheme(options = {}, ...args) {\n  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;\n  const {\n    colorSchemes: colorSchemesInput = {},\n    cssVarPrefix = \"mui\",\n    shouldSkipGeneratingVar: shouldSkipGeneratingVar2 = shouldSkipGeneratingVar\n  } = options, input = _objectWithoutPropertiesLoose(options, _excluded4);\n  const getCssVar = createGetCssVar2(cssVarPrefix);\n  const _createThemeWithoutVa = createTheme_default(_extends({}, input, colorSchemesInput.light && {\n    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette\n  })), {\n    palette: lightPalette\n  } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded22);\n  const {\n    palette: darkPalette\n  } = createTheme_default({\n    palette: _extends({\n      mode: \"dark\"\n    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)\n  });\n  let theme = _extends({}, muiTheme, {\n    cssVarPrefix,\n    getCssVar,\n    colorSchemes: _extends({}, colorSchemesInput, {\n      light: _extends({}, colorSchemesInput.light, {\n        palette: lightPalette,\n        opacity: _extends({\n          inputPlaceholder: 0.42,\n          inputUnderline: 0.42,\n          switchTrackDisabled: 0.12,\n          switchTrack: 0.38\n        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),\n        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []\n      }),\n      dark: _extends({}, colorSchemesInput.dark, {\n        palette: darkPalette,\n        opacity: _extends({\n          inputPlaceholder: 0.5,\n          inputUnderline: 0.7,\n          switchTrackDisabled: 0.2,\n          switchTrack: 0.3\n        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),\n        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays\n      })\n    })\n  });\n  Object.keys(theme.colorSchemes).forEach((key) => {\n    const palette = theme.colorSchemes[key].palette;\n    const setCssVarColor = (cssVar) => {\n      const tokens = cssVar.split(\"-\");\n      const color = tokens[1];\n      const colorToken = tokens[2];\n      return getCssVar(cssVar, palette[color][colorToken]);\n    };\n    if (key === \"light\") {\n      setColor(palette.common, \"background\", \"#fff\");\n      setColor(palette.common, \"onBackground\", \"#000\");\n    } else {\n      setColor(palette.common, \"background\", \"#000\");\n      setColor(palette.common, \"onBackground\", \"#fff\");\n    }\n    assignNode(palette, [\"Alert\", \"AppBar\", \"Avatar\", \"Button\", \"Chip\", \"FilledInput\", \"LinearProgress\", \"Skeleton\", \"Slider\", \"SnackbarContent\", \"SpeedDialAction\", \"StepConnector\", \"StepContent\", \"Switch\", \"TableCell\", \"Tooltip\"]);\n    if (key === \"light\") {\n      setColor(palette.Alert, \"errorColor\", private_safeDarken(palette.error.light, 0.6));\n      setColor(palette.Alert, \"infoColor\", private_safeDarken(palette.info.light, 0.6));\n      setColor(palette.Alert, \"successColor\", private_safeDarken(palette.success.light, 0.6));\n      setColor(palette.Alert, \"warningColor\", private_safeDarken(palette.warning.light, 0.6));\n      setColor(palette.Alert, \"errorFilledBg\", setCssVarColor(\"palette-error-main\"));\n      setColor(palette.Alert, \"infoFilledBg\", setCssVarColor(\"palette-info-main\"));\n      setColor(palette.Alert, \"successFilledBg\", setCssVarColor(\"palette-success-main\"));\n      setColor(palette.Alert, \"warningFilledBg\", setCssVarColor(\"palette-warning-main\"));\n      setColor(palette.Alert, \"errorFilledColor\", silent(() => lightPalette.getContrastText(palette.error.main)));\n      setColor(palette.Alert, \"infoFilledColor\", silent(() => lightPalette.getContrastText(palette.info.main)));\n      setColor(palette.Alert, \"successFilledColor\", silent(() => lightPalette.getContrastText(palette.success.main)));\n      setColor(palette.Alert, \"warningFilledColor\", silent(() => lightPalette.getContrastText(palette.warning.main)));\n      setColor(palette.Alert, \"errorStandardBg\", private_safeLighten(palette.error.light, 0.9));\n      setColor(palette.Alert, \"infoStandardBg\", private_safeLighten(palette.info.light, 0.9));\n      setColor(palette.Alert, \"successStandardBg\", private_safeLighten(palette.success.light, 0.9));\n      setColor(palette.Alert, \"warningStandardBg\", private_safeLighten(palette.warning.light, 0.9));\n      setColor(palette.Alert, \"errorIconColor\", setCssVarColor(\"palette-error-main\"));\n      setColor(palette.Alert, \"infoIconColor\", setCssVarColor(\"palette-info-main\"));\n      setColor(palette.Alert, \"successIconColor\", setCssVarColor(\"palette-success-main\"));\n      setColor(palette.Alert, \"warningIconColor\", setCssVarColor(\"palette-warning-main\"));\n      setColor(palette.AppBar, \"defaultBg\", setCssVarColor(\"palette-grey-100\"));\n      setColor(palette.Avatar, \"defaultBg\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.Button, \"inheritContainedBg\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.Button, \"inheritContainedHoverBg\", setCssVarColor(\"palette-grey-A100\"));\n      setColor(palette.Chip, \"defaultBorder\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.Chip, \"defaultAvatarColor\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.Chip, \"defaultIconColor\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.FilledInput, \"bg\", \"rgba(0, 0, 0, 0.06)\");\n      setColor(palette.FilledInput, \"hoverBg\", \"rgba(0, 0, 0, 0.09)\");\n      setColor(palette.FilledInput, \"disabledBg\", \"rgba(0, 0, 0, 0.12)\");\n      setColor(palette.LinearProgress, \"primaryBg\", private_safeLighten(palette.primary.main, 0.62));\n      setColor(palette.LinearProgress, \"secondaryBg\", private_safeLighten(palette.secondary.main, 0.62));\n      setColor(palette.LinearProgress, \"errorBg\", private_safeLighten(palette.error.main, 0.62));\n      setColor(palette.LinearProgress, \"infoBg\", private_safeLighten(palette.info.main, 0.62));\n      setColor(palette.LinearProgress, \"successBg\", private_safeLighten(palette.success.main, 0.62));\n      setColor(palette.LinearProgress, \"warningBg\", private_safeLighten(palette.warning.main, 0.62));\n      setColor(palette.Skeleton, \"bg\", `rgba(${setCssVarColor(\"palette-text-primaryChannel\")} / 0.11)`);\n      setColor(palette.Slider, \"primaryTrack\", private_safeLighten(palette.primary.main, 0.62));\n      setColor(palette.Slider, \"secondaryTrack\", private_safeLighten(palette.secondary.main, 0.62));\n      setColor(palette.Slider, \"errorTrack\", private_safeLighten(palette.error.main, 0.62));\n      setColor(palette.Slider, \"infoTrack\", private_safeLighten(palette.info.main, 0.62));\n      setColor(palette.Slider, \"successTrack\", private_safeLighten(palette.success.main, 0.62));\n      setColor(palette.Slider, \"warningTrack\", private_safeLighten(palette.warning.main, 0.62));\n      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.8);\n      setColor(palette.SnackbarContent, \"bg\", snackbarContentBackground);\n      setColor(palette.SnackbarContent, \"color\", silent(() => lightPalette.getContrastText(snackbarContentBackground)));\n      setColor(palette.SpeedDialAction, \"fabHoverBg\", private_safeEmphasize(palette.background.paper, 0.15));\n      setColor(palette.StepConnector, \"border\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.StepContent, \"border\", setCssVarColor(\"palette-grey-400\"));\n      setColor(palette.Switch, \"defaultColor\", setCssVarColor(\"palette-common-white\"));\n      setColor(palette.Switch, \"defaultDisabledColor\", setCssVarColor(\"palette-grey-100\"));\n      setColor(palette.Switch, \"primaryDisabledColor\", private_safeLighten(palette.primary.main, 0.62));\n      setColor(palette.Switch, \"secondaryDisabledColor\", private_safeLighten(palette.secondary.main, 0.62));\n      setColor(palette.Switch, \"errorDisabledColor\", private_safeLighten(palette.error.main, 0.62));\n      setColor(palette.Switch, \"infoDisabledColor\", private_safeLighten(palette.info.main, 0.62));\n      setColor(palette.Switch, \"successDisabledColor\", private_safeLighten(palette.success.main, 0.62));\n      setColor(palette.Switch, \"warningDisabledColor\", private_safeLighten(palette.warning.main, 0.62));\n      setColor(palette.TableCell, \"border\", private_safeLighten(private_safeAlpha(palette.divider, 1), 0.88));\n      setColor(palette.Tooltip, \"bg\", private_safeAlpha(palette.grey[700], 0.92));\n    } else {\n      setColor(palette.Alert, \"errorColor\", private_safeLighten(palette.error.light, 0.6));\n      setColor(palette.Alert, \"infoColor\", private_safeLighten(palette.info.light, 0.6));\n      setColor(palette.Alert, \"successColor\", private_safeLighten(palette.success.light, 0.6));\n      setColor(palette.Alert, \"warningColor\", private_safeLighten(palette.warning.light, 0.6));\n      setColor(palette.Alert, \"errorFilledBg\", setCssVarColor(\"palette-error-dark\"));\n      setColor(palette.Alert, \"infoFilledBg\", setCssVarColor(\"palette-info-dark\"));\n      setColor(palette.Alert, \"successFilledBg\", setCssVarColor(\"palette-success-dark\"));\n      setColor(palette.Alert, \"warningFilledBg\", setCssVarColor(\"palette-warning-dark\"));\n      setColor(palette.Alert, \"errorFilledColor\", silent(() => darkPalette.getContrastText(palette.error.dark)));\n      setColor(palette.Alert, \"infoFilledColor\", silent(() => darkPalette.getContrastText(palette.info.dark)));\n      setColor(palette.Alert, \"successFilledColor\", silent(() => darkPalette.getContrastText(palette.success.dark)));\n      setColor(palette.Alert, \"warningFilledColor\", silent(() => darkPalette.getContrastText(palette.warning.dark)));\n      setColor(palette.Alert, \"errorStandardBg\", private_safeDarken(palette.error.light, 0.9));\n      setColor(palette.Alert, \"infoStandardBg\", private_safeDarken(palette.info.light, 0.9));\n      setColor(palette.Alert, \"successStandardBg\", private_safeDarken(palette.success.light, 0.9));\n      setColor(palette.Alert, \"warningStandardBg\", private_safeDarken(palette.warning.light, 0.9));\n      setColor(palette.Alert, \"errorIconColor\", setCssVarColor(\"palette-error-main\"));\n      setColor(palette.Alert, \"infoIconColor\", setCssVarColor(\"palette-info-main\"));\n      setColor(palette.Alert, \"successIconColor\", setCssVarColor(\"palette-success-main\"));\n      setColor(palette.Alert, \"warningIconColor\", setCssVarColor(\"palette-warning-main\"));\n      setColor(palette.AppBar, \"defaultBg\", setCssVarColor(\"palette-grey-900\"));\n      setColor(palette.AppBar, \"darkBg\", setCssVarColor(\"palette-background-paper\"));\n      setColor(palette.AppBar, \"darkColor\", setCssVarColor(\"palette-text-primary\"));\n      setColor(palette.Avatar, \"defaultBg\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.Button, \"inheritContainedBg\", setCssVarColor(\"palette-grey-800\"));\n      setColor(palette.Button, \"inheritContainedHoverBg\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.Chip, \"defaultBorder\", setCssVarColor(\"palette-grey-700\"));\n      setColor(palette.Chip, \"defaultAvatarColor\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.Chip, \"defaultIconColor\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.FilledInput, \"bg\", \"rgba(255, 255, 255, 0.09)\");\n      setColor(palette.FilledInput, \"hoverBg\", \"rgba(255, 255, 255, 0.13)\");\n      setColor(palette.FilledInput, \"disabledBg\", \"rgba(255, 255, 255, 0.12)\");\n      setColor(palette.LinearProgress, \"primaryBg\", private_safeDarken(palette.primary.main, 0.5));\n      setColor(palette.LinearProgress, \"secondaryBg\", private_safeDarken(palette.secondary.main, 0.5));\n      setColor(palette.LinearProgress, \"errorBg\", private_safeDarken(palette.error.main, 0.5));\n      setColor(palette.LinearProgress, \"infoBg\", private_safeDarken(palette.info.main, 0.5));\n      setColor(palette.LinearProgress, \"successBg\", private_safeDarken(palette.success.main, 0.5));\n      setColor(palette.LinearProgress, \"warningBg\", private_safeDarken(palette.warning.main, 0.5));\n      setColor(palette.Skeleton, \"bg\", `rgba(${setCssVarColor(\"palette-text-primaryChannel\")} / 0.13)`);\n      setColor(palette.Slider, \"primaryTrack\", private_safeDarken(palette.primary.main, 0.5));\n      setColor(palette.Slider, \"secondaryTrack\", private_safeDarken(palette.secondary.main, 0.5));\n      setColor(palette.Slider, \"errorTrack\", private_safeDarken(palette.error.main, 0.5));\n      setColor(palette.Slider, \"infoTrack\", private_safeDarken(palette.info.main, 0.5));\n      setColor(palette.Slider, \"successTrack\", private_safeDarken(palette.success.main, 0.5));\n      setColor(palette.Slider, \"warningTrack\", private_safeDarken(palette.warning.main, 0.5));\n      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.98);\n      setColor(palette.SnackbarContent, \"bg\", snackbarContentBackground);\n      setColor(palette.SnackbarContent, \"color\", silent(() => darkPalette.getContrastText(snackbarContentBackground)));\n      setColor(palette.SpeedDialAction, \"fabHoverBg\", private_safeEmphasize(palette.background.paper, 0.15));\n      setColor(palette.StepConnector, \"border\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.StepContent, \"border\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.Switch, \"defaultColor\", setCssVarColor(\"palette-grey-300\"));\n      setColor(palette.Switch, \"defaultDisabledColor\", setCssVarColor(\"palette-grey-600\"));\n      setColor(palette.Switch, \"primaryDisabledColor\", private_safeDarken(palette.primary.main, 0.55));\n      setColor(palette.Switch, \"secondaryDisabledColor\", private_safeDarken(palette.secondary.main, 0.55));\n      setColor(palette.Switch, \"errorDisabledColor\", private_safeDarken(palette.error.main, 0.55));\n      setColor(palette.Switch, \"infoDisabledColor\", private_safeDarken(palette.info.main, 0.55));\n      setColor(palette.Switch, \"successDisabledColor\", private_safeDarken(palette.success.main, 0.55));\n      setColor(palette.Switch, \"warningDisabledColor\", private_safeDarken(palette.warning.main, 0.55));\n      setColor(palette.TableCell, \"border\", private_safeDarken(private_safeAlpha(palette.divider, 1), 0.68));\n      setColor(palette.Tooltip, \"bg\", private_safeAlpha(palette.grey[700], 0.92));\n    }\n    setColorChannel(palette.background, \"default\");\n    setColorChannel(palette.common, \"background\");\n    setColorChannel(palette.common, \"onBackground\");\n    setColorChannel(palette, \"divider\");\n    Object.keys(palette).forEach((color) => {\n      const colors = palette[color];\n      if (colors && typeof colors === \"object\") {\n        if (colors.main) {\n          setColor(palette[color], \"mainChannel\", private_safeColorChannel(colors.main));\n        }\n        if (colors.light) {\n          setColor(palette[color], \"lightChannel\", private_safeColorChannel(colors.light));\n        }\n        if (colors.dark) {\n          setColor(palette[color], \"darkChannel\", private_safeColorChannel(colors.dark));\n        }\n        if (colors.contrastText) {\n          setColor(palette[color], \"contrastTextChannel\", private_safeColorChannel(colors.contrastText));\n        }\n        if (color === \"text\") {\n          setColorChannel(palette[color], \"primary\");\n          setColorChannel(palette[color], \"secondary\");\n        }\n        if (color === \"action\") {\n          if (colors.active) {\n            setColorChannel(palette[color], \"active\");\n          }\n          if (colors.selected) {\n            setColorChannel(palette[color], \"selected\");\n          }\n        }\n      }\n    });\n  });\n  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);\n  const parserConfig = {\n    prefix: cssVarPrefix,\n    shouldSkipGeneratingVar: shouldSkipGeneratingVar2\n  };\n  const {\n    vars: themeVars,\n    generateCssVars\n  } = prepareCssVars_default(theme, parserConfig);\n  theme.vars = themeVars;\n  theme.generateCssVars = generateCssVars;\n  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar2;\n  theme.unstable_sxConfig = _extends({}, defaultSxConfig_default, input == null ? void 0 : input.unstable_sxConfig);\n  theme.unstable_sx = function sx(props) {\n    return styleFunctionSx_default({\n      sx: props,\n      theme: this\n    });\n  };\n  return theme;\n}\n\n// node_modules/@mui/material/styles/CssVarsProvider.js\ninit_createTypography();\n\n// node_modules/@mui/material/styles/excludeVariablesFromRoot.js\nvar excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : \"\"}overlays-${index + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : \"\"}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : \"\"}palette-AppBar-darkColor`];\nvar excludeVariablesFromRoot_default = excludeVariablesFromRoot;\n\n// node_modules/@mui/material/styles/CssVarsProvider.js\ninit_identifier();\nvar defaultTheme = extendTheme();\nvar {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript\n} = createCssVarsProvider({\n  themeId: identifier_default,\n  theme: defaultTheme,\n  attribute: \"data-mui-color-scheme\",\n  modeStorageKey: \"mui-mode\",\n  colorSchemeStorageKey: \"mui-color-scheme\",\n  defaultColorScheme: {\n    light: \"light\",\n    dark: \"dark\"\n  },\n  resolveTheme: (theme) => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx_default({\n        sx: props,\n        theme: this\n      });\n    };\n    return newTheme;\n  },\n  excludeVariablesFromRoot: excludeVariablesFromRoot_default\n});\n\n// node_modules/@mui/material/styles/index.js\ninit_createTypography();\nfunction experimental_sx() {\n  throw new Error(true ? `MUI: The \\`experimental_sx\\` has been moved to \\`theme.unstable_sx\\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : formatMuiErrorMessage(20));\n}\n\nexport {\n  adaptV4Theme,\n  createMuiStrictModeTheme,\n  createStyles,\n  getUnit,\n  toUnitless,\n  responsiveFontSizes,\n  ThemeProvider,\n  makeStyles,\n  withStyles,\n  withTheme,\n  shouldSkipGeneratingVar,\n  extendTheme,\n  excludeVariablesFromRoot_default,\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript,\n  experimental_sx\n};\n//# sourceMappingURL=chunk-D3SRKI3F.js.map\n",
      "start": 1701766112172,
      "end": 1701766112173,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
