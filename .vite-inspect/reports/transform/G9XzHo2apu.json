{
  "resolvedId": "C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/node_modules/.vite/deps/chunk-QK5I2FHH.js?v=c929456e",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "import {\n  require_react_dom\n} from \"./chunk-GSZ7ISAW.js\";\nimport {\n  init_composeClasses\n} from \"./chunk-5CYIWUDX.js\";\nimport {\n  HTMLElementType,\n  _objectWithoutPropertiesLoose,\n  chainPropTypes,\n  clsx_default,\n  composeClasses,\n  createChainedFunction,\n  debounce,\n  elementAcceptingRef_default,\n  exactProp,\n  generateUtilityClass,\n  generateUtilityClasses,\n  getScrollbarSize,\n  init_clsx,\n  init_esm,\n  init_objectWithoutPropertiesLoose,\n  init_useControlled,\n  integerPropType_default,\n  ownerDocument,\n  ownerWindow,\n  refType_default,\n  require_prop_types,\n  setRef,\n  useControlled,\n  useEnhancedEffect_default,\n  useEventCallback_default,\n  useForkRef,\n  useId,\n  useIsFocusVisible,\n  usePreviousProps_default,\n  visuallyHidden_default\n} from \"./chunk-CY3GP2WZ.js\";\nimport {\n  require_jsx_runtime\n} from \"./chunk-U73TBONF.js\";\nimport {\n  _extends,\n  init_extends\n} from \"./chunk-HMTWVGVS.js\";\nimport {\n  require_react\n} from \"./chunk-ZGRSIX2Q.js\";\nimport {\n  __toESM\n} from \"./chunk-ROME4SDB.js\";\n\n// node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js\nvar React = __toESM(require_react());\nvar import_prop_types = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime = __toESM(require_jsx_runtime());\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = \"onClick\",\n    onClickAway,\n    touchEvent = \"onTouchEnd\"\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef(\n    // @ts-expect-error TODO upstream fix\n    children.ref,\n    nodeRef\n  );\n  const handleClickAway = useEventCallback_default((event) => {\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current);\n    if (!activatedRef.current || !nodeRef.current || \"clientX\" in event && clickedRootScrollbar(event, doc)) {\n      return;\n    }\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n    let insideDOM;\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(\n        // @ts-expect-error returns `false` as intended when not dispatched from a Node\n        event.target\n      ) || nodeRef.current.contains(\n        // @ts-expect-error returns `false` as intended when not dispatched from a Node\n        event.target\n      );\n    }\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  });\n  const createHandleSynthetic = (handlerName) => (event) => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const childrenProps = {\n    ref: handleRef\n  };\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener(\"touchmove\", handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener(\"touchmove\", handleTouchMove);\n      };\n    }\n    return void 0;\n  }, [handleClickAway, touchEvent]);\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n    return void 0;\n  }, [handleClickAway, mouseEvent]);\n  return (0, import_jsx_runtime.jsx)(React.Fragment, {\n    children: React.cloneElement(children, childrenProps)\n  });\n}\ntrue ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef_default.isRequired,\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: import_prop_types.default.bool,\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: import_prop_types.default.oneOf([\"onClick\", \"onMouseDown\", \"onMouseUp\", \"onPointerDown\", \"onPointerUp\", false]),\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: import_prop_types.default.func.isRequired,\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: import_prop_types.default.oneOf([\"onTouchEnd\", \"onTouchStart\", false])\n} : void 0;\nif (true) {\n  ClickAwayListener[\"propTypes\"] = exactProp(ClickAwayListener.propTypes);\n}\n\n// node_modules/@mui/base/FocusTrap/FocusTrap.js\nvar React2 = __toESM(require_react());\nvar import_prop_types2 = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime2 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime3 = __toESM(require_jsx_runtime());\nvar candidatesSelector = [\"input\", \"select\", \"textarea\", \"a[href]\", \"button\", \"[tabindex]\", \"audio[controls]\", \"video[controls]\", '[contenteditable]:not([contenteditable=\"false\"])'].join(\",\");\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute(\"tabindex\") || \"\", 10);\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  }\n  if (node.contentEditable === \"true\" || (node.nodeName === \"AUDIO\" || node.nodeName === \"VIDEO\" || node.nodeName === \"DETAILS\") && node.getAttribute(\"tabindex\") === null) {\n    return 0;\n  }\n  return node.tabIndex;\n}\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== \"INPUT\" || node.type !== \"radio\") {\n    return false;\n  }\n  if (!node.name) {\n    return false;\n  }\n  const getRadio = (selector) => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n  return roving !== node;\n}\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === \"INPUT\" && node.type === \"hidden\" || isNonTabbableRadio(node)) {\n    return false;\n  }\n  return true;\n}\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);\n}\nfunction defaultIsEnabled() {\n  return true;\n}\nfunction FocusTrap(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = React2.useRef(false);\n  const sentinelStart = React2.useRef(null);\n  const sentinelEnd = React2.useRef(null);\n  const nodeToRestore = React2.useRef(null);\n  const reactFocusEventTarget = React2.useRef(null);\n  const activated = React2.useRef(false);\n  const rootRef = React2.useRef(null);\n  const handleRef = useForkRef(children.ref, rootRef);\n  const lastKeydown = React2.useRef(null);\n  React2.useEffect(() => {\n    if (!open || !rootRef.current) {\n      return;\n    }\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React2.useEffect(() => {\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = ownerDocument(rootRef.current);\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute(\"tabIndex\")) {\n        if (true) {\n          console.error([\"MUI: The modal content node does not accept focus.\", 'For the benefit of assistive technologies, the tabIndex of the node is being set to \"-1\".'].join(\"\\n\"));\n        }\n        rootRef.current.setAttribute(\"tabIndex\", \"-1\");\n      }\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n    return () => {\n      if (!disableRestoreFocus) {\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n        nodeToRestore.current = null;\n      }\n    };\n  }, [open]);\n  React2.useEffect(() => {\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = ownerDocument(rootRef.current);\n    const loopFocus = (nativeEvent) => {\n      lastKeydown.current = nativeEvent;\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== \"Tab\") {\n        return;\n      }\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        ignoreNextEnforceFocus.current = true;\n        if (sentinelEnd.current) {\n          sentinelEnd.current.focus();\n        }\n      }\n    };\n    const contain = () => {\n      const rootElement = rootRef.current;\n      if (rootElement === null) {\n        return;\n      }\n      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n      if (rootElement.contains(doc.activeElement)) {\n        return;\n      }\n      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {\n        return;\n      }\n      if (doc.activeElement !== reactFocusEventTarget.current) {\n        reactFocusEventTarget.current = null;\n      } else if (reactFocusEventTarget.current !== null) {\n        return;\n      }\n      if (!activated.current) {\n        return;\n      }\n      let tabbable = [];\n      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n        tabbable = getTabbable(rootRef.current);\n      }\n      if (tabbable.length > 0) {\n        var _lastKeydown$current, _lastKeydown$current2;\n        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === \"Tab\");\n        const focusNext = tabbable[0];\n        const focusPrevious = tabbable[tabbable.length - 1];\n        if (typeof focusNext !== \"string\" && typeof focusPrevious !== \"string\") {\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        }\n      } else {\n        rootElement.focus();\n      }\n    };\n    doc.addEventListener(\"focusin\", contain);\n    doc.addEventListener(\"keydown\", loopFocus, true);\n    const interval = setInterval(() => {\n      if (doc.activeElement && doc.activeElement.tagName === \"BODY\") {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener(\"focusin\", contain);\n      doc.removeEventListener(\"keydown\", loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n  const onFocus = (event) => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const handleFocusSentinel = (event) => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n  };\n  return (0, import_jsx_runtime3.jsxs)(React2.Fragment, {\n    children: [(0, import_jsx_runtime2.jsx)(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-testid\": \"sentinelStart\"\n    }), React2.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), (0, import_jsx_runtime2.jsx)(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-testid\": \"sentinelEnd\"\n    })]\n  });\n}\ntrue ? FocusTrap.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef_default,\n  /**\n   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: import_prop_types2.default.bool,\n  /**\n   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: import_prop_types2.default.bool,\n  /**\n   * If `true`, the focus trap will not restore focus to previously focused element once\n   * focus trap is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: import_prop_types2.default.bool,\n  /**\n   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n   * For instance, you can provide the \"tabbable\" npm dependency.\n   * @param {HTMLElement} root\n   */\n  getTabbable: import_prop_types2.default.func,\n  /**\n   * This prop extends the `open` prop.\n   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n   * This prop should be memoized.\n   * It can be used to support multiple focus trap mounted at the same time.\n   * @default function defaultIsEnabled(): boolean {\n   *   return true;\n   * }\n   */\n  isEnabled: import_prop_types2.default.func,\n  /**\n   * If `true`, focus is locked.\n   */\n  open: import_prop_types2.default.bool.isRequired\n} : void 0;\nif (true) {\n  FocusTrap[\"propTypes\"] = exactProp(FocusTrap.propTypes);\n}\n\n// node_modules/@mui/base/Portal/Portal.js\nvar React3 = __toESM(require_react());\nvar ReactDOM = __toESM(require_react_dom());\nvar import_prop_types3 = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime4 = __toESM(require_jsx_runtime());\nfunction getContainer(container) {\n  return typeof container === \"function\" ? container() : container;\n}\nvar Portal = React3.forwardRef(function Portal2(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React3.useState(null);\n  const handleRef = useForkRef(React3.isValidElement(children) ? children.ref : null, forwardedRef);\n  useEnhancedEffect_default(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect_default(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n    return void 0;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if (React3.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return React3.cloneElement(children, newProps);\n    }\n    return (0, import_jsx_runtime4.jsx)(React3.Fragment, {\n      children\n    });\n  }\n  return (0, import_jsx_runtime4.jsx)(React3.Fragment, {\n    children: mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\ntrue ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The children to render into the `container`.\n   */\n  children: import_prop_types3.default.node,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: import_prop_types3.default.oneOfType([HTMLElementType, import_prop_types3.default.func]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: import_prop_types3.default.bool\n} : void 0;\nif (true) {\n  Portal[\"propTypes\"] = exactProp(Portal.propTypes);\n}\n\n// node_modules/@mui/base/unstable_useModal/ModalManager.js\ninit_esm();\nfunction isOverflowing(container) {\n  const doc = ownerDocument(container);\n  if (doc.body === container) {\n    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;\n  }\n  return container.scrollHeight > container.clientHeight;\n}\nfunction ariaHidden(element, show) {\n  if (show) {\n    element.setAttribute(\"aria-hidden\", \"true\");\n  } else {\n    element.removeAttribute(\"aria-hidden\");\n  }\n}\nfunction getPaddingRight(element) {\n  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;\n}\nfunction isAriaHiddenForbiddenOnElement(element) {\n  const forbiddenTagNames = [\"TEMPLATE\", \"SCRIPT\", \"STYLE\", \"LINK\", \"MAP\", \"META\", \"NOSCRIPT\", \"PICTURE\", \"COL\", \"COLGROUP\", \"PARAM\", \"SLOT\", \"SOURCE\", \"TRACK\"];\n  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;\n  const isInputHidden = element.tagName === \"INPUT\" && element.getAttribute(\"type\") === \"hidden\";\n  return isForbiddenTagName || isInputHidden;\n}\nfunction ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {\n  const blacklist = [mountElement, currentElement, ...elementsToExclude];\n  [].forEach.call(container.children, (element) => {\n    const isNotExcludedElement = blacklist.indexOf(element) === -1;\n    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);\n    if (isNotExcludedElement && isNotForbiddenElement) {\n      ariaHidden(element, show);\n    }\n  });\n}\nfunction findIndexOf(items, callback) {\n  let idx = -1;\n  items.some((item, index2) => {\n    if (callback(item)) {\n      idx = index2;\n      return true;\n    }\n    return false;\n  });\n  return idx;\n}\nfunction handleContainer(containerInfo, props) {\n  const restoreStyle = [];\n  const container = containerInfo.container;\n  if (!props.disableScrollLock) {\n    if (isOverflowing(container)) {\n      const scrollbarSize = getScrollbarSize(ownerDocument(container));\n      restoreStyle.push({\n        value: container.style.paddingRight,\n        property: \"padding-right\",\n        el: container\n      });\n      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;\n      const fixedElements = ownerDocument(container).querySelectorAll(\".mui-fixed\");\n      [].forEach.call(fixedElements, (element) => {\n        restoreStyle.push({\n          value: element.style.paddingRight,\n          property: \"padding-right\",\n          el: element\n        });\n        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;\n      });\n    }\n    let scrollContainer;\n    if (container.parentNode instanceof DocumentFragment) {\n      scrollContainer = ownerDocument(container).body;\n    } else {\n      const parent = container.parentElement;\n      const containerWindow = ownerWindow(container);\n      scrollContainer = (parent == null ? void 0 : parent.nodeName) === \"HTML\" && containerWindow.getComputedStyle(parent).overflowY === \"scroll\" ? parent : container;\n    }\n    restoreStyle.push({\n      value: scrollContainer.style.overflow,\n      property: \"overflow\",\n      el: scrollContainer\n    }, {\n      value: scrollContainer.style.overflowX,\n      property: \"overflow-x\",\n      el: scrollContainer\n    }, {\n      value: scrollContainer.style.overflowY,\n      property: \"overflow-y\",\n      el: scrollContainer\n    });\n    scrollContainer.style.overflow = \"hidden\";\n  }\n  const restore = () => {\n    restoreStyle.forEach(({\n      value,\n      el,\n      property\n    }) => {\n      if (value) {\n        el.style.setProperty(property, value);\n      } else {\n        el.style.removeProperty(property);\n      }\n    });\n  };\n  return restore;\n}\nfunction getHiddenSiblings(container) {\n  const hiddenSiblings = [];\n  [].forEach.call(container.children, (element) => {\n    if (element.getAttribute(\"aria-hidden\") === \"true\") {\n      hiddenSiblings.push(element);\n    }\n  });\n  return hiddenSiblings;\n}\nvar ModalManager = class {\n  constructor() {\n    this.containers = void 0;\n    this.modals = void 0;\n    this.modals = [];\n    this.containers = [];\n  }\n  add(modal, container) {\n    let modalIndex = this.modals.indexOf(modal);\n    if (modalIndex !== -1) {\n      return modalIndex;\n    }\n    modalIndex = this.modals.length;\n    this.modals.push(modal);\n    if (modal.modalRef) {\n      ariaHidden(modal.modalRef, false);\n    }\n    const hiddenSiblings = getHiddenSiblings(container);\n    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);\n    const containerIndex = findIndexOf(this.containers, (item) => item.container === container);\n    if (containerIndex !== -1) {\n      this.containers[containerIndex].modals.push(modal);\n      return modalIndex;\n    }\n    this.containers.push({\n      modals: [modal],\n      container,\n      restore: null,\n      hiddenSiblings\n    });\n    return modalIndex;\n  }\n  mount(modal, props) {\n    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);\n    const containerInfo = this.containers[containerIndex];\n    if (!containerInfo.restore) {\n      containerInfo.restore = handleContainer(containerInfo, props);\n    }\n  }\n  remove(modal, ariaHiddenState = true) {\n    const modalIndex = this.modals.indexOf(modal);\n    if (modalIndex === -1) {\n      return modalIndex;\n    }\n    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);\n    const containerInfo = this.containers[containerIndex];\n    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);\n    this.modals.splice(modalIndex, 1);\n    if (containerInfo.modals.length === 0) {\n      if (containerInfo.restore) {\n        containerInfo.restore();\n      }\n      if (modal.modalRef) {\n        ariaHidden(modal.modalRef, ariaHiddenState);\n      }\n      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);\n      this.containers.splice(containerIndex, 1);\n    } else {\n      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];\n      if (nextTop.modalRef) {\n        ariaHidden(nextTop.modalRef, false);\n      }\n    }\n    return modalIndex;\n  }\n  isTopModal(modal) {\n    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;\n  }\n};\n\n// node_modules/@mui/base/NoSsr/NoSsr.js\nvar React4 = __toESM(require_react());\nvar import_prop_types4 = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime5 = __toESM(require_jsx_runtime());\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React4.useState(false);\n  useEnhancedEffect_default(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React4.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  return (0, import_jsx_runtime5.jsx)(React4.Fragment, {\n    children: mountedState ? children : fallback\n  });\n}\ntrue ? NoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * You can wrap a node.\n   */\n  children: import_prop_types4.default.node,\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: import_prop_types4.default.bool,\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: import_prop_types4.default.node\n} : void 0;\nif (true) {\n  NoSsr[\"propTypes\"] = exactProp(NoSsr.propTypes);\n}\n\n// node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React5 = __toESM(require_react());\nvar import_prop_types5 = __toESM(require_prop_types());\nvar ReactDOM2 = __toESM(require_react_dom());\ninit_esm();\nvar import_jsx_runtime6 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime7 = __toESM(require_jsx_runtime());\nvar _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nvar styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: \"hidden\",\n    // Remove from the content flow\n    position: \"absolute\",\n    // Ignore the scrollbar width\n    overflow: \"hidden\",\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: \"translateZ(0)\"\n  }\n};\nfunction isEmpty(obj) {\n  return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\nvar TextareaAutosize = React5.forwardRef(function TextareaAutosize2(props, forwardedRef) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React5.useRef(value != null);\n  const inputRef = React5.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React5.useRef(null);\n  const renders = React5.useRef(0);\n  const [state, setState] = React5.useState({\n    outerHeightStyle: 0\n  });\n  const getUpdatedState = React5.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n    if (computedStyle.width === \"0px\") {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || \"x\";\n    if (inputShallow.value.slice(-1) === \"\\n\") {\n      inputShallow.value += \" \";\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n    const innerHeight = inputShallow.scrollHeight;\n    inputShallow.value = \"x\";\n    const singleRowHeight = inputShallow.scrollHeight;\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n    const outerHeightStyle = outerHeight + (boxSizing === \"border-box\" ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (true) {\n      if (renders.current === 20) {\n        console.error([\"MUI: Too many re-renders. The layout is unstable.\", \"TextareaAutosize limits the number of renders to prevent an infinite loop.\"].join(\"\\n\"));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React5.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState((prevState) => updateState(prevState, newState));\n  }, [getUpdatedState]);\n  useEnhancedEffect_default(() => {\n    const syncHeightWithFlushSync = () => {\n      const newState = getUpdatedState();\n      if (isEmpty(newState)) {\n        return;\n      }\n      ReactDOM2.flushSync(() => {\n        setState((prevState) => updateState(prevState, newState));\n      });\n    };\n    const handleResize = () => {\n      renders.current = 0;\n      syncHeightWithFlushSync();\n    };\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener(\"resize\", debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== \"undefined\") {\n      resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener(\"resize\", debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [getUpdatedState]);\n  useEnhancedEffect_default(() => {\n    syncHeight();\n  });\n  React5.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = (event) => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return (0, import_jsx_runtime7.jsxs)(React5.Fragment, {\n    children: [(0, import_jsx_runtime6.jsx)(\"textarea\", _extends({\n      value,\n      onChange: handleChange,\n      ref: handleRef,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? \"hidden\" : void 0\n      }, style)\n    }, other)), (0, import_jsx_runtime6.jsx)(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\ntrue ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: import_prop_types5.default.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),\n  /**\n   * @ignore\n   */\n  onChange: import_prop_types5.default.func,\n  /**\n   * @ignore\n   */\n  placeholder: import_prop_types5.default.string,\n  /**\n   * @ignore\n   */\n  style: import_prop_types5.default.object,\n  /**\n   * @ignore\n   */\n  value: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.string), import_prop_types5.default.number, import_prop_types5.default.string])\n} : void 0;\n\n// node_modules/@mui/base/useAutocomplete/useAutocomplete.js\ninit_extends();\nvar React6 = __toESM(require_react());\ninit_esm();\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== \"undefined\" ? string.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") : string;\n}\nfunction createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = \"any\",\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter((option) => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === \"start\" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === \"number\" ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nvar defaultFilterOptions = createFilterOptions();\nvar pageSize = 5;\nvar defaultIsActiveElementInListbox = (listboxRef) => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = \"Mui\",\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = \"useAutocomplete\",\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = (option) => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value2) => option === value2,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = (option) => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== \"string\") {\n      if (true) {\n        const erroneousReturn = optionLabel === void 0 ? \"undefined\" : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React6.useRef(false);\n  const firstFocus = React6.useRef(true);\n  const inputRef = React6.useRef(null);\n  const listboxRef = React6.useRef(null);\n  const [anchorEl, setAnchorEl] = React6.useState(null);\n  const [focusedTag, setFocusedTag] = React6.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React6.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: \"\",\n    name: componentName,\n    state: \"inputValue\"\n  });\n  const [focused, setFocused] = React6.useState(false);\n  const resetInputValue = React6.useCallback((event, newValue) => {\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = \"\";\n    } else if (newValue == null) {\n      newInputValue = \"\";\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === \"string\" ? optionLabel : \"\";\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, \"reset\");\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: \"open\"\n  });\n  const [inputPristine, setInputPristine] = React6.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(\n    options.filter((option) => {\n      if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {\n        return false;\n      }\n      return true;\n    }),\n    // we use the empty string to manipulate `filterOptions` to not filter any options\n    // i.e. the filter predicate always returns true\n    {\n      inputValue: inputValueIsSelectedValue && inputPristine ? \"\" : inputValue,\n      getOptionLabel\n    }\n  ) : [];\n  const previousProps = usePreviousProps_default({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React6.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (true) {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, \"You can use the `isOptionEqualToValue` prop to customize the equality test.\"].join(\"\\n\"));\n      }\n    }\n  }\n  const focusTag = useEventCallback_default((tagToFocus) => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n  React6.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index2, direction) {\n    if (!listboxRef.current || index2 < 0 || index2 >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index2;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute(\"aria-disabled\") === \"true\";\n      if (option && option.hasAttribute(\"tabindex\") && !nextFocusDisabled) {\n        return nextFocus;\n      }\n      if (direction === \"next\") {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n      if (nextFocus === index2) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback_default(({\n    event,\n    index: index2,\n    reason = \"auto\"\n  }) => {\n    highlightedIndexRef.current = index2;\n    if (index2 === -1) {\n      inputRef.current.removeAttribute(\"aria-activedescendant\");\n    } else {\n      inputRef.current.setAttribute(\"aria-activedescendant\", `${id}-option-${index2}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index2 === -1 ? null : filteredOptions[index2], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute(\"role\") !== \"listbox\") {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n    if (!listboxNode) {\n      return;\n    }\n    if (index2 === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index2}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === \"keyboard\") {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== \"mouse\" && reason !== \"touch\") {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback_default(({\n    event,\n    diff,\n    direction = \"next\",\n    reason = \"auto\"\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === \"reset\") {\n        return defaultHighlighted;\n      }\n      if (diff === \"start\") {\n        return 0;\n      }\n      if (diff === \"end\") {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n    if (autoComplete && diff !== \"reset\") {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n        const index2 = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index2 === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const checkHighlightedOptionExists = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : \"\";\n      const label2 = value2 ? getOptionLabel(value2) : \"\";\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        const previousHighlightedOptionExists = filteredOptions.some((option) => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n        if (previousHighlightedOptionExists) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const syncHighlightedIndex = React6.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n    if (checkHighlightedOptionExists()) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: \"reset\"\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n      if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: \"reset\"\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n  }, [\n    // Only sync the highlighted index when the option switch between empty and not\n    filteredOptions.length,\n    // Don't sync the highlighted index with the value when multiple\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    multiple ? false : value,\n    filterSelectedOptions,\n    changeHighlightedIndex,\n    setHighlightedIndex,\n    popupOpen,\n    inputValue,\n    multiple\n  ]);\n  const handleListboxRef = useEventCallback_default((node) => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (true) {\n    React6.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== \"INPUT\") {\n        if (inputRef.current && inputRef.current.nodeName === \"TEXTAREA\") {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join(\"\\n\"));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, \"\", componentName === \"useAutocomplete\" ? \"Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.\" : \"Make sure you have customized the input component correctly.\"].join(\"\\n\"));\n        }\n      }\n    }, [componentName]);\n  }\n  React6.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = (event) => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React6.useRef(false);\n  const selectNewValue = (event, option, reasonProp = \"selectOption\", origin = \"options\") => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (true) {\n        const matches = newValue.filter((val) => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join(\"\\n\"));\n        }\n      }\n      const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== \"freeSolo\") {\n        newValue.splice(itemIndex, 1);\n        reason = \"removeOption\";\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === \"touch\" && isTouch.current || blurOnSelect === \"mouse\" && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index2, direction) {\n    if (index2 === -1) {\n      return -1;\n    }\n    let nextFocus = index2;\n    while (true) {\n      if (direction === \"next\" && nextFocus === value.length || direction === \"previous\" && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n      if (!option || !option.hasAttribute(\"tabindex\") || option.disabled || option.getAttribute(\"aria-disabled\") === \"true\") {\n        nextFocus += direction === \"next\" ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === \"\") {\n      handleClose(event, \"toggleInput\");\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === \"\" && direction === \"previous\") {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === \"next\" ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = (event) => {\n    ignoreFocus.current = true;\n    setInputValueState(\"\");\n    if (onInputChange) {\n      onInputChange(event, \"\", \"clear\");\n    }\n    handleValue(event, multiple ? [] : null, \"clear\");\n  };\n  const handleKeyDown2 = (other) => (event) => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && [\"ArrowLeft\", \"ArrowRight\"].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n    if (event.which !== 229) {\n      switch (event.key) {\n        case \"Home\":\n          if (popupOpen && handleHomeEndKeys) {\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: \"start\",\n              direction: \"next\",\n              reason: \"keyboard\",\n              event\n            });\n          }\n          break;\n        case \"End\":\n          if (popupOpen && handleHomeEndKeys) {\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: \"end\",\n              direction: \"previous\",\n              reason: \"keyboard\",\n              event\n            });\n          }\n          break;\n        case \"PageUp\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: \"previous\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"PageDown\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: \"next\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"ArrowDown\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: \"next\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"ArrowUp\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: \"previous\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"ArrowLeft\":\n          handleFocusTag(event, \"previous\");\n          break;\n        case \"ArrowRight\":\n          handleFocusTag(event, \"next\");\n          break;\n        case \"Enter\":\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, \"selectOption\");\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== \"\" && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, \"createOption\", \"freeSolo\");\n          }\n          break;\n        case \"Escape\":\n          if (popupOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            handleClose(event, \"escape\");\n          } else if (clearOnEscape && (inputValue !== \"\" || multiple && value.length > 0)) {\n            event.preventDefault();\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case \"Backspace\":\n          if (multiple && !readOnly && inputValue === \"\" && value.length > 0) {\n            const index2 = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index2, 1);\n            handleValue(event, newValue, \"removeOption\", {\n              option: value[index2]\n            });\n          }\n          break;\n        case \"Delete\":\n          if (multiple && !readOnly && inputValue === \"\" && value.length > 0 && focusedTag !== -1) {\n            const index2 = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index2, 1);\n            handleValue(event, newValue, \"removeOption\", {\n              option: value[index2]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = (event) => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur2 = (event) => {\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], \"blur\");\n    } else if (autoSelect && freeSolo && inputValue !== \"\") {\n      selectNewValue(event, inputValue, \"blur\", \"freeSolo\");\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, \"blur\");\n  };\n  const handleInputChange = (event) => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, \"input\");\n      }\n    }\n    if (newValue === \"\") {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, \"clear\");\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = (event) => {\n    const index2 = Number(event.currentTarget.getAttribute(\"data-option-index\"));\n    if (highlightedIndexRef.current !== index2) {\n      setHighlightedIndex({\n        event,\n        index: index2,\n        reason: \"mouse\"\n      });\n    }\n  };\n  const handleOptionTouchStart = (event) => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute(\"data-option-index\")),\n      reason: \"touch\"\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = (event) => {\n    const index2 = Number(event.currentTarget.getAttribute(\"data-option-index\"));\n    selectNewValue(event, filteredOptions[index2], \"selectOption\");\n    isTouch.current = false;\n  };\n  const handleTagDelete = (index2) => (event) => {\n    const newValue = value.slice();\n    newValue.splice(index2, 1);\n    handleValue(event, newValue, \"removeOption\", {\n      option: value[index2]\n    });\n  };\n  const handlePopupIndicator = (event) => {\n    if (open) {\n      handleClose(event, \"toggleInput\");\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleMouseDown = (event) => {\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute(\"id\") !== id) {\n      event.preventDefault();\n    }\n  };\n  const handleClick = (event) => {\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = (event) => {\n    if (!disabledProp && (inputValue === \"\" || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    const indexBy = /* @__PURE__ */ new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index2) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (true) {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, \"You can solve the issue by sorting the options with the output of `groupBy`.\");\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index2,\n          index: index2,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur2();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      \"aria-owns\": listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown2(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur2,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      \"aria-activedescendant\": popupOpen ? \"\" : null,\n      \"aria-autocomplete\": autoComplete ? \"both\" : \"list\",\n      \"aria-controls\": listboxAvailable ? `${id}-listbox` : void 0,\n      \"aria-expanded\": listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: \"off\",\n      ref: inputRef,\n      autoCapitalize: \"none\",\n      spellCheck: \"false\",\n      role: \"combobox\",\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: \"button\",\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: \"button\",\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index: index2\n    }) => _extends({\n      key: index2,\n      \"data-tag-index\": index2,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index2)\n    }),\n    getListboxProps: () => ({\n      role: \"listbox\",\n      id: `${id}-listbox`,\n      \"aria-labelledby\": `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: (event) => {\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index: index2,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: \"option\",\n        id: `${id}-option-${index2}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        \"data-option-index\": index2,\n        \"aria-disabled\": disabled,\n        \"aria-selected\": selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\n\n// node_modules/@mui/base/utils/isHostComponent.js\nfunction isHostComponent(element) {\n  return typeof element === \"string\";\n}\n\n// node_modules/@mui/base/utils/appendOwnerState.js\ninit_extends();\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === void 0 || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return _extends({}, otherProps, {\n    ownerState: _extends({}, otherProps.ownerState, ownerState)\n  });\n}\n\n// node_modules/@mui/base/utils/useSlotProps.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\ninit_esm();\n\n// node_modules/@mui/base/utils/mergeSlotProps.js\ninit_extends();\ninit_clsx();\n\n// node_modules/@mui/base/utils/extractEventHandlers.js\nfunction extractEventHandlers(object, excludeKeys = []) {\n  if (object === void 0) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === \"function\" && !excludeKeys.includes(prop)).forEach((prop) => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\n\n// node_modules/@mui/base/utils/omitEventHandlers.js\nfunction omitEventHandlers(object) {\n  if (object === void 0) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === \"function\")).forEach((prop) => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\n\n// node_modules/@mui/base/utils/mergeSlotProps.js\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n    const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n    const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);\n    if (joinedClasses2.length > 0) {\n      props2.className = joinedClasses2;\n    }\n    if (Object.keys(mergedStyle2).length > 0) {\n      props2.style = mergedStyle2;\n    }\n    return {\n      props: props2,\n      internalRef: void 0\n    };\n  }\n  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n  const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\n\n// node_modules/@mui/base/utils/resolveComponentProps.js\nfunction resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === \"function\") {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}\n\n// node_modules/@mui/base/utils/useSlotProps.js\nvar _excluded2 = [\"elementType\", \"externalSlotProps\", \"ownerState\", \"skipResolvingSlotProps\"];\nfunction useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false\n  } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded2);\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}\n\n// node_modules/@mui/base/utils/areArraysEqual.js\nfunction areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {\n  return array1.length === array2.length && array1.every((value, index2) => itemComparer(value, array2[index2]));\n}\n\n// node_modules/@mui/base/utils/ClassNameConfigurator.js\nvar React7 = __toESM(require_react());\nvar import_jsx_runtime8 = __toESM(require_jsx_runtime());\nvar defaultContextValue = {\n  disableDefaultClasses: false\n};\nvar ClassNameConfiguratorContext = React7.createContext(defaultContextValue);\nfunction useClassNamesOverride(generateUtilityClass2) {\n  const {\n    disableDefaultClasses\n  } = React7.useContext(ClassNameConfiguratorContext);\n  return (slot) => {\n    if (disableDefaultClasses) {\n      return \"\";\n    }\n    return generateUtilityClass2(slot);\n  };\n}\n\n// node_modules/@mui/base/utils/prepareForSlot.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React8 = __toESM(require_react());\n\n// node_modules/@mui/base/useBadge/useBadge.js\ninit_esm();\nfunction useBadge(parameters) {\n  const {\n    badgeContent: badgeContentProp,\n    invisible: invisibleProp = false,\n    max: maxProp = 99,\n    showZero = false\n  } = parameters;\n  const prevProps = usePreviousProps_default({\n    badgeContent: badgeContentProp,\n    max: maxProp\n  });\n  let invisible = invisibleProp;\n  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {\n    invisible = true;\n  }\n  const {\n    badgeContent,\n    max: max3 = maxProp\n  } = invisible ? prevProps : parameters;\n  const displayValue = badgeContent && Number(badgeContent) > max3 ? `${max3}+` : badgeContent;\n  return {\n    badgeContent,\n    invisible,\n    max: max3,\n    displayValue\n  };\n}\n\n// node_modules/@mui/base/Popper/Popper.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React9 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@popperjs/core/lib/enums.js\nvar top = \"top\";\nvar bottom = \"bottom\";\nvar right = \"right\";\nvar left = \"left\";\nvar auto = \"auto\";\nvar basePlacements = [top, bottom, right, left];\nvar start = \"start\";\nvar end = \"end\";\nvar clippingParents = \"clippingParents\";\nvar viewport = \"viewport\";\nvar popper = \"popper\";\nvar reference = \"reference\";\nvar variationPlacements = basePlacements.reduce(function(acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar beforeRead = \"beforeRead\";\nvar read = \"read\";\nvar afterRead = \"afterRead\";\nvar beforeMain = \"beforeMain\";\nvar main = \"main\";\nvar afterMain = \"afterMain\";\nvar beforeWrite = \"beforeWrite\";\nvar write = \"write\";\nvar afterWrite = \"afterWrite\";\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\n// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\nfunction getNodeName(element) {\n  return element ? (element.nodeName || \"\").toLowerCase() : null;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getWindow.js\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n  if (node.toString() !== \"[object Window]\") {\n    var ownerDocument2 = node.ownerDocument;\n    return ownerDocument2 ? ownerDocument2.defaultView || window : window;\n  }\n  return node;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\nfunction isShadowRoot(node) {\n  if (typeof ShadowRoot === \"undefined\") {\n    return false;\n  }\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// node_modules/@popperjs/core/lib/modifiers/applyStyles.js\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function(name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name];\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    }\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function(name2) {\n      var value = attributes[name2];\n      if (value === false) {\n        element.removeAttribute(name2);\n      } else {\n        element.setAttribute(name2, value === true ? \"\" : value);\n      }\n    });\n  });\n}\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: \"0\",\n      top: \"0\",\n      margin: \"0\"\n    },\n    arrow: {\n      position: \"absolute\"\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n  return function() {\n    Object.keys(state.elements).forEach(function(name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);\n      var style = styleProperties.reduce(function(style2, property) {\n        style2[property] = \"\";\n        return style2;\n      }, {});\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function(attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n}\nvar applyStyles_default = {\n  name: \"applyStyles\",\n  enabled: true,\n  phase: \"write\",\n  fn: applyStyles,\n  effect,\n  requires: [\"computeStyles\"]\n};\n\n// node_modules/@popperjs/core/lib/utils/getBasePlacement.js\nfunction getBasePlacement(placement) {\n  return placement.split(\"-\")[0];\n}\n\n// node_modules/@popperjs/core/lib/utils/math.js\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\n\n// node_modules/@popperjs/core/lib/utils/userAgent.js\nfunction getUAString() {\n  var uaData = navigator.userAgentData;\n  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(function(item) {\n      return item.brand + \"/\" + item.version;\n    }).join(\" \");\n  }\n  return navigator.userAgent;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js\nfunction isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width,\n    height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x,\n    y\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\nfunction getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element);\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width,\n    height\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/contains.js\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode();\n  if (parent.contains(child)) {\n    return true;\n  } else if (rootNode && isShadowRoot(rootNode)) {\n    var next = child;\n    do {\n      if (next && parent.isSameNode(next)) {\n        return true;\n      }\n      next = next.parentNode || next.host;\n    } while (next);\n  }\n  return false;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\nfunction isTableElement(element) {\n  return [\"table\", \"td\", \"th\"].indexOf(getNodeName(element)) >= 0;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\nfunction getDocumentElement(element) {\n  return ((isElement(element) ? element.ownerDocument : (\n    // $FlowFixMe[prop-missing]\n    element.document\n  )) || window.document).documentElement;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\nfunction getParentNode(element) {\n  if (getNodeName(element) === \"html\") {\n    return element;\n  }\n  return (\n    // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || // DOM Element detected\n    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element)\n  );\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === \"fixed\") {\n    return null;\n  }\n  return element.offsetParent;\n}\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n  if (isIE && isHTMLElement(element)) {\n    var elementCss = getComputedStyle(element);\n    if (elementCss.position === \"fixed\") {\n      return null;\n    }\n  }\n  var currentNode = getParentNode(element);\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n  while (isHTMLElement(currentNode) && [\"html\", \"body\"].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode);\n    if (css.transform !== \"none\" || css.perspective !== \"none\" || css.contain === \"paint\" || [\"transform\", \"perspective\"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === \"filter\" || isFirefox && css.filter && css.filter !== \"none\") {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n  return null;\n}\nfunction getOffsetParent(element) {\n  var window2 = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === \"static\") {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle(offsetParent).position === \"static\")) {\n    return window2;\n  }\n  return offsetParent || getContainingBlock(element) || window2;\n}\n\n// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\nfunction getMainAxisFromPlacement(placement) {\n  return [\"top\", \"bottom\"].indexOf(placement) >= 0 ? \"x\" : \"y\";\n}\n\n// node_modules/@popperjs/core/lib/utils/within.js\nfunction within(min3, value, max3) {\n  return max(min3, min(value, max3));\n}\nfunction withinMaxClamp(min3, value, max3) {\n  var v = within(min3, value, max3);\n  return v > max3 ? max3 : v;\n}\n\n// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}\n\n// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}\n\n// node_modules/@popperjs/core/lib/utils/expandToHashMap.js\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function(hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}\n\n// node_modules/@popperjs/core/lib/modifiers/arrow.js\nvar toPaddingObject = function toPaddingObject2(padding, state) {\n  padding = typeof padding === \"function\" ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n};\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n  var state = _ref.state, name = _ref.name, options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets2 = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? \"height\" : \"width\";\n  if (!arrowElement || !popperOffsets2) {\n    return;\n  }\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === \"y\" ? top : left;\n  var maxProp = axis === \"y\" ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === \"y\" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2;\n  var min3 = paddingObject[minProp];\n  var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset3 = within(min3, center, max3);\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset3, _state$modifiersData$.centerOffset = offset3 - center, _state$modifiersData$);\n}\nfunction effect2(_ref2) {\n  var state = _ref2.state, options = _ref2.options;\n  var _options$element = options.element, arrowElement = _options$element === void 0 ? \"[data-popper-arrow]\" : _options$element;\n  if (arrowElement == null) {\n    return;\n  }\n  if (typeof arrowElement === \"string\") {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n    if (!arrowElement) {\n      return;\n    }\n  }\n  if (!contains(state.elements.popper, arrowElement)) {\n    return;\n  }\n  state.elements.arrow = arrowElement;\n}\nvar arrow_default = {\n  name: \"arrow\",\n  enabled: true,\n  phase: \"main\",\n  fn: arrow,\n  effect: effect2,\n  requires: [\"popperOffsets\"],\n  requiresIfExists: [\"preventOverflow\"]\n};\n\n// node_modules/@popperjs/core/lib/utils/getVariation.js\nfunction getVariation(placement) {\n  return placement.split(\"-\")[1];\n}\n\n// node_modules/@popperjs/core/lib/modifiers/computeStyles.js\nvar unsetSides = {\n  top: \"auto\",\n  right: \"auto\",\n  bottom: \"auto\",\n  left: \"auto\"\n};\nfunction roundOffsetsByDPR(_ref, win) {\n  var x = _ref.x, y = _ref.y;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;\n  var _ref3 = typeof roundOffsets === \"function\" ? roundOffsets({\n    x,\n    y\n  }) : {\n    x,\n    y\n  };\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty(\"x\");\n  var hasY = offsets.hasOwnProperty(\"y\");\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper2);\n    var heightProp = \"clientHeight\";\n    var widthProp = \"clientWidth\";\n    if (offsetParent === getWindow(popper2)) {\n      offsetParent = getDocumentElement(popper2);\n      if (getComputedStyle(offsetParent).position !== \"static\" && position === \"absolute\") {\n        heightProp = \"scrollHeight\";\n        widthProp = \"scrollWidth\";\n      }\n    }\n    offsetParent = offsetParent;\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (\n        // $FlowFixMe[prop-missing]\n        offsetParent[heightProp]\n      );\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (\n        // $FlowFixMe[prop-missing]\n        offsetParent[widthProp]\n      );\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n  var commonStyles = Object.assign({\n    position\n  }, adaptive && unsetSides);\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x,\n    y\n  }, getWindow(popper2)) : {\n    x,\n    y\n  };\n  x = _ref4.x;\n  y = _ref4.y;\n  if (gpuAcceleration) {\n    var _Object$assign;\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? \"0\" : \"\", _Object$assign[sideX] = hasX ? \"0\" : \"\", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : \"\", _Object$assign2[sideX] = hasX ? x + \"px\" : \"\", _Object$assign2.transform = \"\", _Object$assign2));\n}\nfunction computeStyles(_ref5) {\n  var state = _ref5.state, options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration,\n    isFixed: state.options.strategy === \"fixed\"\n  };\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive,\n      roundOffsets\n    })));\n  }\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: \"absolute\",\n      adaptive: false,\n      roundOffsets\n    })));\n  }\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    \"data-popper-placement\": state.placement\n  });\n}\nvar computeStyles_default = {\n  name: \"computeStyles\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  fn: computeStyles,\n  data: {}\n};\n\n// node_modules/@popperjs/core/lib/modifiers/eventListeners.js\nvar passive = {\n  passive: true\n};\nfunction effect3(_ref) {\n  var state = _ref.state, instance = _ref.instance, options = _ref.options;\n  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;\n  var window2 = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n  if (scroll) {\n    scrollParents.forEach(function(scrollParent) {\n      scrollParent.addEventListener(\"scroll\", instance.update, passive);\n    });\n  }\n  if (resize) {\n    window2.addEventListener(\"resize\", instance.update, passive);\n  }\n  return function() {\n    if (scroll) {\n      scrollParents.forEach(function(scrollParent) {\n        scrollParent.removeEventListener(\"scroll\", instance.update, passive);\n      });\n    }\n    if (resize) {\n      window2.removeEventListener(\"resize\", instance.update, passive);\n    }\n  };\n}\nvar eventListeners_default = {\n  name: \"eventListeners\",\n  enabled: true,\n  phase: \"write\",\n  fn: function fn() {\n  },\n  effect: effect3,\n  data: {}\n};\n\n// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\nvar hash = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function(matched) {\n    return hash[matched];\n  });\n}\n\n// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\nvar hash2 = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function(matched) {\n    return hash2[matched];\n  });\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\nfunction getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft,\n    scrollTop\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\nfunction getWindowScrollBarX(element) {\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\nfunction getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n    if (layoutViewport || !layoutViewport && strategy === \"fixed\") {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x: x + getWindowScrollBarX(element),\n    y\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n  if (getComputedStyle(body || html).direction === \"rtl\") {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\nfunction isScrollParent(element) {\n  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\nfunction getScrollParent(node) {\n  if ([\"html\", \"body\", \"#document\"].indexOf(getNodeName(node)) >= 0) {\n    return node.ownerDocument.body;\n  }\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n  return getScrollParent(getParentNode(node));\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n  if (list === void 0) {\n    list = [];\n  }\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : (\n    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    updatedList.concat(listScrollParents(getParentNode(target)))\n  );\n}\n\n// node_modules/@popperjs/core/lib/utils/rectToClientRect.js\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === \"fixed\");\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n}\nfunction getClippingParents(element) {\n  var clippingParents2 = listScrollParents(getParentNode(element));\n  var canEscapeClipping = [\"absolute\", \"fixed\"].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n  if (!isElement(clipperElement)) {\n    return [];\n  }\n  return clippingParents2.filter(function(clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== \"body\";\n  });\n}\nfunction getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === \"clippingParents\" ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents2[0];\n  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n\n// node_modules/@popperjs/core/lib/utils/computeOffsets.js\nfunction computeOffsets(_ref) {\n  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference2.x + reference2.width / 2 - element.width / 2;\n  var commonY = reference2.y + reference2.height / 2 - element.height / 2;\n  var offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference2.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference2.y + reference2.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference2.x + reference2.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference2.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference2.x,\n        y: reference2.y\n      };\n  }\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n  if (mainAxis != null) {\n    var len = mainAxis === \"y\" ? \"height\" : \"width\";\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n  return offsets;\n}\n\n// node_modules/@popperjs/core/lib/utils/detectOverflow.js\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets2 = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: \"absolute\",\n    placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset;\n  if (elementContext === popper && offsetData) {\n    var offset3 = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function(key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? \"y\" : \"x\";\n      overflowOffsets[key] += offset3[axis] * multiply;\n    });\n  }\n  return overflowOffsets;\n}\n\n// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {\n    return getVariation(placement2) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements3.filter(function(placement2) {\n    return allowedAutoPlacements.indexOf(placement2) >= 0;\n  });\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements3;\n  }\n  var overflows = allowedPlacements.reduce(function(acc, placement2) {\n    acc[placement2] = detectOverflow(state, {\n      placement: placement2,\n      boundary,\n      rootBoundary,\n      padding\n    })[getBasePlacement(placement2)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function(a, b) {\n    return overflows[a] - overflows[b];\n  });\n}\n\n// node_modules/@popperjs/core/lib/modifiers/flip.js\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\nfunction flip(_ref) {\n  var state = _ref.state, options = _ref.options, name = _ref.name;\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {\n    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {\n      placement: placement2,\n      boundary,\n      rootBoundary,\n      padding,\n      flipVariations,\n      allowedAutoPlacements\n    }) : placement2);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = /* @__PURE__ */ new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements3[0];\n  for (var i = 0; i < placements3.length; i++) {\n    var placement = placements3[i];\n    var _basePlacement = getBasePlacement(placement);\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? \"width\" : \"height\";\n    var overflow = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      altBoundary,\n      padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n    if (checks.every(function(check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n    checksMap.set(placement, checks);\n  }\n  if (makeFallbackChecks) {\n    var numberOfChecks = flipVariations ? 3 : 1;\n    var _loop = function _loop2(_i2) {\n      var fittingPlacement = placements3.find(function(placement2) {\n        var checks2 = checksMap.get(placement2);\n        if (checks2) {\n          return checks2.slice(0, _i2).every(function(check) {\n            return check;\n          });\n        }\n      });\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n      if (_ret === \"break\")\n        break;\n    }\n  }\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n}\nvar flip_default = {\n  name: \"flip\",\n  enabled: true,\n  phase: \"main\",\n  fn: flip,\n  requiresIfExists: [\"offset\"],\n  data: {\n    _skip: false\n  }\n};\n\n// node_modules/@popperjs/core/lib/modifiers/hide.js\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function(side) {\n    return overflow[side] >= 0;\n  });\n}\nfunction hide(_ref) {\n  var state = _ref.state, name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: \"reference\"\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets,\n    popperEscapeOffsets,\n    isReferenceHidden,\n    hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    \"data-popper-reference-hidden\": isReferenceHidden,\n    \"data-popper-escaped\": hasPopperEscaped\n  });\n}\nvar hide_default = {\n  name: \"hide\",\n  enabled: true,\n  phase: \"main\",\n  requiresIfExists: [\"preventOverflow\"],\n  fn: hide\n};\n\n// node_modules/@popperjs/core/lib/modifiers/offset.js\nfunction distanceAndSkiddingToXY(placement, rects, offset3) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n  var _ref = typeof offset3 === \"function\" ? offset3(Object.assign({}, rects, {\n    placement\n  })) : offset3, skidding = _ref[0], distance = _ref[1];\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\nfunction offset(_ref2) {\n  var state = _ref2.state, options = _ref2.options, name = _ref2.name;\n  var _options$offset = options.offset, offset3 = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function(acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset3);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n  state.modifiersData[name] = data;\n}\nvar offset_default = {\n  name: \"offset\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"popperOffsets\"],\n  fn: offset\n};\n\n// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\nfunction popperOffsets(_ref) {\n  var state = _ref.state, name = _ref.name;\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: \"absolute\",\n    placement: state.placement\n  });\n}\nvar popperOffsets_default = {\n  name: \"popperOffsets\",\n  enabled: true,\n  phase: \"read\",\n  fn: popperOffsets,\n  data: {}\n};\n\n// node_modules/@popperjs/core/lib/utils/getAltAxis.js\nfunction getAltAxis(axis) {\n  return axis === \"x\" ? \"y\" : \"x\";\n}\n\n// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\nfunction preventOverflow(_ref) {\n  var state = _ref.state, options = _ref.options, name = _ref.name;\n  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary,\n    rootBoundary,\n    padding,\n    altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets2 = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === \"function\" ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === \"number\" ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n  if (!popperOffsets2) {\n    return;\n  }\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n    var mainSide = mainAxis === \"y\" ? top : left;\n    var altSide = mainAxis === \"y\" ? bottom : right;\n    var len = mainAxis === \"y\" ? \"height\" : \"width\";\n    var offset3 = popperOffsets2[mainAxis];\n    var min3 = offset3 + overflow[mainSide];\n    var max3 = offset3 - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData[\"arrow#persistent\"] ? state.modifiersData[\"arrow#persistent\"].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide];\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === \"y\" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset3 + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset3 + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? min(min3, tetherMin) : min3, offset3, tether ? max(max3, tetherMax) : max3);\n    popperOffsets2[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset3;\n  }\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n    var _mainSide = mainAxis === \"x\" ? top : left;\n    var _altSide = mainAxis === \"x\" ? bottom : right;\n    var _offset = popperOffsets2[altAxis];\n    var _len = altAxis === \"y\" ? \"height\" : \"width\";\n    var _min = _offset + overflow[_mainSide];\n    var _max = _offset - overflow[_altSide];\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n    popperOffsets2[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n  state.modifiersData[name] = data;\n}\nvar preventOverflow_default = {\n  name: \"preventOverflow\",\n  enabled: true,\n  phase: \"main\",\n  fn: preventOverflow,\n  requiresIfExists: [\"offset\"]\n};\n\n// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\nfunction getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n}\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n// node_modules/@popperjs/core/lib/utils/orderModifiers.js\nfunction order(modifiers) {\n  var map = /* @__PURE__ */ new Map();\n  var visited = /* @__PURE__ */ new Set();\n  var result = [];\n  modifiers.forEach(function(modifier) {\n    map.set(modifier.name, modifier);\n  });\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function(dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n  modifiers.forEach(function(modifier) {\n    if (!visited.has(modifier.name)) {\n      sort(modifier);\n    }\n  });\n  return result;\n}\nfunction orderModifiers(modifiers) {\n  var orderedModifiers = order(modifiers);\n  return modifierPhases.reduce(function(acc, phase) {\n    return acc.concat(orderedModifiers.filter(function(modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}\n\n// node_modules/@popperjs/core/lib/utils/debounce.js\nfunction debounce2(fn2) {\n  var pending;\n  return function() {\n    if (!pending) {\n      pending = new Promise(function(resolve) {\n        Promise.resolve().then(function() {\n          pending = void 0;\n          resolve(fn2());\n        });\n      });\n    }\n    return pending;\n  };\n}\n\n// node_modules/@popperjs/core/lib/utils/mergeByName.js\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function(merged2, current) {\n    var existing = merged2[current.name];\n    merged2[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged2;\n  }, {});\n  return Object.keys(merged).map(function(key) {\n    return merged[key];\n  });\n}\n\n// node_modules/@popperjs/core/lib/createPopper.js\nvar DEFAULT_OPTIONS = {\n  placement: \"bottom\",\n  modifiers: [],\n  strategy: \"absolute\"\n};\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return !args.some(function(element) {\n    return !(element && typeof element.getBoundingClientRect === \"function\");\n  });\n}\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper4(reference2, popper2, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n    var state = {\n      placement: \"bottom\",\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference2,\n        popper: popper2\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options2 = typeof setOptionsAction === \"function\" ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options2);\n        state.scrollParents = {\n          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],\n          popper: listScrollParents(popper2)\n        };\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));\n        state.orderedModifiers = orderedModifiers.filter(function(m) {\n          return m.enabled;\n        });\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;\n        if (!areValidElements(reference3, popper3)) {\n          return;\n        }\n        state.rects = {\n          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === \"fixed\"),\n          popper: getLayoutRect(popper3)\n        };\n        state.reset = false;\n        state.placement = state.options.placement;\n        state.orderedModifiers.forEach(function(modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {\n          if (state.reset === true) {\n            state.reset = false;\n            index2 = -1;\n            continue;\n          }\n          var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;\n          if (typeof fn2 === \"function\") {\n            state = fn2({\n              state,\n              options: _options,\n              name,\n              instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce2(function() {\n        return new Promise(function(resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n    if (!areValidElements(reference2, popper2)) {\n      return instance;\n    }\n    instance.setOptions(options).then(function(state2) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state2);\n      }\n    });\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function(_ref) {\n        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;\n        if (typeof effect4 === \"function\") {\n          var cleanupFn = effect4({\n            state,\n            name,\n            instance,\n            options: options2\n          });\n          var noopFn = function noopFn2() {\n          };\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function(fn2) {\n        return fn2();\n      });\n      effectCleanupFns = [];\n    }\n    return instance;\n  };\n}\nvar createPopper = popperGenerator();\n\n// node_modules/@popperjs/core/lib/popper-lite.js\nvar defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];\nvar createPopper2 = popperGenerator({\n  defaultModifiers\n});\n\n// node_modules/@popperjs/core/lib/popper.js\nvar defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];\nvar createPopper3 = popperGenerator({\n  defaultModifiers: defaultModifiers2\n});\n\n// node_modules/@mui/base/Popper/Popper.js\nvar import_prop_types6 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/generateUtilityClass/index.js\ninit_esm();\n\n// node_modules/@mui/base/generateUtilityClasses/index.js\ninit_esm();\n\n// node_modules/@mui/base/Popper/popperClasses.js\nfunction getPopperUtilityClass(slot) {\n  return generateUtilityClass(\"MuiPopper\", slot);\n}\nvar popperClasses = generateUtilityClasses(\"MuiPopper\", [\"root\"]);\n\n// node_modules/@mui/base/Popper/Popper.js\nvar import_jsx_runtime9 = __toESM(require_jsx_runtime());\nvar _excluded3 = [\"anchorEl\", \"children\", \"direction\", \"disablePortal\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"slotProps\", \"slots\", \"TransitionProps\", \"ownerState\"];\nvar _excluded22 = [\"anchorEl\", \"children\", \"container\", \"direction\", \"disablePortal\", \"keepMounted\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"style\", \"transition\", \"slotProps\", \"slots\"];\nfunction flipPlacement(placement, direction) {\n  if (direction === \"ltr\") {\n    return placement;\n  }\n  switch (placement) {\n    case \"bottom-end\":\n      return \"bottom-start\";\n    case \"bottom-start\":\n      return \"bottom-end\";\n    case \"top-end\":\n      return \"top-start\";\n    case \"top-start\":\n      return \"top-end\";\n    default:\n      return placement;\n  }\n}\nfunction resolveAnchorEl(anchorEl) {\n  return typeof anchorEl === \"function\" ? anchorEl() : anchorEl;\n}\nfunction isHTMLElement2(element) {\n  return element.nodeType !== void 0;\n}\nfunction isVirtualElement(element) {\n  return !isHTMLElement2(element);\n}\nvar useUtilityClasses = () => {\n  const slots = {\n    root: [\"root\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));\n};\nvar defaultPopperOptions = {};\nvar PopperTooltip = React9.forwardRef(function PopperTooltip2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    anchorEl,\n    children,\n    direction,\n    disablePortal,\n    modifiers,\n    open,\n    placement: initialPlacement,\n    popperOptions,\n    popperRef: popperRefProp,\n    slotProps = {},\n    slots = {},\n    TransitionProps\n    // @ts-ignore internal logic\n    // prevent from spreading to DOM, it can come from the parent component e.g. Select.\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);\n  const tooltipRef = React9.useRef(null);\n  const ownRef = useForkRef(tooltipRef, forwardedRef);\n  const popperRef = React9.useRef(null);\n  const handlePopperRef = useForkRef(popperRef, popperRefProp);\n  const handlePopperRefRef = React9.useRef(handlePopperRef);\n  useEnhancedEffect_default(() => {\n    handlePopperRefRef.current = handlePopperRef;\n  }, [handlePopperRef]);\n  React9.useImperativeHandle(popperRefProp, () => popperRef.current, []);\n  const rtlPlacement = flipPlacement(initialPlacement, direction);\n  const [placement, setPlacement] = React9.useState(rtlPlacement);\n  const [resolvedAnchorElement, setResolvedAnchorElement] = React9.useState(resolveAnchorEl(anchorEl));\n  React9.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.forceUpdate();\n    }\n  });\n  React9.useEffect(() => {\n    if (anchorEl) {\n      setResolvedAnchorElement(resolveAnchorEl(anchorEl));\n    }\n  }, [anchorEl]);\n  useEnhancedEffect_default(() => {\n    if (!resolvedAnchorElement || !open) {\n      return void 0;\n    }\n    const handlePopperUpdate = (data) => {\n      setPlacement(data.placement);\n    };\n    if (true) {\n      if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {\n        const box = resolvedAnchorElement.getBoundingClientRect();\n        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          console.warn([\"MUI: The `anchorEl` prop provided to the component is invalid.\", \"The anchor element should be part of the document layout.\", \"Make sure the element is present in the document or that it's not display none.\"].join(\"\\n\"));\n        }\n      }\n    }\n    let popperModifiers = [{\n      name: \"preventOverflow\",\n      options: {\n        altBoundary: disablePortal\n      }\n    }, {\n      name: \"flip\",\n      options: {\n        altBoundary: disablePortal\n      }\n    }, {\n      name: \"onUpdate\",\n      enabled: true,\n      phase: \"afterWrite\",\n      fn: ({\n        state\n      }) => {\n        handlePopperUpdate(state);\n      }\n    }];\n    if (modifiers != null) {\n      popperModifiers = popperModifiers.concat(modifiers);\n    }\n    if (popperOptions && popperOptions.modifiers != null) {\n      popperModifiers = popperModifiers.concat(popperOptions.modifiers);\n    }\n    const popper2 = createPopper3(resolvedAnchorElement, tooltipRef.current, _extends({\n      placement: rtlPlacement\n    }, popperOptions, {\n      modifiers: popperModifiers\n    }));\n    handlePopperRefRef.current(popper2);\n    return () => {\n      popper2.destroy();\n      handlePopperRefRef.current(null);\n    };\n  }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);\n  const childProps = {\n    placement\n  };\n  if (TransitionProps !== null) {\n    childProps.TransitionProps = TransitionProps;\n  }\n  const classes = useUtilityClasses();\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: \"tooltip\",\n      ref: ownRef\n    },\n    ownerState: props,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime9.jsx)(Root, _extends({}, rootProps, {\n    children: typeof children === \"function\" ? children(childProps) : children\n  }));\n});\nvar Popper = React9.forwardRef(function Popper2(props, forwardedRef) {\n  const {\n    anchorEl,\n    children,\n    container: containerProp,\n    direction = \"ltr\",\n    disablePortal = false,\n    keepMounted = false,\n    modifiers,\n    open,\n    placement = \"bottom\",\n    popperOptions = defaultPopperOptions,\n    popperRef,\n    style,\n    transition = false,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);\n  const [exited, setExited] = React9.useState(true);\n  const handleEnter = () => {\n    setExited(false);\n  };\n  const handleExited = () => {\n    setExited(true);\n  };\n  if (!keepMounted && !open && (!transition || exited)) {\n    return null;\n  }\n  let container;\n  if (containerProp) {\n    container = containerProp;\n  } else if (anchorEl) {\n    const resolvedAnchorEl = resolveAnchorEl(anchorEl);\n    container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;\n  }\n  const display = !open && keepMounted && (!transition || exited) ? \"none\" : void 0;\n  const transitionProps = transition ? {\n    in: open,\n    onEnter: handleEnter,\n    onExited: handleExited\n  } : void 0;\n  return (0, import_jsx_runtime9.jsx)(Portal, {\n    disablePortal,\n    container,\n    children: (0, import_jsx_runtime9.jsx)(PopperTooltip, _extends({\n      anchorEl,\n      direction,\n      disablePortal,\n      modifiers,\n      ref: forwardedRef,\n      open: transition ? !exited : open,\n      placement,\n      popperOptions,\n      popperRef,\n      slotProps,\n      slots\n    }, other, {\n      style: _extends({\n        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.\n        position: \"fixed\",\n        // Fix Popper.js display issue\n        top: 0,\n        left: 0,\n        display\n      }, style),\n      TransitionProps: transitionProps,\n      children\n    }))\n  });\n});\ntrue ? Popper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: chainPropTypes(import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.object, import_prop_types6.default.func]), (props) => {\n    if (props.open) {\n      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);\n      if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          return new Error([\"MUI: The `anchorEl` prop provided to the component is invalid.\", \"The anchor element should be part of the document layout.\", \"Make sure the element is present in the document or that it's not display none.\"].join(\"\\n\"));\n        }\n      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== \"function\" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {\n        return new Error([\"MUI: The `anchorEl` prop provided to the component is invalid.\", \"It should be an HTML element instance or a virtualElement \", \"(https://popper.js.org/docs/v2/virtual-elements/).\"].join(\"\\n\"));\n      }\n    }\n    return null;\n  }),\n  /**\n   * Popper render function or node.\n   */\n  children: import_prop_types6.default.oneOfType([import_prop_types6.default.node, import_prop_types6.default.func]),\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.func]),\n  /**\n   * Direction of the text.\n   * @default 'ltr'\n   */\n  direction: import_prop_types6.default.oneOf([\"ltr\", \"rtl\"]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: import_prop_types6.default.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Popper.\n   * @default false\n   */\n  keepMounted: import_prop_types6.default.bool,\n  /**\n   * Popper.js is based on a \"plugin-like\" architecture,\n   * most of its features are fully encapsulated \"modifiers\".\n   *\n   * A modifier is a function that is called each time Popper.js needs to\n   * compute the position of the popper.\n   * For this reason, modifiers should be very performant to avoid bottlenecks.\n   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).\n   */\n  modifiers: import_prop_types6.default.arrayOf(import_prop_types6.default.shape({\n    data: import_prop_types6.default.object,\n    effect: import_prop_types6.default.func,\n    enabled: import_prop_types6.default.bool,\n    fn: import_prop_types6.default.func,\n    name: import_prop_types6.default.any,\n    options: import_prop_types6.default.object,\n    phase: import_prop_types6.default.oneOf([\"afterMain\", \"afterRead\", \"afterWrite\", \"beforeMain\", \"beforeRead\", \"beforeWrite\", \"main\", \"read\", \"write\"]),\n    requires: import_prop_types6.default.arrayOf(import_prop_types6.default.string),\n    requiresIfExists: import_prop_types6.default.arrayOf(import_prop_types6.default.string)\n  })),\n  /**\n   * If `true`, the component is shown.\n   */\n  open: import_prop_types6.default.bool.isRequired,\n  /**\n   * Popper placement.\n   * @default 'bottom'\n   */\n  placement: import_prop_types6.default.oneOf([\"auto-end\", \"auto-start\", \"auto\", \"bottom-end\", \"bottom-start\", \"bottom\", \"left-end\", \"left-start\", \"left\", \"right-end\", \"right-start\", \"right\", \"top-end\", \"top-start\", \"top\"]),\n  /**\n   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.\n   * @default {}\n   */\n  popperOptions: import_prop_types6.default.shape({\n    modifiers: import_prop_types6.default.array,\n    onFirstUpdate: import_prop_types6.default.func,\n    placement: import_prop_types6.default.oneOf([\"auto-end\", \"auto-start\", \"auto\", \"bottom-end\", \"bottom-start\", \"bottom\", \"left-end\", \"left-start\", \"left\", \"right-end\", \"right-start\", \"right\", \"top-end\", \"top-start\", \"top\"]),\n    strategy: import_prop_types6.default.oneOf([\"absolute\", \"fixed\"])\n  }),\n  /**\n   * A ref that points to the used popper instance.\n   */\n  popperRef: refType_default,\n  /**\n   * The props used for each slot inside the Popper.\n   * @default {}\n   */\n  slotProps: import_prop_types6.default.shape({\n    root: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Popper.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types6.default.shape({\n    root: import_prop_types6.default.elementType\n  }),\n  /**\n   * Help supporting a react-transition-group/Transition component.\n   * @default false\n   */\n  transition: import_prop_types6.default.bool\n} : void 0;\n\n// node_modules/@mui/base/unstable_useModal/useModal.js\ninit_extends();\nvar React10 = __toESM(require_react());\ninit_esm();\nfunction getContainer2(container) {\n  return typeof container === \"function\" ? container() : container;\n}\nfunction getHasTransition(children) {\n  return children ? children.props.hasOwnProperty(\"in\") : false;\n}\nvar defaultManager = new ModalManager();\nfunction useModal(parameters) {\n  const {\n    container,\n    disableEscapeKeyDown = false,\n    disableScrollLock = false,\n    // @ts-ignore internal logic - Base UI supports the manager as a prop too\n    manager = defaultManager,\n    closeAfterTransition = false,\n    onTransitionEnter,\n    onTransitionExited,\n    children,\n    onClose,\n    open,\n    rootRef\n  } = parameters;\n  const modal = React10.useRef({});\n  const mountNodeRef = React10.useRef(null);\n  const modalRef = React10.useRef(null);\n  const handleRef = useForkRef(modalRef, rootRef);\n  const [exited, setExited] = React10.useState(!open);\n  const hasTransition = getHasTransition(children);\n  let ariaHiddenProp = true;\n  if (parameters[\"aria-hidden\"] === \"false\" || parameters[\"aria-hidden\"] === false) {\n    ariaHiddenProp = false;\n  }\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mount = mountNodeRef.current;\n    return modal.current;\n  };\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    });\n    if (modalRef.current) {\n      modalRef.current.scrollTop = 0;\n    }\n  };\n  const handleOpen = useEventCallback_default(() => {\n    const resolvedContainer = getContainer2(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer);\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = React10.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = useEventCallback_default((node) => {\n    mountNodeRef.current = node;\n    if (!node) {\n      return;\n    }\n    if (open && isTopModal()) {\n      handleMounted();\n    } else if (modalRef.current) {\n      ariaHidden(modalRef.current, ariaHiddenProp);\n    }\n  });\n  const handleClose = React10.useCallback(() => {\n    manager.remove(getModal(), ariaHiddenProp);\n  }, [ariaHiddenProp, manager]);\n  React10.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  React10.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.key !== \"Escape\" || event.which === 229 || // Wait until IME is settled.\n    !isTopModal()) {\n      return;\n    }\n    if (!disableEscapeKeyDown) {\n      event.stopPropagation();\n      if (onClose) {\n        onClose(event, \"escapeKeyDown\");\n      }\n    }\n  };\n  const createHandleBackdropClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (onClose) {\n      onClose(event, \"backdropClick\");\n    }\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters);\n    delete propsEventHandlers.onTransitionEnter;\n    delete propsEventHandlers.onTransitionExited;\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n    return _extends({\n      role: \"presentation\"\n    }, externalEventHandlers, {\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      ref: handleRef\n    });\n  };\n  const getBackdropProps = (otherHandlers = {}) => {\n    const externalEventHandlers = otherHandlers;\n    return _extends({\n      \"aria-hidden\": true\n    }, externalEventHandlers, {\n      onClick: createHandleBackdropClick(externalEventHandlers),\n      open\n    });\n  };\n  const getTransitionProps = () => {\n    const handleEnter = () => {\n      setExited(false);\n      if (onTransitionEnter) {\n        onTransitionEnter();\n      }\n    };\n    const handleExited = () => {\n      setExited(true);\n      if (onTransitionExited) {\n        onTransitionExited();\n      }\n      if (closeAfterTransition) {\n        handleClose();\n      }\n    };\n    return {\n      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),\n      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)\n    };\n  };\n  return {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    rootRef: handleRef,\n    portalRef: handlePortalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  };\n}\n\n// node_modules/@mui/base/useSlider/useSlider.js\ninit_extends();\nvar React11 = __toESM(require_react());\ninit_esm();\nvar INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;\nfunction asc(a, b) {\n  return a - b;\n}\nfunction clamp(value, min3, max3) {\n  if (value == null) {\n    return min3;\n  }\n  return Math.min(Math.max(min3, value), max3);\n}\nfunction findClosest(values, currentValue) {\n  var _values$reduce;\n  const {\n    index: closestIndex\n  } = (_values$reduce = values.reduce((acc, value, index2) => {\n    const distance = Math.abs(currentValue - value);\n    if (acc === null || distance < acc.distance || distance === acc.distance) {\n      return {\n        distance,\n        index: index2\n      };\n    }\n    return acc;\n  }, null)) != null ? _values$reduce : {};\n  return closestIndex;\n}\nfunction trackFinger(event, touchId) {\n  if (touchId.current !== void 0 && event.changedTouches) {\n    const touchEvent = event;\n    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {\n      const touch = touchEvent.changedTouches[i];\n      if (touch.identifier === touchId.current) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction valueToPercent(value, min3, max3) {\n  return (value - min3) * 100 / (max3 - min3);\n}\nfunction percentToValue(percent, min3, max3) {\n  return (max3 - min3) * percent + min3;\n}\nfunction getDecimalPrecision(num) {\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split(\"e-\");\n    const matissaDecimalPart = parts[0].split(\".\")[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n  const decimalPart = num.toString().split(\".\")[1];\n  return decimalPart ? decimalPart.length : 0;\n}\nfunction roundValueToStep(value, step, min3) {\n  const nearest = Math.round((value - min3) / step) * step + min3;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n}\nfunction setValueIndex({\n  values,\n  newValue,\n  index: index2\n}) {\n  const output = values.slice();\n  output[index2] = newValue;\n  return output.sort(asc);\n}\nfunction focusThumb({\n  sliderRef,\n  activeIndex,\n  setActive\n}) {\n  var _sliderRef$current, _doc$activeElement;\n  const doc = ownerDocument(sliderRef.current);\n  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute(\"data-index\")) !== activeIndex) {\n    var _sliderRef$current2;\n    (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type=\"range\"][data-index=\"${activeIndex}\"]`).focus();\n  }\n  if (setActive) {\n    setActive(activeIndex);\n  }\n}\nfunction areValuesEqual(newValue, oldValue) {\n  if (typeof newValue === \"number\" && typeof oldValue === \"number\") {\n    return newValue === oldValue;\n  }\n  if (typeof newValue === \"object\" && typeof oldValue === \"object\") {\n    return areArraysEqual(newValue, oldValue);\n  }\n  return false;\n}\nvar axisProps = {\n  horizontal: {\n    offset: (percent) => ({\n      left: `${percent}%`\n    }),\n    leap: (percent) => ({\n      width: `${percent}%`\n    })\n  },\n  \"horizontal-reverse\": {\n    offset: (percent) => ({\n      right: `${percent}%`\n    }),\n    leap: (percent) => ({\n      width: `${percent}%`\n    })\n  },\n  vertical: {\n    offset: (percent) => ({\n      bottom: `${percent}%`\n    }),\n    leap: (percent) => ({\n      height: `${percent}%`\n    })\n  }\n};\nvar Identity = (x) => x;\nvar cachedSupportsTouchActionNone;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === void 0) {\n    if (typeof CSS !== \"undefined\" && typeof CSS.supports === \"function\") {\n      cachedSupportsTouchActionNone = CSS.supports(\"touch-action\", \"none\");\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction useSlider(parameters) {\n  const {\n    \"aria-labelledby\": ariaLabelledby,\n    defaultValue,\n    disabled = false,\n    disableSwap = false,\n    isRtl = false,\n    marks: marksProp = false,\n    max: max3 = 100,\n    min: min3 = 0,\n    name,\n    onChange,\n    onChangeCommitted,\n    orientation = \"horizontal\",\n    rootRef: ref,\n    scale = Identity,\n    step = 1,\n    tabIndex,\n    value: valueProp\n  } = parameters;\n  const touchId = React11.useRef();\n  const [active, setActive] = React11.useState(-1);\n  const [open, setOpen] = React11.useState(-1);\n  const [dragging, setDragging] = React11.useState(false);\n  const moveCount = React11.useRef(0);\n  const [valueDerived, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : min3,\n    name: \"Slider\"\n  });\n  const handleChange = onChange && ((event, value, thumbIndex) => {\n    const nativeEvent = event.nativeEvent || event;\n    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\n    Object.defineProperty(clonedEvent, \"target\", {\n      writable: true,\n      value: {\n        value,\n        name\n      }\n    });\n    onChange(clonedEvent, value, thumbIndex);\n  });\n  const range = Array.isArray(valueDerived);\n  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];\n  values = values.map((value) => clamp(value, min3, max3));\n  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max3 - min3) / step) + 1)].map((_, index2) => ({\n    value: min3 + step * index2\n  })) : marksProp || [];\n  const marksValues = marks.map((mark) => mark.value);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusedThumbIndex, setFocusedThumbIndex] = React11.useState(-1);\n  const sliderRef = React11.useRef();\n  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);\n  const handleRef = useForkRef(ref, handleFocusRef);\n  const createHandleHiddenInputFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu;\n    const index2 = Number(event.currentTarget.getAttribute(\"data-index\"));\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusedThumbIndex(index2);\n    }\n    setOpen(index2);\n    otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n  };\n  const createHandleHiddenInputBlur = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusedThumbIndex(-1);\n    }\n    setOpen(-1);\n    otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n  };\n  useEnhancedEffect_default(() => {\n    if (disabled && sliderRef.current.contains(document.activeElement)) {\n      var _document$activeEleme;\n      (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();\n    }\n  }, [disabled]);\n  if (disabled && active !== -1) {\n    setActive(-1);\n  }\n  if (disabled && focusedThumbIndex !== -1) {\n    setFocusedThumbIndex(-1);\n  }\n  const createHandleHiddenInputChange = (otherHandlers) => (event) => {\n    var _otherHandlers$onChan;\n    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);\n    const index2 = Number(event.currentTarget.getAttribute(\"data-index\"));\n    const value = values[index2];\n    const marksIndex = marksValues.indexOf(value);\n    let newValue = event.target.valueAsNumber;\n    if (marks && step == null) {\n      const maxMarksValue = marksValues[marksValues.length - 1];\n      if (newValue > maxMarksValue) {\n        newValue = maxMarksValue;\n      } else if (newValue < marksValues[0]) {\n        newValue = marksValues[0];\n      } else {\n        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];\n      }\n    }\n    newValue = clamp(newValue, min3, max3);\n    if (range) {\n      if (disableSwap) {\n        newValue = clamp(newValue, values[index2 - 1] || -Infinity, values[index2 + 1] || Infinity);\n      }\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        newValue,\n        index: index2\n      });\n      let activeIndex = index2;\n      if (!disableSwap) {\n        activeIndex = newValue.indexOf(previousValue);\n      }\n      focusThumb({\n        sliderRef,\n        activeIndex\n      });\n    }\n    setValueState(newValue);\n    setFocusedThumbIndex(index2);\n    if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n      handleChange(event, newValue, index2);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(event, newValue);\n    }\n  };\n  const previousIndex = React11.useRef();\n  let axis = orientation;\n  if (isRtl && orientation === \"horizontal\") {\n    axis += \"-reverse\";\n  }\n  const getFingerNewValue = ({\n    finger,\n    move = false\n  }) => {\n    const {\n      current: slider\n    } = sliderRef;\n    const {\n      width,\n      height,\n      bottom: bottom2,\n      left: left2\n    } = slider.getBoundingClientRect();\n    let percent;\n    if (axis.indexOf(\"vertical\") === 0) {\n      percent = (bottom2 - finger.y) / height;\n    } else {\n      percent = (finger.x - left2) / width;\n    }\n    if (axis.indexOf(\"-reverse\") !== -1) {\n      percent = 1 - percent;\n    }\n    let newValue;\n    newValue = percentToValue(percent, min3, max3);\n    if (step) {\n      newValue = roundValueToStep(newValue, step, min3);\n    } else {\n      const closestIndex = findClosest(marksValues, newValue);\n      newValue = marksValues[closestIndex];\n    }\n    newValue = clamp(newValue, min3, max3);\n    let activeIndex = 0;\n    if (range) {\n      if (!move) {\n        activeIndex = findClosest(values, newValue);\n      } else {\n        activeIndex = previousIndex.current;\n      }\n      if (disableSwap) {\n        newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);\n      }\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        newValue,\n        index: activeIndex\n      });\n      if (!(disableSwap && move)) {\n        activeIndex = newValue.indexOf(previousValue);\n        previousIndex.current = activeIndex;\n      }\n    }\n    return {\n      newValue,\n      activeIndex\n    };\n  };\n  const handleTouchMove = useEventCallback_default((nativeEvent) => {\n    const finger = trackFinger(nativeEvent, touchId);\n    if (!finger) {\n      return;\n    }\n    moveCount.current += 1;\n    if (nativeEvent.type === \"mousemove\" && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    const {\n      newValue,\n      activeIndex\n    } = getFingerNewValue({\n      finger,\n      move: true\n    });\n    focusThumb({\n      sliderRef,\n      activeIndex,\n      setActive\n    });\n    setValueState(newValue);\n    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {\n      setDragging(true);\n    }\n    if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n      handleChange(nativeEvent, newValue, activeIndex);\n    }\n  });\n  const handleTouchEnd = useEventCallback_default((nativeEvent) => {\n    const finger = trackFinger(nativeEvent, touchId);\n    setDragging(false);\n    if (!finger) {\n      return;\n    }\n    const {\n      newValue\n    } = getFingerNewValue({\n      finger,\n      move: true\n    });\n    setActive(-1);\n    if (nativeEvent.type === \"touchend\") {\n      setOpen(-1);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(nativeEvent, newValue);\n    }\n    touchId.current = void 0;\n    stopListening();\n  });\n  const handleTouchStart = useEventCallback_default((nativeEvent) => {\n    if (disabled) {\n      return;\n    }\n    if (!doesSupportTouchActionNone()) {\n      nativeEvent.preventDefault();\n    }\n    const touch = nativeEvent.changedTouches[0];\n    if (touch != null) {\n      touchId.current = touch.identifier;\n    }\n    const finger = trackFinger(nativeEvent, touchId);\n    if (finger !== false) {\n      const {\n        newValue,\n        activeIndex\n      } = getFingerNewValue({\n        finger\n      });\n      focusThumb({\n        sliderRef,\n        activeIndex,\n        setActive\n      });\n      setValueState(newValue);\n      if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n        handleChange(nativeEvent, newValue, activeIndex);\n      }\n    }\n    moveCount.current = 0;\n    const doc = ownerDocument(sliderRef.current);\n    doc.addEventListener(\"touchmove\", handleTouchMove);\n    doc.addEventListener(\"touchend\", handleTouchEnd);\n  });\n  const stopListening = React11.useCallback(() => {\n    const doc = ownerDocument(sliderRef.current);\n    doc.removeEventListener(\"mousemove\", handleTouchMove);\n    doc.removeEventListener(\"mouseup\", handleTouchEnd);\n    doc.removeEventListener(\"touchmove\", handleTouchMove);\n    doc.removeEventListener(\"touchend\", handleTouchEnd);\n  }, [handleTouchEnd, handleTouchMove]);\n  React11.useEffect(() => {\n    const {\n      current: slider\n    } = sliderRef;\n    slider.addEventListener(\"touchstart\", handleTouchStart, {\n      passive: doesSupportTouchActionNone()\n    });\n    return () => {\n      slider.removeEventListener(\"touchstart\", handleTouchStart, {\n        passive: doesSupportTouchActionNone()\n      });\n      stopListening();\n    };\n  }, [stopListening, handleTouchStart]);\n  React11.useEffect(() => {\n    if (disabled) {\n      stopListening();\n    }\n  }, [disabled, stopListening]);\n  const createHandleMouseDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous;\n    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);\n    if (disabled) {\n      return;\n    }\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.button !== 0) {\n      return;\n    }\n    event.preventDefault();\n    const finger = trackFinger(event, touchId);\n    if (finger !== false) {\n      const {\n        newValue,\n        activeIndex\n      } = getFingerNewValue({\n        finger\n      });\n      focusThumb({\n        sliderRef,\n        activeIndex,\n        setActive\n      });\n      setValueState(newValue);\n      if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n        handleChange(event, newValue, activeIndex);\n      }\n    }\n    moveCount.current = 0;\n    const doc = ownerDocument(sliderRef.current);\n    doc.addEventListener(\"mousemove\", handleTouchMove);\n    doc.addEventListener(\"mouseup\", handleTouchEnd);\n  };\n  const trackOffset = valueToPercent(range ? values[0] : min3, min3, max3);\n  const trackLeap = valueToPercent(values[values.length - 1], min3, max3) - trackOffset;\n  const getRootProps = (externalProps = {}) => {\n    const externalHandlers = extractEventHandlers(externalProps);\n    const ownEventHandlers = {\n      onMouseDown: createHandleMouseDown(externalHandlers || {})\n    };\n    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);\n    return _extends({}, externalProps, {\n      ref: handleRef\n    }, mergedEventHandlers);\n  };\n  const createHandleMouseOver = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous2;\n    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);\n    const index2 = Number(event.currentTarget.getAttribute(\"data-index\"));\n    setOpen(index2);\n  };\n  const createHandleMouseLeave = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous3;\n    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);\n    setOpen(-1);\n  };\n  const getThumbProps = (externalProps = {}) => {\n    const externalHandlers = extractEventHandlers(externalProps);\n    const ownEventHandlers = {\n      onMouseOver: createHandleMouseOver(externalHandlers || {}),\n      onMouseLeave: createHandleMouseLeave(externalHandlers || {})\n    };\n    return _extends({}, externalProps, externalHandlers, ownEventHandlers);\n  };\n  const getThumbStyle = (index2) => {\n    return {\n      // So the non active thumb doesn't show its label on hover.\n      pointerEvents: active !== -1 && active !== index2 ? \"none\" : void 0\n    };\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    var _parameters$step;\n    const externalHandlers = extractEventHandlers(externalProps);\n    const ownEventHandlers = {\n      onChange: createHandleHiddenInputChange(externalHandlers || {}),\n      onFocus: createHandleHiddenInputFocus(externalHandlers || {}),\n      onBlur: createHandleHiddenInputBlur(externalHandlers || {})\n    };\n    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);\n    return _extends({\n      tabIndex,\n      \"aria-labelledby\": ariaLabelledby,\n      \"aria-orientation\": orientation,\n      \"aria-valuemax\": scale(max3),\n      \"aria-valuemin\": scale(min3),\n      name,\n      type: \"range\",\n      min: parameters.min,\n      max: parameters.max,\n      step: parameters.step === null && parameters.marks ? \"any\" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,\n      disabled\n    }, externalProps, mergedEventHandlers, {\n      style: _extends({}, visuallyHidden_default, {\n        direction: isRtl ? \"rtl\" : \"ltr\",\n        // So that VoiceOver's focus indicator matches the thumb's dimensions\n        width: \"100%\",\n        height: \"100%\"\n      })\n    });\n  };\n  return {\n    active,\n    axis,\n    axisProps,\n    dragging,\n    focusedThumbIndex,\n    getHiddenInputProps,\n    getRootProps,\n    getThumbProps,\n    marks,\n    open,\n    range,\n    rootRef: handleRef,\n    trackLeap,\n    trackOffset,\n    values,\n    getThumbStyle\n  };\n}\n\n// node_modules/@mui/base/useSnackbar/useSnackbar.js\ninit_extends();\nvar React12 = __toESM(require_react());\ninit_esm();\nfunction useSnackbar(parameters = {}) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = React12.useRef();\n  React12.useEffect(() => {\n    if (!open) {\n      return void 0;\n    }\n    function handleKeyDown2(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        if (nativeEvent.key === \"Escape\" || nativeEvent.key === \"Esc\") {\n          onClose == null || onClose(nativeEvent, \"escapeKeyDown\");\n        }\n      }\n    }\n    document.addEventListener(\"keydown\", handleKeyDown2);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown2);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback_default((event, reason) => {\n    onClose == null || onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback_default((autoHideDurationParam) => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, \"timeout\");\n    }, autoHideDurationParam);\n  });\n  React12.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n  const handleClickAway = (event) => {\n    onClose == null || onClose(event, \"clickaway\");\n  };\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n  const handleResume = React12.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = (otherHandlers) => (event) => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null || onBlurCallback(event);\n    handleResume();\n  };\n  const createHandleFocus = (otherHandlers) => (event) => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null || onFocusCallback(event);\n    handlePause();\n  };\n  const createMouseEnter = (otherHandlers) => (event) => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null || onMouseEnterCallback(event);\n    handlePause();\n  };\n  const createMouseLeave = (otherHandlers) => (event) => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null || onMouseLeaveCallback(event);\n    handleResume();\n  };\n  React12.useEffect(() => {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener(\"focus\", handleResume);\n      window.addEventListener(\"blur\", handlePause);\n      return () => {\n        window.removeEventListener(\"focus\", handleResume);\n        window.removeEventListener(\"blur\", handlePause);\n      };\n    }\n    return void 0;\n  }, [disableWindowBlurListener, handleResume, open]);\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: \"presentation\"\n    }, externalProps, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}\n\n// node_modules/@mui/base/Badge/Badge.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React13 = __toESM(require_react());\nvar import_prop_types7 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Badge/badgeClasses.js\nfunction getBadgeUtilityClass(slot) {\n  return generateUtilityClass(\"MuiBadge\", slot);\n}\nvar badgeClasses = generateUtilityClasses(\"MuiBadge\", [\"root\", \"badge\", \"invisible\"]);\n\n// node_modules/@mui/base/Badge/Badge.js\nvar import_jsx_runtime10 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime11 = __toESM(require_jsx_runtime());\nvar _excluded4 = [\"badgeContent\", \"children\", \"invisible\", \"max\", \"slotProps\", \"slots\", \"showZero\"];\nvar useUtilityClasses2 = (ownerState) => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\"],\n    badge: [\"badge\", invisible && \"invisible\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\nvar Badge = React13.forwardRef(function Badge2(props, forwardedRef) {\n  var _slots$root, _slots$badge;\n  const {\n    children,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);\n  const {\n    badgeContent,\n    max: max3,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    max: maxProp\n  }));\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max: max3,\n    showZero\n  });\n  const classes = useUtilityClasses2(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"span\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : \"span\";\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return (0, import_jsx_runtime11.jsxs)(Root, _extends({}, rootProps, {\n    children: [children, (0, import_jsx_runtime10.jsx)(BadgeComponent, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\ntrue ? Badge.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: import_prop_types7.default.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: import_prop_types7.default.node,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: import_prop_types7.default.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: import_prop_types7.default.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: import_prop_types7.default.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: import_prop_types7.default.shape({\n    badge: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object]),\n    root: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types7.default.shape({\n    badge: import_prop_types7.default.elementType,\n    root: import_prop_types7.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Button/Button.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React15 = __toESM(require_react());\nvar import_prop_types8 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Button/buttonClasses.js\nfunction getButtonUtilityClass(slot) {\n  return generateUtilityClass(\"MuiButton\", slot);\n}\nvar buttonClasses = generateUtilityClasses(\"MuiButton\", [\"root\", \"active\", \"disabled\", \"focusVisible\"]);\n\n// node_modules/@mui/base/useButton/useButton.js\ninit_extends();\nvar React14 = __toESM(require_react());\ninit_esm();\nfunction useButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    href,\n    rootRef: externalRef,\n    tabIndex,\n    to,\n    type\n  } = parameters;\n  const buttonRef = React14.useRef();\n  const [active, setActive] = React14.useState(false);\n  const {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React14.useState(false);\n  if (disabled && !focusableWhenDisabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  React14.useEffect(() => {\n    isFocusVisibleRef.current = focusVisible;\n  }, [focusVisible, isFocusVisibleRef]);\n  const [hostElementName, setHostElementName] = React14.useState(\"\");\n  const createHandleMouseLeave = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous;\n    if (focusVisible) {\n      event.preventDefault();\n    }\n    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);\n  };\n  const createHandleBlur = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n  };\n  const createHandleFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu2;\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      var _otherHandlers$onFocu;\n      setFocusVisible(true);\n      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n    }\n    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);\n  };\n  const isNativeButton = () => {\n    const button = buttonRef.current;\n    return hostElementName === \"BUTTON\" || hostElementName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(button == null ? void 0 : button.type) || hostElementName === \"A\" && (button == null ? void 0 : button.href);\n  };\n  const createHandleClick = (otherHandlers) => (event) => {\n    if (!disabled) {\n      var _otherHandlers$onClic;\n      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    }\n  };\n  const createHandleMouseDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous2;\n    if (!disabled) {\n      setActive(true);\n      document.addEventListener(\"mouseup\", () => {\n        setActive(false);\n      }, {\n        once: true\n      });\n    }\n    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);\n  };\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === \" \") {\n      event.preventDefault();\n    }\n    if (event.target === event.currentTarget && event.key === \" \" && !disabled) {\n      setActive(true);\n    }\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === \"Enter\" && !disabled) {\n      var _otherHandlers$onClic2;\n      (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);\n      event.preventDefault();\n    }\n  };\n  const createHandleKeyUp = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyU;\n    if (event.target === event.currentTarget) {\n      setActive(false);\n    }\n    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === \" \" && !event.defaultMuiPrevented) {\n      var _otherHandlers$onClic3;\n      (_otherHandlers$onClic3 = otherHandlers.onClick) == null || _otherHandlers$onClic3.call(otherHandlers, event);\n    }\n  };\n  const updateHostElementName = React14.useCallback((instance) => {\n    var _instance$tagName;\n    setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : \"\");\n  }, []);\n  const handleRef = useForkRef(updateHostElementName, externalRef, focusVisibleRef, buttonRef);\n  const buttonProps = {};\n  if (tabIndex !== void 0) {\n    buttonProps.tabIndex = tabIndex;\n  }\n  if (hostElementName === \"BUTTON\") {\n    buttonProps.type = type != null ? type : \"button\";\n    if (focusableWhenDisabled) {\n      buttonProps[\"aria-disabled\"] = disabled;\n    } else {\n      buttonProps.disabled = disabled;\n    }\n  } else if (hostElementName !== \"\") {\n    if (!href && !to) {\n      buttonProps.role = \"button\";\n      buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;\n    }\n    if (disabled) {\n      buttonProps[\"aria-disabled\"] = disabled;\n      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;\n    }\n  }\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    const props = _extends({\n      type\n    }, externalEventHandlers, buttonProps, externalProps, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onClick: createHandleClick(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      onKeyUp: createHandleKeyUp(externalEventHandlers),\n      onMouseDown: createHandleMouseDown(externalEventHandlers),\n      onMouseLeave: createHandleMouseLeave(externalEventHandlers),\n      ref: handleRef\n    });\n    delete props.onFocusVisible;\n    return props;\n  };\n  return {\n    getRootProps,\n    focusVisible,\n    setFocusVisible,\n    active,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/Button/Button.js\nvar import_jsx_runtime12 = __toESM(require_jsx_runtime());\nvar _excluded5 = [\"action\", \"children\", \"disabled\", \"focusableWhenDisabled\", \"onFocusVisible\", \"slotProps\", \"slots\"];\nvar useUtilityClasses3 = (ownerState) => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focusVisible && \"focusVisible\", active && \"active\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\nvar Button = React15.forwardRef(function Button2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    action,\n    children,\n    focusableWhenDisabled = false,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);\n  const buttonRef = React15.useRef();\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton(_extends({}, props, {\n    focusableWhenDisabled\n  }));\n  React15.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = _extends({}, props, {\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  });\n  const classes = useUtilityClasses3(ownerState);\n  const defaultElement = other.href || other.to ? \"a\" : \"button\";\n  const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime12.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n});\ntrue ? Button.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.shape({\n    current: import_prop_types8.default.shape({\n      focusVisible: import_prop_types8.default.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types8.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types8.default.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types8.default.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: import_prop_types8.default.bool,\n  /**\n   * @ignore\n   */\n  href: import_prop_types8.default.string,\n  /**\n   * @ignore\n   */\n  onFocusVisible: import_prop_types8.default.func,\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  slotProps: import_prop_types8.default.shape({\n    root: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types8.default.shape({\n    root: import_prop_types8.default.elementType\n  }),\n  /**\n   * @ignore\n   */\n  to: import_prop_types8.default.string\n} : void 0;\n\n// node_modules/@mui/base/index.js\ninit_composeClasses();\n\n// node_modules/@mui/base/Dropdown/Dropdown.js\nvar React19 = __toESM(require_react());\nvar import_prop_types9 = __toESM(require_prop_types());\ninit_esm();\n\n// node_modules/@mui/base/useDropdown/DropdownContext.js\nvar React16 = __toESM(require_react());\nvar DropdownContext = React16.createContext(null);\n\n// node_modules/@mui/base/useDropdown/useDropdown.js\nvar React18 = __toESM(require_react());\n\n// node_modules/@mui/base/utils/useControllableReducer.js\ninit_extends();\nvar React17 = __toESM(require_react());\nfunction areEqual(a, b) {\n  return a === b;\n}\nvar EMPTY_OBJECT = {};\nvar NOOP = () => {\n};\nfunction getControlledState(internalState, controlledProps) {\n  const augmentedState = _extends({}, internalState);\n  Object.keys(controlledProps).forEach((key) => {\n    if (controlledProps[key] !== void 0) {\n      augmentedState[key] = controlledProps[key];\n    }\n  });\n  return augmentedState;\n}\nfunction useStateChangeDetection(parameters) {\n  const {\n    nextState,\n    initialState,\n    stateComparers,\n    onStateChange,\n    controlledProps,\n    lastActionRef\n  } = parameters;\n  const internalPreviousStateRef = React17.useRef(initialState);\n  React17.useEffect(() => {\n    if (lastActionRef.current === null) {\n      return;\n    }\n    const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);\n    Object.keys(nextState).forEach((key) => {\n      var _stateComparers$key;\n      const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;\n      const nextStateItem = nextState[key];\n      const previousStateItem = previousState[key];\n      if (previousStateItem == null && nextStateItem != null || previousStateItem != null && nextStateItem == null || previousStateItem != null && nextStateItem != null && !stateComparer(nextStateItem, previousStateItem)) {\n        var _event, _type;\n        onStateChange == null || onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : \"\", nextState);\n      }\n    });\n    internalPreviousStateRef.current = nextState;\n    lastActionRef.current = null;\n  }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);\n}\nfunction useControllableReducer(parameters) {\n  const lastActionRef = React17.useRef(null);\n  const {\n    reducer,\n    initialState,\n    controlledProps = EMPTY_OBJECT,\n    stateComparers = EMPTY_OBJECT,\n    onStateChange = NOOP,\n    actionContext\n  } = parameters;\n  const reducerWithControlledState = React17.useCallback((state, action) => {\n    lastActionRef.current = action;\n    const controlledState = getControlledState(state, controlledProps);\n    const newState = reducer(controlledState, action);\n    return newState;\n  }, [controlledProps, reducer]);\n  const [nextState, dispatch] = React17.useReducer(reducerWithControlledState, initialState);\n  const dispatchWithContext = React17.useCallback((action) => {\n    dispatch(_extends({}, action, {\n      context: actionContext\n    }));\n  }, [actionContext]);\n  useStateChangeDetection({\n    nextState,\n    initialState,\n    stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,\n    onStateChange: onStateChange != null ? onStateChange : NOOP,\n    controlledProps,\n    lastActionRef\n  });\n  return [getControlledState(nextState, controlledProps), dispatchWithContext];\n}\n\n// node_modules/@mui/base/useDropdown/useDropdown.types.js\nvar DropdownActionTypes = {\n  blur: \"dropdown:blur\",\n  escapeKeyDown: \"dropdown:escapeKeyDown\",\n  toggle: \"dropdown:toggle\",\n  open: \"dropdown:open\",\n  close: \"dropdown:close\"\n};\n\n// node_modules/@mui/base/useDropdown/dropdownReducer.js\nfunction dropdownReducer(state, action) {\n  switch (action.type) {\n    case DropdownActionTypes.blur:\n      return {\n        open: false\n      };\n    case DropdownActionTypes.escapeKeyDown:\n      return {\n        open: false\n      };\n    case DropdownActionTypes.toggle:\n      return {\n        open: !state.open\n      };\n    case DropdownActionTypes.open:\n      return {\n        open: true\n      };\n    case DropdownActionTypes.close:\n      return {\n        open: false\n      };\n    default:\n      throw new Error(`Unhandled action`);\n  }\n}\n\n// node_modules/@mui/base/useDropdown/useDropdown.js\nfunction useDropdown(parameters = {}) {\n  const {\n    defaultOpen,\n    onOpenChange,\n    open: openProp\n  } = parameters;\n  const [popupId, setPopupId] = React18.useState(\"\");\n  const [triggerElement, setTriggerElement] = React18.useState(null);\n  const lastActionType = React18.useRef(null);\n  const handleStateChange = React18.useCallback((event, field, value, reason) => {\n    if (field === \"open\") {\n      onOpenChange == null || onOpenChange(event, value);\n    }\n    lastActionType.current = reason;\n  }, [onOpenChange]);\n  const controlledProps = React18.useMemo(() => openProp !== void 0 ? {\n    open: openProp\n  } : {}, [openProp]);\n  const [state, dispatch] = useControllableReducer({\n    controlledProps,\n    initialState: defaultOpen ? {\n      open: true\n    } : {\n      open: false\n    },\n    onStateChange: handleStateChange,\n    reducer: dropdownReducer\n  });\n  React18.useEffect(() => {\n    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {\n      triggerElement == null || triggerElement.focus();\n    }\n  }, [state.open, triggerElement]);\n  const contextValue = {\n    state,\n    dispatch,\n    popupId,\n    registerPopup: setPopupId,\n    registerTrigger: setTriggerElement,\n    triggerElement\n  };\n  return {\n    contextValue,\n    open: state.open\n  };\n}\n\n// node_modules/@mui/base/Dropdown/Dropdown.js\nvar import_jsx_runtime13 = __toESM(require_jsx_runtime());\nfunction Dropdown(props) {\n  const {\n    children,\n    open,\n    defaultOpen,\n    onOpenChange\n  } = props;\n  const {\n    contextValue\n  } = useDropdown({\n    defaultOpen,\n    onOpenChange,\n    open\n  });\n  return (0, import_jsx_runtime13.jsx)(DropdownContext.Provider, {\n    value: contextValue,\n    children\n  });\n}\ntrue ? Dropdown.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types9.default.node,\n  /**\n   * If `true`, the dropdown is initially open.\n   */\n  defaultOpen: import_prop_types9.default.bool,\n  /**\n   * Callback fired when the component requests to be opened or closed.\n   */\n  onOpenChange: import_prop_types9.default.func,\n  /**\n   * Allows to control whether the dropdown is open.\n   * This is a controlled counterpart of `defaultOpen`.\n   */\n  open: import_prop_types9.default.bool\n} : void 0;\nif (true) {\n  Dropdown[\"propTypes\"] = exactProp(Dropdown.propTypes);\n}\n\n// node_modules/@mui/base/FormControl/FormControl.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React21 = __toESM(require_react());\nvar import_prop_types10 = __toESM(require_prop_types());\ninit_useControlled();\n\n// node_modules/@mui/base/FormControl/FormControlContext.js\nvar React20 = __toESM(require_react());\nvar FormControlContext = React20.createContext(void 0);\nif (true) {\n  FormControlContext.displayName = \"FormControlContext\";\n}\n\n// node_modules/@mui/base/FormControl/formControlClasses.js\nfunction getFormControlUtilityClass(slot) {\n  return generateUtilityClass(\"MuiFormControl\", slot);\n}\nvar formControlClasses = generateUtilityClasses(\"MuiFormControl\", [\"root\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n// node_modules/@mui/base/FormControl/FormControl.js\ninit_composeClasses();\nvar import_jsx_runtime14 = __toESM(require_jsx_runtime());\nvar _excluded6 = [\"defaultValue\", \"children\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== \"\";\n}\nfunction useUtilityClasses4(ownerState) {\n  const {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focused && \"focused\", error && \"error\", filled && \"filled\", required && \"required\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));\n}\nvar FormControl = React21.forwardRef(function FormControl2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    defaultValue,\n    children,\n    disabled = false,\n    error = false,\n    onChange,\n    required = false,\n    slotProps = {},\n    slots = {},\n    value: incomingValue\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: \"FormControl\",\n    state: \"value\"\n  });\n  const filled = hasValue(value);\n  const [focusedState, setFocused] = React21.useState(false);\n  const focused = focusedState && !disabled;\n  React21.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n  const childContext = React21.useMemo(() => {\n    return {\n      disabled,\n      error,\n      filled,\n      focused,\n      onBlur: () => {\n        setFocused(false);\n      },\n      onChange: (event) => {\n        setValue(event.target.value);\n        onChange == null || onChange(event);\n      },\n      onFocus: () => {\n        setFocused(true);\n      },\n      required,\n      value: value != null ? value : \"\"\n    };\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\n  const classes = useUtilityClasses4(ownerState);\n  const renderChildren = () => {\n    if (typeof children === \"function\") {\n      return children(childContext);\n    }\n    return children;\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      children: renderChildren()\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime14.jsx)(FormControlContext.Provider, {\n    value: childContext,\n    children: (0, import_jsx_runtime14.jsx)(Root, _extends({}, rootProps))\n  });\n});\ntrue ? FormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types10.default.oneOfType([import_prop_types10.default.node, import_prop_types10.default.func]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types10.default.string,\n  /**\n   * @ignore\n   */\n  defaultValue: import_prop_types10.default.any,\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: import_prop_types10.default.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: import_prop_types10.default.bool,\n  /**\n   * Callback fired when the form element's value is modified.\n   */\n  onChange: import_prop_types10.default.func,\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: import_prop_types10.default.bool,\n  /**\n   * The props used for each slot inside the FormControl.\n   * @default {}\n   */\n  slotProps: import_prop_types10.default.shape({\n    root: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object])\n  }),\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types10.default.shape({\n    root: import_prop_types10.default.elementType\n  }),\n  /**\n   * The value of the form element.\n   */\n  value: import_prop_types10.default.any\n} : void 0;\n\n// node_modules/@mui/base/FormControl/useFormControlContext.js\nvar React22 = __toESM(require_react());\nfunction useFormControlContext() {\n  return React22.useContext(FormControlContext);\n}\n\n// node_modules/@mui/base/Input/Input.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React24 = __toESM(require_react());\nvar import_prop_types11 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/Input/inputClasses.js\nfunction getInputUtilityClass(slot) {\n  return generateUtilityClass(\"MuiInput\", slot);\n}\nvar inputClasses = generateUtilityClasses(\"MuiInput\", [\"root\", \"formControl\", \"focused\", \"disabled\", \"error\", \"multiline\", \"input\", \"inputMultiline\", \"inputTypeSearch\", \"adornedStart\", \"adornedEnd\"]);\n\n// node_modules/@mui/base/useInput/useInput.js\ninit_extends();\ninit_esm();\nvar React23 = __toESM(require_react());\ninit_esm();\nfunction useInput(parameters = {}) {\n  const {\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onChange,\n    onFocus,\n    required: requiredProp = false,\n    value: valueProp,\n    inputRef: inputRefProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  let defaultValue;\n  let disabled;\n  let error;\n  let required;\n  let value;\n  if (formControlContext) {\n    var _formControlContext$d, _formControlContext$e, _formControlContext$r;\n    defaultValue = void 0;\n    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;\n    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;\n    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;\n    value = formControlContext.value;\n    if (true) {\n      const definedLocalProps = [\"defaultValue\", \"disabled\", \"error\", \"required\", \"value\"].filter((prop) => parameters[prop] !== void 0);\n      if (definedLocalProps.length > 0) {\n        console.warn([\"MUI: You have set props on an input that is inside a FormControl.\", \"Set these props on a FormControl instead. Otherwise they will be ignored.\", `Ignored props: ${definedLocalProps.join(\", \")}`].join(\"\\n\"));\n      }\n    }\n  } else {\n    defaultValue = defaultValueProp;\n    disabled = disabledProp;\n    error = errorProp;\n    required = requiredProp;\n    value = valueProp;\n  }\n  const {\n    current: isControlled\n  } = React23.useRef(value != null);\n  const handleInputRefWarning = React23.useCallback((instance) => {\n    if (true) {\n      if (instance && instance.nodeName !== \"INPUT\" && !instance.focus) {\n        console.error([\"MUI: You have provided a `slots.input` to the input component\", \"that does not correctly handle the `ref` prop.\", \"Make sure the `ref` prop is called with a HTMLInputElement.\"].join(\"\\n\"));\n      }\n    }\n  }, []);\n  const inputRef = React23.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const [focused, setFocused] = React23.useState(false);\n  React23.useEffect(() => {\n    if (!formControlContext && disabled && focused) {\n      setFocused(false);\n      onBlur == null || onBlur();\n    }\n  }, [formControlContext, disabled, focused, onBlur]);\n  const handleFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu;\n    if (formControlContext != null && formControlContext.disabled) {\n      event.stopPropagation();\n      return;\n    }\n    (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n    if (formControlContext && formControlContext.onFocus) {\n      var _formControlContext$o;\n      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);\n    } else {\n      setFocused(true);\n    }\n  };\n  const handleBlur2 = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    } else {\n      setFocused(false);\n    }\n  };\n  const handleChange = (otherHandlers) => (event, ...args) => {\n    var _formControlContext$o2, _otherHandlers$onChan;\n    if (!isControlled) {\n      const element = event.target || inputRef.current;\n      if (element == null) {\n        throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));\n      }\n    }\n    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);\n    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);\n  };\n  const handleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n  };\n  const getRootProps = (externalProps = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters, [\"onBlur\", \"onChange\", \"onFocus\"]);\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n    return _extends({}, externalProps, externalEventHandlers, {\n      onClick: handleClick(externalEventHandlers)\n    });\n  };\n  const getInputProps = (externalProps = {}) => {\n    const propsEventHandlers = {\n      onBlur,\n      onChange,\n      onFocus\n    };\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n    const mergedEventHandlers = _extends({}, externalEventHandlers, {\n      onBlur: handleBlur2(externalEventHandlers),\n      onChange: handleChange(externalEventHandlers),\n      onFocus: handleFocus(externalEventHandlers)\n    });\n    return _extends({}, mergedEventHandlers, {\n      \"aria-invalid\": error || void 0,\n      defaultValue,\n      value,\n      required,\n      disabled\n    }, externalProps, {\n      ref: handleInputRef\n    }, mergedEventHandlers);\n  };\n  return {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    getInputProps,\n    getRootProps,\n    inputRef: handleInputRef,\n    required,\n    value\n  };\n}\n\n// node_modules/@mui/base/Input/Input.js\ninit_composeClasses();\nvar import_jsx_runtime15 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime16 = __toESM(require_jsx_runtime());\nvar _excluded7 = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoComplete\", \"autoFocus\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"id\", \"multiline\", \"name\", \"onClick\", \"onChange\", \"onKeyDown\", \"onKeyUp\", \"onFocus\", \"onBlur\", \"placeholder\", \"readOnly\", \"required\", \"startAdornment\", \"value\", \"type\", \"rows\", \"slotProps\", \"slots\", \"minRows\", \"maxRows\"];\nvar useUtilityClasses5 = (ownerState) => {\n  const {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    multiline,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", error && \"error\", focused && \"focused\", Boolean(formControlContext) && \"formControl\", multiline && \"multiline\", Boolean(startAdornment) && \"adornedStart\", Boolean(endAdornment) && \"adornedEnd\"],\n    input: [\"input\", disabled && \"disabled\", multiline && \"multiline\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getInputUtilityClass));\n};\nvar Input = React24.forwardRef(function Input2(props, forwardedRef) {\n  var _slots$root, _slots$textarea, _slots$input;\n  const {\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    multiline = false,\n    name,\n    onClick,\n    onChange,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    placeholder,\n    readOnly,\n    required,\n    startAdornment,\n    value,\n    type: typeProp,\n    rows,\n    slotProps = {},\n    slots = {},\n    minRows,\n    maxRows\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);\n  const {\n    getRootProps,\n    getInputProps,\n    focused,\n    formControlContext,\n    error: errorState,\n    disabled: disabledState\n  } = useInput({\n    disabled,\n    defaultValue,\n    error,\n    onBlur,\n    onClick,\n    onChange,\n    onFocus,\n    required,\n    value\n  });\n  const type = !multiline ? typeProp != null ? typeProp : \"text\" : void 0;\n  const ownerState = _extends({}, props, {\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    formControlContext,\n    multiline,\n    type\n  });\n  const classes = useUtilityClasses5(ownerState);\n  const propsToForward = {\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    id,\n    onKeyDown,\n    onKeyUp,\n    name,\n    placeholder,\n    readOnly,\n    type\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const InputComponent = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : \"textarea\" : (_slots$input = slots.input) != null ? _slots$input : \"input\";\n  const inputProps = useSlotProps({\n    elementType: InputComponent,\n    getSlotProps: (otherHandlers) => {\n      return getInputProps(_extends({}, propsToForward, otherHandlers));\n    },\n    externalSlotProps: slotProps.input,\n    additionalProps: _extends({\n      rows: multiline ? rows : void 0\n    }, multiline && !isHostComponent(InputComponent) && {\n      minRows: rows || minRows,\n      maxRows: rows || maxRows\n    }),\n    ownerState,\n    className: classes.input\n  });\n  if (true) {\n    if (multiline) {\n      if (rows) {\n        if (minRows || maxRows) {\n          console.warn(\"MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.\");\n        }\n      }\n    }\n  }\n  return (0, import_jsx_runtime16.jsxs)(Root, _extends({}, rootProps, {\n    children: [startAdornment, (0, import_jsx_runtime15.jsx)(InputComponent, _extends({}, inputProps)), endAdornment]\n  }));\n});\ntrue ? Input.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  \"aria-describedby\": import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  \"aria-label\": import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  \"aria-labelledby\": import_prop_types11.default.string,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: import_prop_types11.default.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: import_prop_types11.default.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types11.default.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types11.default.any,\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: import_prop_types11.default.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: import_prop_types11.default.node,\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error: import_prop_types11.default.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  inputRef: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.shape({\n    current: import_prop_types11.default.object\n  })]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: import_prop_types11.default.number,\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: import_prop_types11.default.number,\n  /**\n   * If `true`, a `textarea` element is rendered.\n   * @default false\n   */\n  multiline: import_prop_types11.default.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  onBlur: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onChange: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onClick: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: import_prop_types11.default.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: import_prop_types11.default.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: import_prop_types11.default.bool,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: import_prop_types11.default.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: import_prop_types11.default.number,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: import_prop_types11.default.shape({\n    input: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object]),\n    root: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object])\n  }),\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types11.default.shape({\n    input: import_prop_types11.default.elementType,\n    root: import_prop_types11.default.elementType,\n    textarea: import_prop_types11.default.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: import_prop_types11.default.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type: import_prop_types11.default.oneOf([\"button\", \"checkbox\", \"color\", \"date\", \"datetime-local\", \"email\", \"file\", \"hidden\", \"image\", \"month\", \"number\", \"password\", \"radio\", \"range\", \"reset\", \"search\", \"submit\", \"tel\", \"text\", \"time\", \"url\", \"week\"]),\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: import_prop_types11.default.any\n} : void 0;\n\n// node_modules/@mui/base/Menu/Menu.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React33 = __toESM(require_react());\nvar import_prop_types12 = __toESM(require_prop_types());\ninit_esm();\n\n// node_modules/@mui/base/Menu/menuClasses.js\nfunction getMenuUtilityClass(slot) {\n  return generateUtilityClass(\"MuiMenu\", slot);\n}\nvar menuClasses = generateUtilityClasses(\"MuiMenu\", [\"root\", \"listbox\", \"expanded\"]);\n\n// node_modules/@mui/base/useMenu/useMenu.js\ninit_extends();\nvar React31 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/useMenu/menuReducer.js\ninit_extends();\n\n// node_modules/@mui/base/useList/useList.js\ninit_extends();\nvar React26 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/useList/listActions.types.js\nvar ListActionTypes = {\n  blur: \"list:blur\",\n  focus: \"list:focus\",\n  itemClick: \"list:itemClick\",\n  itemHover: \"list:itemHover\",\n  itemsChange: \"list:itemsChange\",\n  keyDown: \"list:keyDown\",\n  resetHighlight: \"list:resetHighlight\",\n  textNavigation: \"list:textNavigation\",\n  clearSelection: \"list:clearSelection\"\n};\n\n// node_modules/@mui/base/useList/listReducer.js\ninit_extends();\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n  let nextFocus = currentIndex;\n  for (; ; ) {\n    if (!wrapAround && lookupDirection === \"next\" && nextFocus === items.length || !wrapAround && lookupDirection === \"previous\" && nextFocus === -1) {\n      return -1;\n    }\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === \"next\" ? 1 : -1;\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\nfunction moveHighlight(previouslyHighlightedValue, offset3, context) {\n  var _items$nextIndex;\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context;\n  const defaultHighlightedIndex = focusManagement === \"DOM\" ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex((item) => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n  switch (offset3) {\n    case \"reset\":\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n      nextIndexCandidate = 0;\n      lookupDirection = \"next\";\n      wrapAround = false;\n      break;\n    case \"start\":\n      nextIndexCandidate = 0;\n      lookupDirection = \"next\";\n      wrapAround = false;\n      break;\n    case \"end\":\n      nextIndexCandidate = maxIndex;\n      lookupDirection = \"previous\";\n      wrapAround = false;\n      break;\n    default: {\n      const newIndex = previouslyHighlightedIndex + offset3;\n      if (newIndex < 0) {\n        if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset3) > 1) {\n          nextIndexCandidate = 0;\n          lookupDirection = \"next\";\n        } else {\n          nextIndexCandidate = maxIndex;\n          lookupDirection = \"previous\";\n        }\n      } else if (newIndex > maxIndex) {\n        if (!wrapAround || Math.abs(offset3) > 1) {\n          nextIndexCandidate = maxIndex;\n          lookupDirection = \"previous\";\n        } else {\n          nextIndexCandidate = 0;\n          lookupDirection = \"next\";\n        }\n      } else {\n        nextIndexCandidate = newIndex;\n        lookupDirection = offset3 >= 0 ? \"next\" : \"previous\";\n      }\n    }\n  }\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;\n}\nfunction toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === \"none\") {\n    return [];\n  }\n  if (selectionMode === \"single\") {\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n    return [item];\n  }\n  if (selectedValues.some((sv) => itemComparer(sv, item))) {\n    return selectedValues.filter((sv) => !itemComparer(sv, item));\n  }\n  return [...selectedValues, item];\n}\nfunction handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex((i) => itemComparer(item, i));\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  }\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize: pageSize2\n  } = context;\n  switch (key) {\n    case \"Home\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, \"start\", context)\n      });\n    case \"End\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, \"end\", context)\n      });\n    case \"PageUp\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize2, context)\n      });\n    case \"PageDown\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize2, context)\n      });\n    case \"ArrowUp\":\n      if (orientation !== \"vertical\") {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n    case \"ArrowDown\":\n      if (orientation !== \"vertical\") {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n    case \"ArrowLeft\": {\n      if (orientation === \"vertical\") {\n        break;\n      }\n      const offset3 = orientation === \"horizontal-ltr\" ? -1 : 1;\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, offset3, context)\n      });\n    }\n    case \"ArrowRight\": {\n      if (orientation === \"vertical\") {\n        break;\n      }\n      const offset3 = orientation === \"horizontal-ltr\" ? 1 : -1;\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, offset3, context)\n      });\n    }\n    case \"Enter\":\n    case \" \":\n      if (state.highlightedValue === null) {\n        return state;\n      }\n      return handleItemSelection(state.highlightedValue, state, context);\n    default:\n      break;\n  }\n  return state;\n}\nfunction handleBlur(state, context) {\n  if (context.focusManagement === \"DOM\") {\n    return state;\n  }\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  var _stringifyItem;\n  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();\n  if (!text || text.length === 0) {\n    return false;\n  }\n  return text.indexOf(searchString) === 0;\n}\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n  for (let index2 = 0; index2 < items.length; index2 += 1) {\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    }\n    nextItem = moveHighlight(nextItem, 1, context);\n  }\n  return state;\n}\nfunction handleItemsChange(items, previousItems, state, context) {\n  var _state$selectedValues;\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n  if (state.highlightedValue != null) {\n    var _items$find;\n    newHighlightedValue = (_items$find = items.find((item) => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;\n  } else if (focusManagement === \"DOM\" && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, \"reset\", context);\n  }\n  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];\n  const newSelectedValues = selectedValues.filter((selectedValue) => items.some((item) => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\nfunction handleResetHighlight(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, \"reset\", context)\n  });\n}\nfunction handleClearSelection(state, context) {\n  return _extends({}, state, {\n    selectedValues: [],\n    highlightedValue: moveHighlight(null, \"reset\", context)\n  });\n}\nfunction listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n    case ListActionTypes.clearSelection:\n      return handleClearSelection(state, context);\n    default:\n      return state;\n  }\n}\n\n// node_modules/@mui/base/utils/useTextNavigation.js\nvar React25 = __toESM(require_react());\nvar TEXT_NAVIGATION_RESET_TIMEOUT = 500;\nfunction useTextNavigation(callback) {\n  const textCriteriaRef = React25.useRef({\n    searchString: \"\",\n    lastTime: null\n  });\n  return React25.useCallback((event) => {\n    if (event.key.length === 1 && event.key !== \" \") {\n      const textCriteria = textCriteriaRef.current;\n      const lowerKey = event.key.toLowerCase();\n      const currentTime = performance.now();\n      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {\n        textCriteria.searchString = lowerKey;\n      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {\n        textCriteria.searchString += lowerKey;\n      }\n      textCriteria.lastTime = currentTime;\n      callback(textCriteria.searchString, event);\n    }\n  }, [callback]);\n}\n\n// node_modules/@mui/base/useList/useList.js\nvar EMPTY_OBJECT2 = {};\nvar NOOP2 = () => {\n};\nvar defaultItemComparer = (optionA, optionB) => optionA === optionB;\nvar defaultIsItemDisabled = () => false;\nvar defaultItemStringifier = (item) => typeof item === \"string\" ? item : String(item);\nvar defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT2,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = \"activeDescendant\",\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP2,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    onItemsChange,\n    orientation = \"vertical\",\n    pageSize: pageSize2 = 5,\n    reducerActionContext = EMPTY_OBJECT2,\n    selectionMode = \"single\",\n    stateReducer: externalReducer\n  } = params;\n  if (true) {\n    if (focusManagement === \"DOM\" && getItemDomElement == null) {\n      throw new Error(\"useList: The `getItemDomElement` prop is required when using the `DOM` focus management.\");\n    }\n    if (focusManagement === \"activeDescendant\" && getItemId == null) {\n      throw new Error(\"useList: The `getItemId` prop is required when using the `activeDescendant` focus management.\");\n    }\n  }\n  const listRef = React26.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React26.useCallback((event, value, reason) => {\n    onHighlightChange == null || onHighlightChange(event, value, reason);\n    if (focusManagement === \"DOM\" && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null || _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React26.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n  const handleStateChange = React26.useCallback((event, field, value, reason, state2) => {\n    onStateChange == null || onStateChange(event, field, value, reason, state2);\n    switch (field) {\n      case \"highlightedValue\":\n        handleHighlightChange(event, value, reason);\n        break;\n      case \"selectedValues\":\n        onChange == null || onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n  const listActionContext = React26.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize: pageSize2,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize2, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : listReducer;\n  const actionContext = React26.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation2 = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  const previousItems = React26.useRef([]);\n  React26.useEffect(() => {\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange == null || onItemsChange(items);\n  }, [items, itemComparer, dispatch, onItemsChange]);\n  const createHandleKeyDown = (externalHandlers) => (event) => {\n    var _externalHandlers$onK;\n    (_externalHandlers$onK = externalHandlers.onKeyDown) == null || _externalHandlers$onK.call(externalHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = [\"Home\", \"End\", \"PageUp\", \"PageDown\"];\n    if (orientation === \"vertical\") {\n      keysToPreventDefault.push(\"ArrowUp\", \"ArrowDown\");\n    } else {\n      keysToPreventDefault.push(\"ArrowLeft\", \"ArrowRight\");\n    }\n    if (focusManagement === \"activeDescendant\") {\n      keysToPreventDefault.push(\" \", \"Enter\");\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation2(event);\n  };\n  const createHandleBlur = (externalHandlers) => (event) => {\n    var _externalHandlers$onB, _listRef$current;\n    (_externalHandlers$onB = externalHandlers.onBlur) == null || _externalHandlers$onB.call(externalHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, {\n      \"aria-activedescendant\": focusManagement === \"activeDescendant\" && highlightedValue != null ? getItemId(highlightedValue) : void 0,\n      tabIndex: focusManagement === \"DOM\" ? -1 : 0,\n      ref: handleRef\n    }, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers)\n    });\n  };\n  const getItemState = React26.useCallback((item) => {\n    const selected = (selectedValues != null ? selectedValues : []).some((value) => value != null && itemComparer(item, value));\n    const highlighted = highlightedValue != null && itemComparer(item, highlightedValue);\n    const focusable = focusManagement === \"DOM\";\n    return {\n      focusable,\n      highlighted,\n      selected\n    };\n  }, [itemComparer, selectedValues, highlightedValue, focusManagement]);\n  const contextValue = React26.useMemo(() => ({\n    dispatch,\n    getItemState\n  }), [dispatch, getItemState]);\n  React26.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\n\n// node_modules/@mui/base/useList/useListItem.js\ninit_extends();\nvar React28 = __toESM(require_react());\n\n// node_modules/@mui/base/useList/ListContext.js\nvar React27 = __toESM(require_react());\nvar ListContext = React27.createContext(null);\nif (true) {\n  ListContext.displayName = \"ListContext\";\n}\n\n// node_modules/@mui/base/useList/useListItem.js\nfunction useListItem(parameters) {\n  const {\n    handlePointerOverEvents = false,\n    item\n  } = parameters;\n  const listContext = React28.useContext(ListContext);\n  if (!listContext) {\n    throw new Error(\"useListItem must be used within a ListProvider\");\n  }\n  const {\n    dispatch,\n    getItemState\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(item);\n  const createHandleClick = React28.useCallback((externalHandlers) => (event) => {\n    var _externalHandlers$onC;\n    (_externalHandlers$onC = externalHandlers.onClick) == null || _externalHandlers$onC.call(externalHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (true) {\n      if (item === void 0) {\n        throw new Error([\"MUI: The `item` provided to useListItem() is undefined.\", \"This should happen only during server-side rendering under React 17.\"].join(\"\\n\"));\n      }\n    }\n    dispatch({\n      type: ListActionTypes.itemClick,\n      item,\n      event\n    });\n  }, [dispatch, item]);\n  const createHandlePointerOver = React28.useCallback((externalHandlers) => (event) => {\n    var _externalHandlers$onM;\n    (_externalHandlers$onM = externalHandlers.onMouseOver) == null || _externalHandlers$onM.call(externalHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (true) {\n      if (item === void 0) {\n        throw new Error([\"MUI: The `item` provided to useListItem() is undefined.\", \"This should happen only during server-side rendering under React 17.\"].join(\"\\n\"));\n      }\n    }\n    dispatch({\n      type: ListActionTypes.itemHover,\n      item,\n      event\n    });\n  }, [dispatch, item]);\n  let tabIndex;\n  if (focusable) {\n    tabIndex = highlighted ? 0 : -1;\n  }\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, {\n      onClick: createHandleClick(externalEventHandlers),\n      onPointerOver: handlePointerOverEvents ? createHandlePointerOver(externalEventHandlers) : void 0,\n      tabIndex\n    });\n  };\n  return {\n    getRootProps,\n    highlighted,\n    selected\n  };\n}\n\n// node_modules/@mui/base/useMenu/menuReducer.js\nfunction menuReducer(state, action) {\n  if (action.type === ListActionTypes.itemHover) {\n    return state;\n  }\n  const newState = listReducer(state, action);\n  if (newState.highlightedValue === null && action.context.items.length > 0) {\n    return _extends({}, newState, {\n      highlightedValue: action.context.items[0]\n    });\n  }\n  if (action.type === ListActionTypes.keyDown) {\n    if (action.event.key === \"Escape\") {\n      return _extends({}, newState, {\n        open: false\n      });\n    }\n  }\n  if (action.type === ListActionTypes.blur) {\n    var _action$context$listb;\n    if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {\n      var _action$context$listb2, _action$event$related;\n      const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute(\"id\");\n      const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute(\"aria-controls\");\n      if (listboxId && controlledBy && listboxId === controlledBy) {\n        return newState;\n      }\n      return _extends({}, newState, {\n        open: false,\n        highlightedValue: action.context.items[0]\n      });\n    }\n  }\n  return newState;\n}\n\n// node_modules/@mui/base/useCompound/useCompoundParent.js\nvar React29 = __toESM(require_react());\nvar CompoundComponentContext = React29.createContext(null);\nCompoundComponentContext.displayName = \"CompoundComponentContext\";\nfunction sortSubitems(subitems) {\n  const subitemsArray = Array.from(subitems.keys()).map((key) => {\n    const subitem = subitems.get(key);\n    return {\n      key,\n      subitem\n    };\n  });\n  subitemsArray.sort((a, b) => {\n    const aNode = a.subitem.ref.current;\n    const bNode = b.subitem.ref.current;\n    if (aNode === null || bNode === null || aNode === bNode) {\n      return 0;\n    }\n    return aNode.compareDocumentPosition(bNode) & Node.DOCUMENT_POSITION_PRECEDING ? 1 : -1;\n  });\n  return new Map(subitemsArray.map((item) => [item.key, item.subitem]));\n}\nfunction useCompoundParent() {\n  const [subitems, setSubitems] = React29.useState(/* @__PURE__ */ new Map());\n  const subitemKeys = React29.useRef(/* @__PURE__ */ new Set());\n  const deregisterItem = React29.useCallback(function deregisterItem2(id) {\n    subitemKeys.current.delete(id);\n    setSubitems((previousState) => {\n      const newState = new Map(previousState);\n      newState.delete(id);\n      return newState;\n    });\n  }, []);\n  const registerItem = React29.useCallback(function registerItem2(id, item) {\n    let providedOrGeneratedId;\n    if (typeof id === \"function\") {\n      providedOrGeneratedId = id(subitemKeys.current);\n    } else {\n      providedOrGeneratedId = id;\n    }\n    subitemKeys.current.add(providedOrGeneratedId);\n    setSubitems((previousState) => {\n      const newState = new Map(previousState);\n      newState.set(providedOrGeneratedId, item);\n      return newState;\n    });\n    return {\n      id: providedOrGeneratedId,\n      deregister: () => deregisterItem(providedOrGeneratedId)\n    };\n  }, [deregisterItem]);\n  const sortedSubitems = React29.useMemo(() => sortSubitems(subitems), [subitems]);\n  const getItemIndex = React29.useCallback(function getItemIndex2(id) {\n    return Array.from(sortedSubitems.keys()).indexOf(id);\n  }, [sortedSubitems]);\n  const contextValue = React29.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount: subitems.size\n  }), [getItemIndex, registerItem, subitems.size]);\n  return {\n    contextValue,\n    subitems: sortedSubitems\n  };\n}\n\n// node_modules/@mui/base/useCompound/useCompoundItem.js\nvar React30 = __toESM(require_react());\ninit_esm();\nfunction useCompoundItem(id, itemMetadata) {\n  const context = React30.useContext(CompoundComponentContext);\n  if (context === null) {\n    throw new Error(\"useCompoundItem must be used within a useCompoundParent\");\n  }\n  const {\n    registerItem\n  } = context;\n  const [registeredId, setRegisteredId] = React30.useState(typeof id === \"function\" ? void 0 : id);\n  useEnhancedEffect_default(() => {\n    const {\n      id: returnedId,\n      deregister\n    } = registerItem(id, itemMetadata);\n    setRegisteredId(returnedId);\n    return deregister;\n  }, [registerItem, itemMetadata, id]);\n  return {\n    id: registeredId,\n    index: registeredId !== void 0 ? context.getItemIndex(registeredId) : -1,\n    totalItemCount: context.totalSubitemCount\n  };\n}\n\n// node_modules/@mui/base/utils/combineHooksSlotProps.js\ninit_extends();\nfunction combineHooksSlotProps(getFirstProps, getSecondProps) {\n  return function getCombinedProps(external = {}) {\n    const firstResult = _extends({}, external, getFirstProps(external));\n    const result = _extends({}, firstResult, getSecondProps(firstResult));\n    return result;\n  };\n}\n\n// node_modules/@mui/base/useMenu/useMenu.js\nvar FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {\n  },\n  popupId: \"\",\n  registerPopup: () => {\n  },\n  registerTrigger: () => {\n  },\n  state: {\n    open: true\n  },\n  triggerElement: null\n};\nfunction useMenu(parameters = {}) {\n  var _useId, _React$useContext;\n  const {\n    listboxRef: listboxRefProp,\n    onItemsChange,\n    id: idParam,\n    disabledItemsFocusable = true,\n    disableListWrap = false\n    // autoFocus = true,\n  } = parameters;\n  const rootRef = React31.useRef(null);\n  const handleRef = useForkRef(rootRef, listboxRefProp);\n  const listboxId = (_useId = useId(idParam)) != null ? _useId : \"\";\n  const {\n    state: {\n      open\n    },\n    dispatch: menuDispatch,\n    triggerElement,\n    registerPopup\n  } = (_React$useContext = React31.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT;\n  const isInitiallyOpen = React31.useRef(open);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React31.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React31.useCallback((itemId) => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const isItemDisabled = React31.useCallback((id) => {\n    var _subitems$get2;\n    return (subitems == null || (_subitems$get2 = subitems.get(id)) == null ? void 0 : _subitems$get2.disabled) || false;\n  }, [subitems]);\n  const getItemAsString = React31.useCallback((id) => {\n    var _subitems$get3, _subitems$get4;\n    return ((_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) == null || (_subitems$get4 = _subitems$get4.ref.current) == null ? void 0 : _subitems$get4.innerText);\n  }, [subitems]);\n  const reducerActionContext = React31.useMemo(() => ({\n    listboxRef: rootRef\n  }), [rootRef]);\n  const {\n    dispatch: listDispatch,\n    getRootProps: getListRootProps,\n    contextValue: listContextValue,\n    state: {\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement: \"DOM\",\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null\n    }),\n    isItemDisabled,\n    items: subitemKeys,\n    getItemAsString,\n    rootRef: handleRef,\n    onItemsChange,\n    reducerActionContext,\n    selectionMode: \"none\",\n    stateReducer: menuReducer\n  });\n  useEnhancedEffect_default(() => {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  React31.useEffect(() => {\n    if (open && highlightedValue === subitemKeys[0] && !isInitiallyOpen.current) {\n      var _subitems$get5;\n      (_subitems$get5 = subitems.get(subitemKeys[0])) == null || (_subitems$get5 = _subitems$get5.ref) == null || (_subitems$get5 = _subitems$get5.current) == null || _subitems$get5.focus();\n    }\n  }, [open, highlightedValue, subitems, subitemKeys]);\n  React31.useEffect(() => {\n    var _rootRef$current;\n    if ((_rootRef$current = rootRef.current) != null && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {\n      var _subitems$get6;\n      subitems == null || (_subitems$get6 = subitems.get(highlightedValue)) == null || (_subitems$get6 = _subitems$get6.ref.current) == null || _subitems$get6.focus();\n    }\n  }, [highlightedValue, subitems]);\n  const createHandleBlur = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur, _rootRef$current2;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_rootRef$current2 = rootRef.current) != null && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n      return;\n    }\n    menuDispatch({\n      type: DropdownActionTypes.blur,\n      event\n    });\n  };\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === \"Escape\") {\n      menuDispatch({\n        type: DropdownActionTypes.escapeKeyDown,\n        event\n      });\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createHandleBlur(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {\n      id: listboxId,\n      role: \"menu\"\n    });\n  };\n  React31.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: _extends({}, compoundComponentContextValue, listContextValue),\n    dispatch: listDispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open,\n    triggerElement\n  };\n}\n\n// node_modules/@mui/base/useMenu/MenuProvider.js\nvar React32 = __toESM(require_react());\nvar import_jsx_runtime17 = __toESM(require_jsx_runtime());\nfunction MenuProvider(props) {\n  const {\n    value,\n    children\n  } = props;\n  const {\n    dispatch,\n    getItemIndex,\n    getItemState,\n    registerItem,\n    totalSubitemCount\n  } = value;\n  const listContextValue = React32.useMemo(() => ({\n    dispatch,\n    getItemState,\n    getItemIndex\n  }), [dispatch, getItemIndex, getItemState]);\n  const compoundComponentContextValue = React32.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  return (0, import_jsx_runtime17.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime17.jsx)(ListContext.Provider, {\n      value: listContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/Menu/Menu.js\ninit_composeClasses();\nvar import_jsx_runtime18 = __toESM(require_jsx_runtime());\nvar _excluded8 = [\"actions\", \"anchor\", \"children\", \"onItemsChange\", \"slotProps\", \"slots\"];\nfunction useUtilityClasses6(ownerState) {\n  const {\n    open\n  } = ownerState;\n  const slots = {\n    root: [\"root\", open && \"expanded\"],\n    listbox: [\"listbox\", open && \"expanded\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuUtilityClass));\n}\nvar Menu = React33.forwardRef(function Menu2(props, forwardedRef) {\n  var _slots$root, _slots$listbox;\n  const {\n    actions,\n    anchor: anchorProp,\n    children,\n    onItemsChange,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);\n  const {\n    contextValue,\n    getListboxProps,\n    dispatch,\n    open,\n    triggerElement\n  } = useMenu({\n    onItemsChange\n  });\n  const anchor = anchorProp != null ? anchorProp : triggerElement;\n  React33.useImperativeHandle(actions, () => ({\n    dispatch,\n    resetHighlight: () => dispatch({\n      type: ListActionTypes.resetHighlight,\n      event: null\n    })\n  }), [dispatch]);\n  const ownerState = _extends({}, props, {\n    open\n  });\n  const classes = useUtilityClasses6(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      role: void 0\n    },\n    className: classes.root,\n    ownerState\n  });\n  const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : \"ul\";\n  const listboxProps = useSlotProps({\n    elementType: Listbox,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    className: classes.listbox,\n    ownerState\n  });\n  if (open === true && anchor == null) {\n    return (0, import_jsx_runtime18.jsx)(Root, _extends({}, rootProps, {\n      children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {\n        children: (0, import_jsx_runtime18.jsx)(MenuProvider, {\n          value: contextValue,\n          children\n        })\n      }))\n    }));\n  }\n  return (0, import_jsx_runtime18.jsx)(Popper, _extends({}, rootProps, {\n    open,\n    anchorEl: anchor,\n    slots: {\n      root: Root\n    },\n    children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {\n      children: (0, import_jsx_runtime18.jsx)(MenuProvider, {\n        value: contextValue,\n        children\n      })\n    }))\n  }));\n});\ntrue ? Menu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref with imperative actions that can be performed on the menu.\n   */\n  actions: refType_default,\n  /**\n   * The element based on which the menu is positioned.\n   */\n  anchor: import_prop_types12.default.oneOfType([HTMLElementType, import_prop_types12.default.object, import_prop_types12.default.func]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types12.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types12.default.string,\n  /**\n   * Function called when the items displayed in the menu change.\n   */\n  onItemsChange: import_prop_types12.default.func,\n  /**\n   * The props used for each slot inside the Menu.\n   * @default {}\n   */\n  slotProps: import_prop_types12.default.shape({\n    listbox: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object]),\n    root: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Menu.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types12.default.shape({\n    listbox: import_prop_types12.default.elementType,\n    root: import_prop_types12.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/MenuButton/MenuButton.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React35 = __toESM(require_react());\nvar import_prop_types13 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/useMenuButton/useMenuButton.js\ninit_extends();\nvar React34 = __toESM(require_react());\ninit_esm();\nfunction useMenuButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React34.useContext(DropdownContext);\n  if (menuContext === null) {\n    throw new Error(\"useMenuButton: no menu context available.\");\n  }\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n  const createHandleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === \"ArrowDown\" || event.key === \"ArrowUp\") {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n  const getOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleClick(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\n    return _extends({\n      \"aria-haspopup\": \"menu\",\n      \"aria-expanded\": state.open,\n      \"aria-controls\": popupId\n    }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {\n      tabIndex: 0,\n      // this is needed to make the button focused after click in Safari\n      ref: handleRef\n    });\n  };\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/MenuButton/MenuButton.js\ninit_composeClasses();\n\n// node_modules/@mui/base/MenuButton/menuButtonClasses.js\nfunction getMenuButtonUtilityClass(slot) {\n  return generateUtilityClass(\"MuiMenuButton\", slot);\n}\nvar menuButtonClasses = generateUtilityClasses(\"MuiMenuButton\", [\"root\", \"active\", \"disabled\", \"expanded\"]);\n\n// node_modules/@mui/base/MenuButton/MenuButton.js\nvar import_jsx_runtime19 = __toESM(require_jsx_runtime());\nvar _excluded9 = [\"children\", \"disabled\", \"label\", \"slots\", \"slotProps\", \"focusableWhenDisabled\"];\nvar useUtilityClasses7 = (ownerState) => {\n  const {\n    active,\n    disabled,\n    open\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", active && \"active\", open && \"expanded\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuButtonUtilityClass));\n};\nvar MenuButton = React35.forwardRef(function MenuButton2(props, forwardedRef) {\n  const {\n    children,\n    disabled = false,\n    slots = {},\n    slotProps = {},\n    focusableWhenDisabled = false\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);\n  const {\n    getRootProps,\n    open,\n    active\n  } = useMenuButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: forwardedRef\n  });\n  const ownerState = _extends({}, props, {\n    open,\n    active,\n    disabled,\n    focusableWhenDisabled\n  });\n  const classes = useUtilityClasses7(ownerState);\n  const Root = slots.root || \"button\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef,\n      type: \"button\"\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime19.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n});\ntrue ? MenuButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types13.default.node,\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types13.default.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types13.default.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: import_prop_types13.default.bool,\n  /**\n   * Label of the button\n   */\n  label: import_prop_types13.default.string,\n  /**\n   * The components used for each slot inside the MenuButton.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slotProps: import_prop_types13.default.shape({\n    root: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object])\n  }),\n  /**\n   * The props used for each slot inside the MenuButton.\n   * @default {}\n   */\n  slots: import_prop_types13.default.shape({\n    root: import_prop_types13.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/MenuItem/MenuItem.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React38 = __toESM(require_react());\nvar import_prop_types14 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/MenuItem/menuItemClasses.js\nfunction getMenuItemUtilityClass(slot) {\n  return generateUtilityClass(\"MuiMenuItem\", slot);\n}\nvar menuItemClasses = generateUtilityClasses(\"MuiMenuItem\", [\"root\", \"disabled\", \"focusVisible\"]);\n\n// node_modules/@mui/base/useMenuItem/useMenuItem.js\ninit_extends();\nvar React36 = __toESM(require_react());\ninit_esm();\nfunction idGenerator(existingKeys) {\n  return `menu-item-${existingKeys.size}`;\n}\nvar FALLBACK_MENU_CONTEXT2 = {\n  dispatch: () => {\n  },\n  popupId: \"\",\n  registerPopup: () => {\n  },\n  registerTrigger: () => {\n  },\n  state: {\n    open: true\n  },\n  triggerElement: null\n};\nfunction useMenuItem(params) {\n  var _React$useContext;\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React36.useRef(null);\n  const itemMetadata = React36.useMemo(() => ({\n    disabled,\n    id: id != null ? id : \"\",\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    dispatch\n  } = (_React$useContext = React36.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT2;\n  const {\n    getRootProps: getListRootProps,\n    highlighted\n  } = useListItem({\n    item: id\n  });\n  const {\n    index: index2,\n    totalItemCount\n  } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(buttonRefHandler, externalRef, itemRef);\n  React36.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n  const createHandleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.close,\n      event\n    });\n  };\n  const getOwnHandlers = (otherHandlers = {}) => _extends({}, otherHandlers, {\n    onClick: createHandleClick(otherHandlers)\n  });\n  function getRootProps(externalProps = {}) {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));\n    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {\n      id,\n      ref: handleRef,\n      role: \"menuitem\"\n    });\n  }\n  if (id === void 0) {\n    return {\n      getRootProps,\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index: index2,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/useMenuItem/useMenuItemContextStabilizer.js\nvar React37 = __toESM(require_react());\ninit_esm();\nfunction useMenuItemContextStabilizer(id) {\n  const listContext = React37.useContext(ListContext);\n  if (!listContext) {\n    throw new Error(\"MenuItem: ListContext was not found.\");\n  }\n  const itemId = useId(id);\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  let itemState;\n  if (itemId != null) {\n    itemState = getItemState(itemId);\n  } else {\n    itemState = {\n      focusable: true,\n      highlighted: false,\n      selected: false\n    };\n  }\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = itemState;\n  const localGetItemState = React37.useCallback((itemValue) => {\n    if (itemValue !== itemId) {\n      throw new Error([\"Base UI MenuItem: Tried to access the state of another MenuItem.\", `itemValue: ${itemValue} | id: ${itemId}`, \"This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization.\"].join(\"/n\"));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, itemId]);\n  const localContextValue = React37.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue,\n    id: itemId\n  };\n}\n\n// node_modules/@mui/base/MenuItem/MenuItem.js\ninit_composeClasses();\nvar import_jsx_runtime20 = __toESM(require_jsx_runtime());\nvar _excluded10 = [\"children\", \"disabled\", \"label\", \"id\", \"slotProps\", \"slots\"];\nfunction useUtilityClasses8(ownerState) {\n  const {\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focusVisible && \"focusVisible\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\nvar InnerMenuItem = React38.memo(React38.forwardRef(function MenuItem(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    disabled: disabledProp = false,\n    label,\n    id,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);\n  const {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted\n  } = useMenuItem({\n    id,\n    disabled: disabledProp,\n    rootRef: forwardedRef,\n    label\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    focusVisible,\n    highlighted\n  });\n  const classes = useUtilityClasses8(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"li\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return (0, import_jsx_runtime20.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n}));\nvar MenuItem2 = React38.forwardRef(function MenuItem3(props, ref) {\n  const {\n    id: idProp\n  } = props;\n  const {\n    contextValue,\n    id\n  } = useMenuItemContextStabilizer(idProp);\n  return (0, import_jsx_runtime20.jsx)(ListContext.Provider, {\n    value: contextValue,\n    children: (0, import_jsx_runtime20.jsx)(InnerMenuItem, _extends({}, props, {\n      id,\n      ref\n    }))\n  });\n});\ntrue ? MenuItem2.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types14.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types14.default.string,\n  /**\n   * If `true`, the menu item will be disabled.\n   * @default false\n   */\n  disabled: import_prop_types14.default.bool,\n  /**\n   * A text representation of the menu item's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: import_prop_types14.default.string,\n  /**\n   * @ignore\n   */\n  onClick: import_prop_types14.default.func,\n  /**\n   * The props used for each slot inside the MenuItem.\n   * @default {}\n   */\n  slotProps: import_prop_types14.default.shape({\n    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])\n  }),\n  /**\n   * The components used for each slot inside the MenuItem.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types14.default.shape({\n    root: import_prop_types14.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Modal/Modal.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React39 = __toESM(require_react());\nvar import_prop_types15 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Modal/modalClasses.js\nfunction getModalUtilityClass(slot) {\n  return generateUtilityClass(\"MuiModal\", slot);\n}\nvar modalClasses = generateUtilityClasses(\"MuiModal\", [\"root\", \"hidden\", \"backdrop\"]);\n\n// node_modules/@mui/base/Modal/Modal.js\nvar import_jsx_runtime21 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime22 = __toESM(require_jsx_runtime());\nvar _excluded11 = [\"children\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"onBackdropClick\", \"onClose\", \"onKeyDown\", \"open\", \"onTransitionEnter\", \"onTransitionExited\", \"slotProps\", \"slots\"];\nvar useUtilityClasses9 = (ownerState) => {\n  const {\n    open,\n    exited\n  } = ownerState;\n  const slots = {\n    root: [\"root\", !open && exited && \"hidden\"],\n    backdrop: [\"backdrop\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));\n};\nvar Modal = React39.forwardRef(function Modal2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    onBackdropClick,\n    open,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);\n  const propsWithDefaults = _extends({}, props, {\n    closeAfterTransition,\n    disableAutoFocus,\n    disableEnforceFocus,\n    disableEscapeKeyDown,\n    disablePortal,\n    disableRestoreFocus,\n    disableScrollLock,\n    hideBackdrop,\n    keepMounted\n  });\n  const {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    portalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  } = useModal(_extends({}, propsWithDefaults, {\n    rootRef: forwardedRef\n  }));\n  const ownerState = _extends({}, propsWithDefaults, {\n    exited,\n    hasTransition\n  });\n  const classes = useUtilityClasses9(ownerState);\n  const childProps = {};\n  if (children.props.tabIndex === void 0) {\n    childProps.tabIndex = \"-1\";\n  }\n  if (hasTransition) {\n    const {\n      onEnter,\n      onExited\n    } = getTransitionProps();\n    childProps.onEnter = onEnter;\n    childProps.onExited = onExited;\n  }\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    getSlotProps: getRootProps,\n    className: classes.root,\n    ownerState\n  });\n  const BackdropComponent = slots.backdrop;\n  const backdropProps = useSlotProps({\n    elementType: BackdropComponent,\n    externalSlotProps: slotProps.backdrop,\n    getSlotProps: (otherHandlers) => {\n      return getBackdropProps(_extends({}, otherHandlers, {\n        onClick: (e) => {\n          if (onBackdropClick) {\n            onBackdropClick(e);\n          }\n          if (otherHandlers != null && otherHandlers.onClick) {\n            otherHandlers.onClick(e);\n          }\n        }\n      }));\n    },\n    className: classes.backdrop,\n    ownerState\n  });\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n  return (0, import_jsx_runtime21.jsx)(Portal, {\n    ref: portalRef,\n    container,\n    disablePortal,\n    children: (0, import_jsx_runtime22.jsxs)(Root, _extends({}, rootProps, {\n      children: [!hideBackdrop && BackdropComponent ? (0, import_jsx_runtime21.jsx)(BackdropComponent, _extends({}, backdropProps)) : null, (0, import_jsx_runtime21.jsx)(FocusTrap, {\n        disableEnforceFocus,\n        disableAutoFocus,\n        disableRestoreFocus,\n        isEnabled: isTopModal,\n        open,\n        children: React39.cloneElement(children, childProps)\n      })]\n    }))\n  });\n});\ntrue ? Modal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef_default.isRequired,\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition: import_prop_types15.default.bool,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: import_prop_types15.default.oneOfType([HTMLElementType, import_prop_types15.default.func]),\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: import_prop_types15.default.bool,\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: import_prop_types15.default.bool,\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown: import_prop_types15.default.bool,\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: import_prop_types15.default.bool,\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: import_prop_types15.default.bool,\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock: import_prop_types15.default.bool,\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop: import_prop_types15.default.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted: import_prop_types15.default.bool,\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick: import_prop_types15.default.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: import_prop_types15.default.func,\n  /**\n   * A function called when a transition enters.\n   */\n  onTransitionEnter: import_prop_types15.default.func,\n  /**\n   * A function called when a transition has exited.\n   */\n  onTransitionExited: import_prop_types15.default.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: import_prop_types15.default.bool.isRequired,\n  /**\n   * The props used for each slot inside the Modal.\n   * @default {}\n   */\n  slotProps: import_prop_types15.default.shape({\n    backdrop: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object]),\n    root: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Modal.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types15.default.shape({\n    backdrop: import_prop_types15.default.elementType,\n    root: import_prop_types15.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Unstable_NumberInput/NumberInput.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React41 = __toESM(require_react());\nvar import_prop_types16 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/Unstable_NumberInput/numberInputClasses.js\nfunction getNumberInputUtilityClass(slot) {\n  return generateUtilityClass(\"MuiNumberInput\", slot);\n}\nvar numberInputClasses = generateUtilityClasses(\"MuiNumberInput\", [\"root\", \"formControl\", \"focused\", \"disabled\", \"readOnly\", \"error\", \"input\", \"incrementButton\", \"decrementButton\", \"adornedStart\", \"adornedEnd\"]);\n\n// node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js\ninit_extends();\ninit_esm();\nvar React40 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/unstable_useNumberInput/utils.js\nfunction simpleClamp(val, min3 = Number.MIN_SAFE_INTEGER, max3 = Number.MAX_SAFE_INTEGER) {\n  return Math.max(min3, Math.min(val, max3));\n}\nfunction clamp2(val, min3 = Number.MIN_SAFE_INTEGER, max3 = Number.MAX_SAFE_INTEGER, stepProp = NaN) {\n  if (Number.isNaN(stepProp)) {\n    return simpleClamp(val, min3, max3);\n  }\n  const step = stepProp || 1;\n  const remainder = val % step;\n  const positivity = Math.sign(remainder);\n  if (Math.abs(remainder) > step / 2) {\n    return simpleClamp(val + positivity * (step - Math.abs(remainder)), min3, max3);\n  }\n  return simpleClamp(val - positivity * Math.abs(remainder), min3, max3);\n}\nfunction isNumber(val) {\n  return typeof val === \"number\" && !Number.isNaN(val) && Number.isFinite(val);\n}\n\n// node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js\nvar STEP_KEYS = [\"ArrowUp\", \"ArrowDown\", \"PageUp\", \"PageDown\"];\nvar SUPPORTED_KEYS = [...STEP_KEYS, \"Home\", \"End\"];\nfunction parseInput(v) {\n  return v ? String(v.trim()) : String(v);\n}\nfunction useNumberInput(parameters) {\n  const {\n    min: min3,\n    max: max3,\n    step,\n    shiftMultiplier = 10,\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onInputChange,\n    onFocus,\n    onChange,\n    required: requiredProp = false,\n    readOnly: readOnlyProp = false,\n    value: valueProp,\n    inputRef: inputRefProp,\n    inputId: inputIdProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  const {\n    current: isControlled\n  } = React40.useRef(valueProp != null);\n  const handleInputRefWarning = React40.useCallback((instance) => {\n    if (true) {\n      if (instance && instance.nodeName !== \"INPUT\" && !instance.focus) {\n        console.error([\"MUI: You have provided a `slots.input` to the input component\", \"that does not correctly handle the `ref` prop.\", \"Make sure the `ref` prop is called with a HTMLInputElement.\"].join(\"\\n\"));\n      }\n    }\n  }, []);\n  const inputRef = React40.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const inputId = useId(inputIdProp);\n  const [focused, setFocused] = React40.useState(false);\n  const [value, setValue] = useControlled({\n    controlled: valueProp,\n    default: defaultValueProp,\n    name: \"NumberInput\"\n  });\n  const [dirtyValue, setDirtyValue] = React40.useState(value ? String(value) : void 0);\n  React40.useEffect(() => {\n    if (!formControlContext && disabledProp && focused) {\n      setFocused(false);\n      onBlur == null || onBlur();\n    }\n  }, [formControlContext, disabledProp, focused, onBlur]);\n  const handleFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu;\n    (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (formControlContext && formControlContext.onFocus) {\n      var _formControlContext$o;\n      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);\n    }\n    setFocused(true);\n  };\n  const handleValueChange = () => (event, val) => {\n    let newValue;\n    if (val === void 0) {\n      newValue = val;\n      setDirtyValue(\"\");\n    } else {\n      newValue = clamp2(val, min3, max3, step);\n      setDirtyValue(String(newValue));\n    }\n    setValue(newValue);\n    if (isNumber(newValue)) {\n      onChange == null || onChange(event, newValue);\n    } else {\n      onChange == null || onChange(event, void 0);\n    }\n  };\n  const handleInputChange = (otherHandlers) => (event) => {\n    var _formControlContext$o2, _otherHandlers$onInpu;\n    if (!isControlled && event.target === null) {\n      throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));\n    }\n    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);\n    (_otherHandlers$onInpu = otherHandlers.onInputChange) == null || _otherHandlers$onInpu.call(otherHandlers, event);\n    const val = parseInput(event.currentTarget.value);\n    if (val === \"\" || val === \"-\") {\n      setDirtyValue(val);\n      setValue(void 0);\n    }\n    if (val.match(/^-?\\d+?$/)) {\n      setDirtyValue(val);\n      setValue(parseInt(val, 10));\n    }\n  };\n  const handleBlur2 = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    const val = parseInput(event.currentTarget.value);\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (val === \"\" || val === \"-\") {\n      handleValueChange()(event, void 0);\n    } else {\n      handleValueChange()(event, parseInt(val, 10));\n    }\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    }\n    setFocused(false);\n  };\n  const handleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n  };\n  const handleStep = (direction) => (event) => {\n    let newValue;\n    if (isNumber(value)) {\n      const multiplier = event.shiftKey || event.key === \"PageUp\" || event.key === \"PageDown\" ? shiftMultiplier : 1;\n      newValue = {\n        up: value + (step != null ? step : 1) * multiplier,\n        down: value - (step != null ? step : 1) * multiplier\n      }[direction];\n    } else {\n      newValue = {\n        up: min3 != null ? min3 : 0,\n        down: max3 != null ? max3 : 0\n      }[direction];\n    }\n    handleValueChange()(event, newValue);\n  };\n  const handleKeyDown2 = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (SUPPORTED_KEYS.includes(event.key)) {\n      event.preventDefault();\n    }\n    if (STEP_KEYS.includes(event.key)) {\n      const direction = {\n        ArrowUp: \"up\",\n        ArrowDown: \"down\",\n        PageUp: \"up\",\n        PageDown: \"down\"\n      }[event.key];\n      handleStep(direction)(event);\n    }\n    if (event.key === \"Home\" && isNumber(max3)) {\n      handleValueChange()(event, max3);\n    }\n    if (event.key === \"End\" && isNumber(min3)) {\n      handleValueChange()(event, min3);\n    }\n  };\n  const getRootProps = (externalProps = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters, [\"onBlur\", \"onInputChange\", \"onFocus\", \"onChange\"]);\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n    return _extends({}, externalProps, externalEventHandlers, {\n      onClick: handleClick(externalEventHandlers)\n    });\n  };\n  const getInputProps = (externalProps = {}) => {\n    var _ref;\n    const externalEventHandlers = _extends({\n      onBlur,\n      onFocus\n    }, extractEventHandlers(externalProps, [\"onInputChange\"]));\n    const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {\n      onFocus: handleFocus(externalEventHandlers),\n      onChange: handleInputChange(_extends({}, externalEventHandlers, {\n        onInputChange\n      })),\n      onBlur: handleBlur2(externalEventHandlers),\n      onKeyDown: handleKeyDown2(externalEventHandlers)\n    });\n    const displayValue = (_ref = focused ? dirtyValue : value) != null ? _ref : \"\";\n    return _extends({}, mergedEventHandlers, {\n      type: \"text\",\n      id: inputId,\n      \"aria-invalid\": errorProp || void 0,\n      defaultValue: void 0,\n      ref: handleInputRef,\n      value: displayValue,\n      \"aria-valuenow\": displayValue,\n      \"aria-valuetext\": String(displayValue),\n      \"aria-valuemin\": min3,\n      \"aria-valuemax\": max3,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      spellCheck: \"false\",\n      required: requiredProp,\n      readOnly: readOnlyProp,\n      \"aria-disabled\": disabledProp,\n      disabled: disabledProp\n    });\n  };\n  const handleStepperButtonMouseDown = (event) => {\n    event.preventDefault();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  const stepperButtonCommonProps = {\n    \"aria-controls\": inputId,\n    tabIndex: -1\n  };\n  const isIncrementDisabled = disabledProp || (isNumber(value) ? value >= (max3 != null ? max3 : Number.MAX_SAFE_INTEGER) : false);\n  const getIncrementButtonProps = (externalProps = {}) => {\n    return _extends({}, externalProps, stepperButtonCommonProps, {\n      disabled: isIncrementDisabled,\n      \"aria-disabled\": isIncrementDisabled,\n      onMouseDown: handleStepperButtonMouseDown,\n      onClick: handleStep(\"up\")\n    });\n  };\n  const isDecrementDisabled = disabledProp || (isNumber(value) ? value <= (min3 != null ? min3 : Number.MIN_SAFE_INTEGER) : false);\n  const getDecrementButtonProps = (externalProps = {}) => {\n    return _extends({}, externalProps, stepperButtonCommonProps, {\n      disabled: isDecrementDisabled,\n      \"aria-disabled\": isDecrementDisabled,\n      onMouseDown: handleStepperButtonMouseDown,\n      onClick: handleStep(\"down\")\n    });\n  };\n  return {\n    disabled: disabledProp,\n    error: errorProp,\n    focused,\n    formControlContext,\n    getInputProps,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getRootProps,\n    required: requiredProp,\n    value: focused ? dirtyValue : value,\n    isIncrementDisabled,\n    isDecrementDisabled,\n    inputValue: dirtyValue\n  };\n}\n\n// node_modules/@mui/base/Unstable_NumberInput/NumberInput.js\ninit_composeClasses();\nvar import_jsx_runtime23 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime24 = __toESM(require_jsx_runtime());\nvar _excluded12 = [\"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"id\", \"max\", \"min\", \"onBlur\", \"onInputChange\", \"onFocus\", \"onChange\", \"placeholder\", \"required\", \"readOnly\", \"shiftMultiplier\", \"startAdornment\", \"step\", \"value\", \"slotProps\", \"slots\"];\nvar useUtilityClasses10 = (ownerState) => {\n  const {\n    disabled,\n    error,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", error && \"error\", focused && \"focused\", readOnly && \"readOnly\", Boolean(formControlContext) && \"formControl\", Boolean(startAdornment) && \"adornedStart\", Boolean(endAdornment) && \"adornedEnd\"],\n    input: [\"input\", disabled && \"disabled\", readOnly && \"readOnly\"],\n    incrementButton: [\"incrementButton\", isIncrementDisabled && \"disabled\"],\n    decrementButton: [\"decrementButton\", isDecrementDisabled && \"disabled\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getNumberInputUtilityClass));\n};\nvar NumberInput = React41.forwardRef(function NumberInput2(props, forwardedRef) {\n  var _slots$root, _slots$input, _slots$incrementButto, _slots$decrementButto;\n  const {\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    max: max3,\n    min: min3,\n    onBlur,\n    onInputChange,\n    onFocus,\n    onChange,\n    placeholder,\n    required,\n    readOnly = false,\n    shiftMultiplier,\n    startAdornment,\n    step,\n    value,\n    slotProps = {},\n    slots = {}\n  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded12);\n  const {\n    getRootProps,\n    getInputProps,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    focused,\n    error: errorState,\n    disabled: disabledState,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  } = useNumberInput({\n    min: min3,\n    max: max3,\n    step,\n    shiftMultiplier,\n    defaultValue,\n    disabled,\n    error,\n    onFocus,\n    onInputChange,\n    onBlur,\n    onChange,\n    required,\n    readOnly,\n    value,\n    inputId: id\n  });\n  const ownerState = _extends({}, props, {\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  });\n  const classes = useUtilityClasses10(ownerState);\n  const propsForwardedToInputSlot = {\n    placeholder\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: rest,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Input3 = (_slots$input = slots.input) != null ? _slots$input : \"input\";\n  const inputProps = useSlotProps({\n    elementType: Input3,\n    getSlotProps: (otherHandlers) => getInputProps(_extends({}, otherHandlers, propsForwardedToInputSlot)),\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const IncrementButton = (_slots$incrementButto = slots.incrementButton) != null ? _slots$incrementButto : \"button\";\n  const incrementButtonProps = useSlotProps({\n    elementType: IncrementButton,\n    getSlotProps: getIncrementButtonProps,\n    externalSlotProps: slotProps.incrementButton,\n    ownerState,\n    className: classes.incrementButton\n  });\n  const DecrementButton = (_slots$decrementButto = slots.decrementButton) != null ? _slots$decrementButto : \"button\";\n  const decrementButtonProps = useSlotProps({\n    elementType: DecrementButton,\n    getSlotProps: getDecrementButtonProps,\n    externalSlotProps: slotProps.decrementButton,\n    ownerState,\n    className: classes.decrementButton\n  });\n  return (0, import_jsx_runtime24.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime23.jsx)(DecrementButton, _extends({}, decrementButtonProps)), (0, import_jsx_runtime23.jsx)(IncrementButton, _extends({}, incrementButtonProps)), startAdornment, (0, import_jsx_runtime23.jsx)(Input3, _extends({}, inputProps)), endAdornment]\n  }));\n});\ntrue ? NumberInput.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types16.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types16.default.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types16.default.any,\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: import_prop_types16.default.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: import_prop_types16.default.node,\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.\n   */\n  error: import_prop_types16.default.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: import_prop_types16.default.string,\n  /**\n   * The maximum value.\n   */\n  max: import_prop_types16.default.number,\n  /**\n   * The minimum value.\n   */\n  min: import_prop_types16.default.number,\n  /**\n   * @ignore\n   */\n  onBlur: import_prop_types16.default.func,\n  /**\n   * Callback fired after the value is clamped and changes - when the `input` is blurred or when\n   * the stepper buttons are triggered.\n   * Called with `undefined` when the value is unset.\n   *\n   * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback\n   * @param {number|undefined} value The new value of the component\n   */\n  onChange: import_prop_types16.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: import_prop_types16.default.func,\n  /**\n   * Callback fired when the `input` value changes after each keypress, before clamping is applied.\n   * Note that `event.target.value` may contain values that fall outside of `min` and `max` or\n   * are otherwise \"invalid\".\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   */\n  onInputChange: import_prop_types16.default.func,\n  /**\n   * @ignore\n   */\n  placeholder: import_prop_types16.default.string,\n  /**\n   * If `true`, the `input` element becomes read-only. The stepper buttons remain active,\n   * with the addition that they are now keyboard focusable.\n   * @default false\n   */\n  readOnly: import_prop_types16.default.bool,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: import_prop_types16.default.bool,\n  /**\n   * Multiplier applied to `step` if the shift key is held while incrementing\n   * or decrementing the value. Defaults to `10`.\n   */\n  shiftMultiplier: import_prop_types16.default.number,\n  /**\n   * The props used for each slot inside the NumberInput.\n   * @default {}\n   */\n  slotProps: import_prop_types16.default.shape({\n    decrementButton: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),\n    incrementButton: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),\n    input: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),\n    root: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object])\n  }),\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types16.default.shape({\n    decrementButton: import_prop_types16.default.elementType,\n    incrementButton: import_prop_types16.default.elementType,\n    input: import_prop_types16.default.elementType,\n    root: import_prop_types16.default.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: import_prop_types16.default.node,\n  /**\n   * The amount that the value changes on each increment or decrement.\n   */\n  step: import_prop_types16.default.number,\n  /**\n   * The current value. Use when the component is controlled.\n   */\n  value: import_prop_types16.default.any\n} : void 0;\n\n// node_modules/@mui/base/OptionGroup/OptionGroup.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React42 = __toESM(require_react());\nvar import_prop_types17 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/OptionGroup/optionGroupClasses.js\nfunction getOptionGroupUtilityClass(slot) {\n  return generateUtilityClass(\"MuiOptionGroup\", slot);\n}\nvar optionGroupClasses = generateUtilityClasses(\"MuiOptionGroup\", [\"root\", \"disabled\", \"label\", \"list\"]);\n\n// node_modules/@mui/base/OptionGroup/OptionGroup.js\nvar import_jsx_runtime25 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime26 = __toESM(require_jsx_runtime());\nvar _excluded13 = [\"disabled\", \"slotProps\", \"slots\"];\nfunction useUtilityClasses11(disabled) {\n  const slots = {\n    root: [\"root\", disabled && \"disabled\"],\n    label: [\"label\"],\n    list: [\"list\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionGroupUtilityClass));\n}\nvar OptionGroup = React42.forwardRef(function OptionGroup2(props, forwardedRef) {\n  const {\n    disabled = false,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);\n  const Root = (slots == null ? void 0 : slots.root) || \"li\";\n  const Label = (slots == null ? void 0 : slots.label) || \"span\";\n  const List = (slots == null ? void 0 : slots.list) || \"ul\";\n  const classes = useUtilityClasses11(disabled);\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState: props,\n    className: classes.root\n  });\n  const labelProps = useSlotProps({\n    elementType: Label,\n    externalSlotProps: slotProps.label,\n    ownerState: props,\n    className: classes.label\n  });\n  const listProps = useSlotProps({\n    elementType: List,\n    externalSlotProps: slotProps.list,\n    ownerState: props,\n    className: classes.list\n  });\n  return (0, import_jsx_runtime26.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime25.jsx)(Label, _extends({}, labelProps, {\n      children: props.label\n    })), (0, import_jsx_runtime25.jsx)(List, _extends({}, listProps, {\n      children: props.children\n    }))]\n  }));\n});\ntrue ? OptionGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types17.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types17.default.string,\n  /**\n   * If `true` all the options in the group will be disabled.\n   * @default false\n   */\n  disabled: import_prop_types17.default.bool,\n  /**\n   * The human-readable description of the group.\n   */\n  label: import_prop_types17.default.node,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: import_prop_types17.default.shape({\n    label: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object]),\n    list: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object]),\n    root: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object])\n  }),\n  /**\n   * The components used for each slot inside the OptionGroup.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types17.default.shape({\n    label: import_prop_types17.default.elementType,\n    list: import_prop_types17.default.elementType,\n    root: import_prop_types17.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Option/Option.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React45 = __toESM(require_react());\nvar import_prop_types18 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Option/optionClasses.js\nfunction getOptionUtilityClass(slot) {\n  return generateUtilityClass(\"MuiOption\", slot);\n}\nvar optionClasses = generateUtilityClasses(\"MuiOption\", [\"root\", \"disabled\", \"selected\", \"highlighted\"]);\n\n// node_modules/@mui/base/useOption/useOption.js\ninit_extends();\nvar React43 = __toESM(require_react());\ninit_esm();\nfunction useOption(params) {\n  const {\n    value,\n    label,\n    disabled,\n    rootRef: optionRefParam,\n    id: idParam\n  } = params;\n  const {\n    getRootProps: getListItemProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const id = useId(idParam);\n  const optionRef = React43.useRef(null);\n  const selectOption = React43.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const {\n    index: index2\n  } = useCompoundItem(value, selectOption);\n  const handleRef = useForkRef(optionRefParam, optionRef);\n  return {\n    getRootProps: (externalProps = {}) => {\n      const externalEventHandlers = extractEventHandlers(externalProps);\n      return _extends({}, externalProps, getListItemProps(externalEventHandlers), {\n        id,\n        ref: handleRef,\n        role: \"option\",\n        \"aria-selected\": selected\n      });\n    },\n    highlighted,\n    index: index2,\n    selected,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/useOption/useOptionContextStabilizer.js\nvar React44 = __toESM(require_react());\nfunction useOptionContextStabilizer(value) {\n  const listContext = React44.useContext(ListContext);\n  if (!listContext) {\n    throw new Error(\"Option: ListContext was not found.\");\n  }\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(value);\n  const localGetItemState = React44.useCallback((itemValue) => {\n    if (itemValue !== value) {\n      throw new Error([\"Base UI Option: Tried to access the state of another Option.\", \"This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.\"].join(\"/n\"));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, value]);\n  const localContextValue = React44.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue\n  };\n}\n\n// node_modules/@mui/base/Option/Option.js\nvar import_jsx_runtime27 = __toESM(require_jsx_runtime());\nvar _excluded14 = [\"children\", \"disabled\", \"label\", \"slotProps\", \"slots\", \"value\"];\nfunction useUtilityClasses12(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", highlighted && \"highlighted\", selected && \"selected\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\nvar InnerOption = React45.memo(React45.forwardRef(function Option(props, forwardedRef) {\n  var _slots$root, _optionRef$current;\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"li\";\n  const optionRef = React45.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef);\n  const computedLabel = label != null ? label : typeof children === \"string\" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index: index2\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    highlighted,\n    index: index2,\n    selected\n  });\n  const classes = useUtilityClasses12(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return (0, import_jsx_runtime27.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n}));\nvar Option2 = React45.forwardRef(function Option3(props, ref) {\n  const {\n    value\n  } = props;\n  const {\n    contextValue\n  } = useOptionContextStabilizer(value);\n  return (0, import_jsx_runtime27.jsx)(ListContext.Provider, {\n    value: contextValue,\n    children: (0, import_jsx_runtime27.jsx)(InnerOption, _extends({}, props, {\n      ref\n    }))\n  });\n});\ntrue ? Option2.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types18.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types18.default.string,\n  /**\n   * If `true`, the option will be disabled.\n   * @default false\n   */\n  disabled: import_prop_types18.default.bool,\n  /**\n   * A text representation of the option's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: import_prop_types18.default.string,\n  /**\n   * The props used for each slot inside the Option.\n   * @default {}\n   */\n  slotProps: import_prop_types18.default.shape({\n    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Option.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types18.default.shape({\n    root: import_prop_types18.default.elementType\n  }),\n  /**\n   * The value of the option.\n   */\n  value: import_prop_types18.default.any.isRequired\n} : void 0;\n\n// node_modules/@mui/base/Unstable_Popup/Popup.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React47 = __toESM(require_react());\nvar import_prop_types19 = __toESM(require_prop_types());\n\n// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\nvar sides = [\"top\", \"right\", \"bottom\", \"left\"];\nvar alignments = [\"start\", \"end\"];\nvar placements2 = sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nvar min2 = Math.min;\nvar max2 = Math.max;\nvar round2 = Math.round;\nvar floor = Math.floor;\nvar createCoords = (v) => ({\n  x: v,\n  y: v\n});\nvar oppositeSideMap = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n};\nvar oppositeAlignmentMap = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction evaluate(value, param) {\n  return typeof value === \"function\" ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n  return placement.split(\"-\")[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction getAxisLength(axis) {\n  return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction getSideAxis(placement) {\n  return [\"top\", \"bottom\"].includes(getSide(placement)) ? \"y\" : \"x\";\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === \"x\" ? alignment === (rtl ? \"end\" : \"start\") ? \"right\" : \"left\" : alignment === \"start\" ? \"bottom\" : \"top\";\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement2(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement2(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement2(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = [\"left\", \"right\"];\n  const rl = [\"right\", \"left\"];\n  const tb = [\"top\", \"bottom\"];\n  const bt = [\"bottom\", \"top\"];\n  switch (side) {\n    case \"top\":\n    case \"bottom\":\n      if (rtl)\n        return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case \"left\":\n    case \"right\":\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === \"start\", rtl);\n  if (alignment) {\n    list = list.map((side) => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement2(placement) {\n  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== \"number\" ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect2(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n// node_modules/@floating-ui/core/dist/floating-ui.core.mjs\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference: reference2,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === \"y\";\n  const commonX = reference2.x + reference2.width / 2 - floating.width / 2;\n  const commonY = reference2.y + reference2.height / 2 - floating.height / 2;\n  const commonAlign = reference2[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case \"top\":\n      coords = {\n        x: commonX,\n        y: reference2.y - floating.height\n      };\n      break;\n    case \"bottom\":\n      coords = {\n        x: commonX,\n        y: reference2.y + reference2.height\n      };\n      break;\n    case \"right\":\n      coords = {\n        x: reference2.x + reference2.width,\n        y: commonY\n      };\n      break;\n    case \"left\":\n      coords = {\n        x: reference2.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference2.x,\n        y: reference2.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case \"start\":\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case \"end\":\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\nvar computePosition = async (reference2, floating, config) => {\n  const {\n    placement = \"bottom\",\n    strategy = \"absolute\",\n    middleware = [],\n    platform: platform2\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));\n  let rects = await platform2.getElementRects({\n    reference: reference2,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn: fn2\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn2({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform: platform2,\n      elements: {\n        reference: reference2,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === \"object\") {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform2.getElementRects({\n            reference: reference2,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\nasync function detectOverflow2(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform: platform2,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = \"clippingAncestors\",\n    rootBoundary = \"viewport\",\n    elementContext = \"floating\",\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === \"floating\" ? \"reference\" : \"floating\";\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect2(await platform2.getClippingRect({\n    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === \"floating\" ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));\n  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect2(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\nvar flip2 = function(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: \"flip\",\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform: platform2,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = \"bestFit\",\n        fallbackAxisSideDirection = \"none\",\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement2(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== \"none\") {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements3 = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow2(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides2 = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n      if (!overflows.every((side2) => side2 <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements3[nextIndex];\n        if (nextPlacement) {\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case \"bestFit\": {\n              var _overflowsData$map$so;\n              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n              if (placement2) {\n                resetPlacement = placement2;\n              }\n              break;\n            }\n            case \"initialPlacement\":\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform: platform2,\n    elements\n  } = state;\n  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === \"y\";\n  const mainAxisMulti = [\"left\", \"top\"].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === \"number\" ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === \"number\") {\n    crossAxis = alignment === \"end\" ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\nvar offset2 = function(options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: \"offset\",\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n// node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs\nfunction getNodeName2(node) {\n  if (isNode(node)) {\n    return (node.nodeName || \"\").toLowerCase();\n  }\n  return \"#document\";\n}\nfunction getWindow2(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement2(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow2(value).Node;\n}\nfunction isElement2(value) {\n  return value instanceof Element || value instanceof getWindow2(value).Element;\n}\nfunction isHTMLElement3(value) {\n  return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;\n}\nfunction isShadowRoot2(value) {\n  if (typeof ShadowRoot === \"undefined\") {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle2(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && ![\"inline\", \"contents\"].includes(display);\n}\nfunction isTableElement2(element) {\n  return [\"table\", \"td\", \"th\"].includes(getNodeName2(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle2(element);\n  return css.transform !== \"none\" || css.perspective !== \"none\" || (css.containerType ? css.containerType !== \"normal\" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== \"none\" : false) || !webkit && (css.filter ? css.filter !== \"none\" : false) || [\"transform\", \"perspective\", \"filter\"].some((value) => (css.willChange || \"\").includes(value)) || [\"paint\", \"layout\", \"strict\", \"content\"].some((value) => (css.contain || \"\").includes(value));\n}\nfunction getContainingBlock2(element) {\n  let currentNode = getParentNode2(element);\n  while (isHTMLElement3(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode2(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === \"undefined\" || !CSS.supports)\n    return false;\n  return CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction isLastTraversableNode(node) {\n  return [\"html\", \"body\", \"#document\"].includes(getNodeName2(node));\n}\nfunction getComputedStyle2(element) {\n  return getWindow2(element).getComputedStyle(element);\n}\nfunction getNodeScroll2(element) {\n  if (isElement2(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode2(node) {\n  if (getNodeName2(node) === \"html\") {\n    return node;\n  }\n  const result = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot2(node) && node.host || // Fallback.\n    getDocumentElement2(node)\n  );\n  return isShadowRoot2(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode2(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement3(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow2(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n\n// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\nfunction getCssDimensions(element) {\n  const css = getComputedStyle2(element);\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement3(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\nfunction unwrapElement(element) {\n  return !isElement2(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement3(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round2(rect.width) : rect.width) / width;\n  let y = ($ ? round2(rect.height) : rect.height) / height;\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\nvar noOffsets = createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow2(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {\n    return false;\n  }\n  return isFixed;\n}\nfunction getBoundingClientRect2(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement2(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow2(domElement);\n    const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow2(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle2(currentIFrame);\n      const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left2;\n      y += top2;\n      currentIFrame = getWindow2(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect2({\n    width,\n    height,\n    x,\n    y\n  });\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement3(offsetParent);\n  const documentElement = getDocumentElement2(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== \"fixed\") {\n    if (getNodeName2(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll2(offsetParent);\n    }\n    if (isHTMLElement3(offsetParent)) {\n      const offsetRect = getBoundingClientRect2(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\nfunction getWindowScrollBarX2(element) {\n  return getBoundingClientRect2(getDocumentElement2(element)).left + getNodeScroll2(element).scrollLeft;\n}\nfunction getDocumentRect2(element) {\n  const html = getDocumentElement2(element);\n  const scroll = getNodeScroll2(element);\n  const body = element.ownerDocument.body;\n  const width = max2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX2(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle2(body).direction === \"rtl\") {\n    x += max2(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getViewportRect2(element, strategy) {\n  const win = getWindow2(element);\n  const html = getDocumentElement2(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === \"fixed\") {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getInnerBoundingClientRect2(element, strategy) {\n  const clientRect = getBoundingClientRect2(element, true, strategy === \"fixed\");\n  const top2 = clientRect.top + element.clientTop;\n  const left2 = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement3(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left2 * scale.x;\n  const y = top2 * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === \"viewport\") {\n    rect = getViewportRect2(element, strategy);\n  } else if (clippingAncestor === \"document\") {\n    rect = getDocumentRect2(getDocumentElement2(element));\n  } else if (isElement2(clippingAncestor)) {\n    rect = getInnerBoundingClientRect2(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect2(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode2(element);\n  if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle2(parentNode).position === \"fixed\" || hasFixedPositionAncestor(parentNode, stopNode);\n}\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter((el) => isElement2(el) && getNodeName2(el) !== \"body\");\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle2(element).position === \"fixed\";\n  let currentNode = elementIsFixed ? getParentNode2(element) : element;\n  while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle2(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === \"fixed\") {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\"absolute\", \"fixed\"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      result = result.filter((ancestor) => ancestor !== currentNode);\n    } else {\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode2(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\nfunction getClippingRect2(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === \"clippingAncestors\" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max2(rect.top, accRect.top);\n    accRect.right = min2(rect.right, accRect.right);\n    accRect.bottom = min2(rect.bottom, accRect.bottom);\n    accRect.left = max2(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement3(offsetParent);\n  const documentElement = getDocumentElement2(offsetParent);\n  const isFixed = strategy === \"fixed\";\n  const rect = getBoundingClientRect2(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName2(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll2(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect2(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX2(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\nfunction getTrueOffsetParent2(element, polyfill) {\n  if (!isHTMLElement3(element) || getComputedStyle2(element).position === \"fixed\") {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\nfunction getOffsetParent2(element, polyfill) {\n  const window2 = getWindow2(element);\n  if (!isHTMLElement3(element)) {\n    return window2;\n  }\n  let offsetParent = getTrueOffsetParent2(element, polyfill);\n  while (offsetParent && isTableElement2(offsetParent) && getComputedStyle2(offsetParent).position === \"static\") {\n    offsetParent = getTrueOffsetParent2(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName2(offsetParent) === \"html\" || getNodeName2(offsetParent) === \"body\" && getComputedStyle2(offsetParent).position === \"static\" && !isContainingBlock(offsetParent))) {\n    return window2;\n  }\n  return offsetParent || getContainingBlock2(element) || window2;\n}\nvar getElementRects = async function(_ref) {\n  let {\n    reference: reference2,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent2;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference2, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...await getDimensionsFn(floating)\n    }\n  };\n};\nfunction isRTL(element) {\n  return getComputedStyle2(element).direction === \"rtl\";\n}\nvar platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement: getDocumentElement2,\n  getClippingRect: getClippingRect2,\n  getOffsetParent: getOffsetParent2,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement: isElement2,\n  isRTL\n};\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement2(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left: left2,\n      top: top2,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top2);\n    const insetRight = floor(root.clientWidth - (left2 + width));\n    const insetBottom = floor(root.clientHeight - (top2 + height));\n    const insetLeft = floor(left2);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max2(0, min2(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\nfunction autoUpdate(reference2, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === \"function\",\n    layoutShift = typeof IntersectionObserver === \"function\",\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference2);\n  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach((ancestor) => {\n    ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener(\"resize\", update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver((_ref) => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect2(reference2) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect2(reference2);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach((ancestor) => {\n      ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n      ancestorResize && ancestor.removeEventListener(\"resize\", update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\nvar computePosition2 = (reference2, floating, options) => {\n  const cache = /* @__PURE__ */ new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition(reference2, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\n// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\nvar React46 = __toESM(require_react(), 1);\nvar import_react = __toESM(require_react(), 1);\nvar ReactDOM3 = __toESM(require_react_dom(), 1);\nvar index = typeof document !== \"undefined\" ? import_react.useLayoutEffect : import_react.useEffect;\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === \"function\" && a.toString() === b.toString()) {\n    return true;\n  }\n  let length, i, keys;\n  if (a && b && typeof a == \"object\") {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length)\n        return false;\n      for (i = length; i-- !== 0; ) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0; ) {\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i];\n      if (key === \"_owner\" && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\nfunction getDPR(element) {\n  if (typeof window === \"undefined\") {\n    return 1;\n  }\n  const win = element.ownerDocument.defaultView || window;\n  return win.devicePixelRatio || 1;\n}\nfunction roundByDPR(element, value) {\n  const dpr = getDPR(element);\n  return Math.round(value * dpr) / dpr;\n}\nfunction useLatestRef(value) {\n  const ref = React46.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = \"bottom\",\n    strategy = \"absolute\",\n    middleware = [],\n    platform: platform2,\n    elements: {\n      reference: externalReference,\n      floating: externalFloating\n    } = {},\n    transform = true,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React46.useState({\n    x: 0,\n    y: 0,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React46.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const [_reference, _setReference] = React46.useState(null);\n  const [_floating, _setFloating] = React46.useState(null);\n  const setReference = React46.useCallback((node) => {\n    if (node != referenceRef.current) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, [_setReference]);\n  const setFloating = React46.useCallback((node) => {\n    if (node !== floatingRef.current) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, [_setFloating]);\n  const referenceEl = externalReference || _reference;\n  const floatingEl = externalFloating || _floating;\n  const referenceRef = React46.useRef(null);\n  const floatingRef = React46.useRef(null);\n  const dataRef = React46.useRef(data);\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform2);\n  const update = React46.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {\n      const fullData = {\n        ...data2,\n        isPositioned: true\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM3.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData((data2) => ({\n        ...data2,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React46.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (referenceEl)\n      referenceRef.current = referenceEl;\n    if (floatingEl)\n      floatingRef.current = floatingEl;\n    if (referenceEl && floatingEl) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n      } else {\n        update();\n      }\n    }\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);\n  const refs = React46.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React46.useMemo(() => ({\n    reference: referenceEl,\n    floating: floatingEl\n  }), [referenceEl, floatingEl]);\n  const floatingStyles = React46.useMemo(() => {\n    const initialStyles = {\n      position: strategy,\n      left: 0,\n      top: 0\n    };\n    if (!elements.floating) {\n      return initialStyles;\n    }\n    const x = roundByDPR(elements.floating, data.x);\n    const y = roundByDPR(elements.floating, data.y);\n    if (transform) {\n      return {\n        ...initialStyles,\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\n        ...getDPR(elements.floating) >= 1.5 && {\n          willChange: \"transform\"\n        }\n      };\n    }\n    return {\n      position: strategy,\n      left: x,\n      top: y\n    };\n  }, [strategy, transform, elements.floating, data.x, data.y]);\n  return React46.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    floatingStyles\n  }), [data, update, refs, elements, floatingStyles]);\n}\n\n// node_modules/@mui/base/Unstable_Popup/Popup.js\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Unstable_Popup/popupClasses.js\nfunction getPopupUtilityClass(slot) {\n  return generateUtilityClass(\"MuiPopup\", slot);\n}\nvar popupClasses = generateUtilityClasses(\"MuiPopup\", [\"root\", \"open\"]);\n\n// node_modules/@mui/base/Unstable_Popup/Popup.js\nvar import_jsx_runtime28 = __toESM(require_jsx_runtime());\nvar _excluded15 = [\"anchor\", \"children\", \"container\", \"disablePortal\", \"keepMounted\", \"middleware\", \"offset\", \"open\", \"placement\", \"slotProps\", \"slots\", \"strategy\", \"withTransition\"];\nfunction useUtilityClasses13(ownerState) {\n  const {\n    open\n  } = ownerState;\n  const slots = {\n    root: [\"root\", open && \"open\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getPopupUtilityClass));\n}\nfunction resolveAnchor(anchor) {\n  return typeof anchor === \"function\" ? anchor() : anchor;\n}\nvar Popup = React47.forwardRef(function Popup2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    anchor: anchorProp,\n    children,\n    container,\n    disablePortal = false,\n    keepMounted = false,\n    middleware,\n    offset: offsetProp = 0,\n    open = false,\n    placement = \"bottom\",\n    slotProps = {},\n    slots = {},\n    strategy = \"absolute\",\n    withTransition = false\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);\n  const {\n    refs,\n    elements,\n    floatingStyles,\n    update,\n    placement: finalPlacement\n  } = useFloating({\n    elements: {\n      reference: resolveAnchor(anchorProp)\n    },\n    open,\n    middleware: middleware != null ? middleware : [offset2(offsetProp != null ? offsetProp : 0), flip2()],\n    placement,\n    strategy,\n    whileElementsMounted: !keepMounted ? autoUpdate : void 0\n  });\n  const handleRef = useForkRef(refs.setFloating, forwardedRef);\n  const [exited, setExited] = React47.useState(true);\n  const handleEntering = () => {\n    setExited(false);\n  };\n  const handleExited = () => {\n    setExited(true);\n  };\n  useEnhancedEffect_default(() => {\n    if (keepMounted && open && elements.reference && elements.floating) {\n      const cleanup = autoUpdate(elements.reference, elements.floating, update);\n      return cleanup;\n    }\n    return void 0;\n  }, [keepMounted, open, elements, update]);\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    keepMounted,\n    offset: offset2,\n    open,\n    placement,\n    finalPlacement,\n    strategy,\n    withTransition\n  });\n  const display = !open && keepMounted && (!withTransition || exited) ? \"none\" : void 0;\n  const classes = useUtilityClasses13(ownerState);\n  const Root = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root,\n    additionalProps: {\n      ref: handleRef,\n      role: \"tooltip\",\n      style: _extends({}, floatingStyles, {\n        display\n      })\n    }\n  });\n  const shouldRender = open || keepMounted || withTransition && !exited;\n  if (!shouldRender) {\n    return null;\n  }\n  const childProps = {\n    placement: finalPlacement,\n    requestOpen: open,\n    onExited: handleExited,\n    onEnter: handleEntering\n  };\n  return (0, import_jsx_runtime28.jsx)(Portal, {\n    disablePortal,\n    container,\n    children: (0, import_jsx_runtime28.jsx)(Root, _extends({}, rootProps, {\n      children: typeof children === \"function\" ? children(childProps) : children\n    }))\n  });\n});\ntrue ? Popup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),\n   * or a function that returns either.\n   * It's used to set the position of the popup.\n   */\n  anchor: import_prop_types19.default.oneOfType([HTMLElementType, import_prop_types19.default.object, import_prop_types19.default.func]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types19.default.oneOfType([import_prop_types19.default.node, import_prop_types19.default.func]),\n  /**\n   * An HTML element or function that returns one. The container will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object, so it's `document.body` in these cases.\n   */\n  container: import_prop_types19.default.oneOfType([HTMLElementType, import_prop_types19.default.func]),\n  /**\n   * If `true`, the popup will be rendered where it is defined, without the use of portals.\n   * @default false\n   */\n  disablePortal: import_prop_types19.default.bool,\n  /**\n   * If `true`, the popup will exist in the DOM even if it's closed.\n   * Its visibility will be controlled by the `display` CSS property.\n   *\n   * Otherwise, a closed popup will be removed from the DOM.\n   *\n   * @default false\n   */\n  keepMounted: import_prop_types19.default.bool,\n  /**\n   * Collection of Floating UI middleware to use when positioning the popup.\n   * If not provided, the [`offset`](https://floating-ui.com/docs/offset)\n   * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.\n   *\n   * @see https://floating-ui.com/docs/computePosition#middleware\n   */\n  middleware: import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf([false]), import_prop_types19.default.shape({\n    fn: import_prop_types19.default.func.isRequired,\n    name: import_prop_types19.default.string.isRequired,\n    options: import_prop_types19.default.any\n  })])),\n  /**\n   * Distance between a popup and the trigger element.\n   * This prop is ignored when custom `middleware` is provided.\n   *\n   * @default 0\n   * @see https://floating-ui.com/docs/offset\n   */\n  offset: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.number, import_prop_types19.default.shape({\n    alignmentAxis: import_prop_types19.default.number,\n    crossAxis: import_prop_types19.default.number,\n    mainAxis: import_prop_types19.default.number\n  })]),\n  /**\n   * If `true`, the popup is visible.\n   *\n   * @default false\n   */\n  open: import_prop_types19.default.bool,\n  /**\n   * Determines where to place the popup relative to the trigger element.\n   *\n   * @default 'bottom'\n   * @see https://floating-ui.com/docs/computePosition#placement\n   */\n  placement: import_prop_types19.default.oneOf([\"bottom-end\", \"bottom-start\", \"bottom\", \"left-end\", \"left-start\", \"left\", \"right-end\", \"right-start\", \"right\", \"top-end\", \"top-start\", \"top\"]),\n  /**\n   * The props used for each slot inside the Popup.\n   *\n   * @default {}\n   */\n  slotProps: import_prop_types19.default.shape({\n    root: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Popup.\n   * Either a string to use a HTML element or a component.\n   *\n   * @default {}\n   */\n  slots: import_prop_types19.default.shape({\n    root: import_prop_types19.default.elementType\n  }),\n  /**\n   * The type of CSS position property to use (absolute or fixed).\n   *\n   * @default 'absolute'\n   * @see https://floating-ui.com/docs/computePosition#strategy\n   */\n  strategy: import_prop_types19.default.oneOf([\"absolute\", \"fixed\"]),\n  /**\n   * If `true`, the popup will not disappear immediately when it needs to be closed\n   * but wait until the exit transition has finished.\n   * In such a case, a function form of `children` must be used and `onExited`\n   * callback function must be called when the transition or animation finish.\n   *\n   * @default false\n   */\n  withTransition: import_prop_types19.default.bool\n} : void 0;\n\n// node_modules/@mui/base/Select/Select.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React50 = __toESM(require_react());\nvar import_prop_types20 = __toESM(require_prop_types());\ninit_esm();\n\n// node_modules/@mui/base/useSelect/useSelect.js\ninit_extends();\nvar React48 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/useSelect/useSelect.types.js\nvar SelectActionTypes = {\n  buttonClick: \"buttonClick\",\n  browserAutoFill: \"browserAutoFill\"\n};\n\n// node_modules/@mui/base/useSelect/defaultOptionStringifier.js\nvar defaultOptionStringifier = (option) => {\n  const {\n    label,\n    value\n  } = option;\n  if (typeof label === \"string\") {\n    return label;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  return String(option);\n};\n\n// node_modules/@mui/base/useSelect/selectReducer.js\ninit_extends();\nfunction selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n  if (action.type === SelectActionTypes.buttonClick) {\n    var _state$selectedValues;\n    const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, \"start\", action.context);\n    return _extends({}, state, {\n      open: !open,\n      highlightedValue: !open ? itemToHighlight : null\n    });\n  }\n  if (action.type === SelectActionTypes.browserAutoFill) {\n    return handleItemSelection(action.item, state, action.context);\n  }\n  const newState = listReducer(state, action);\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (state.open) {\n        if (action.event.key === \"Escape\") {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n        if (selectionMode === \"single\" && (action.event.key === \"Enter\" || action.event.key === \" \")) {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n      } else {\n        if (action.event.key === \"Enter\" || action.event.key === \" \" || action.event.key === \"ArrowDown\") {\n          var _state$selectedValues2;\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, \"start\", action.context)\n          });\n        }\n        if (action.event.key === \"ArrowUp\") {\n          var _state$selectedValues3;\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, \"end\", action.context)\n          });\n        }\n      }\n      break;\n    case ListActionTypes.itemClick:\n      if (selectionMode === \"single\") {\n        return _extends({}, newState, {\n          open: false\n        });\n      }\n      break;\n    case ListActionTypes.blur:\n      return _extends({}, newState, {\n        open: false\n      });\n    default:\n      return newState;\n  }\n  return newState;\n}\n\n// node_modules/@mui/base/useSelect/useSelect.js\nvar visuallyHiddenStyle = {\n  clip: \"rect(1px, 1px, 1px, 1px)\",\n  clipPath: \"inset(50%)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  overflow: \"hidden\",\n  padding: 0,\n  position: \"absolute\",\n  left: \"50%\",\n  bottom: 0\n  // to display the native browser validation error at the bottom of the Select.\n};\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return \"\";\n    }\n    return JSON.stringify(selectedOption.map((o) => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return \"\";\n  }\n  if (typeof selectedOption.value === \"string\" || typeof selectedOption.value === \"number\") {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp\n  } = props;\n  const buttonRef = React48.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React48.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === void 0 && defaultValueProp === void 0) {\n    defaultValue = [];\n  } else if (defaultValueProp !== void 0) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React48.useMemo(() => {\n    if (valueProp !== void 0) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return void 0;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React48.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index2) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: React48.createRef(),\n        id: `${listboxId}_${index2}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React48.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React48.useCallback((valueToGet) => {\n    if (areOptionsEqual !== void 0) {\n      const similarValue = optionValues.find((optionValue) => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React48.useCallback((valueToCheck) => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React48.useCallback((valueToCheck) => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return \"\";\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React48.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React48.useCallback((itemValue) => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React48.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React48.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React48.useCallback((event, field, fieldValue) => {\n    if (field === \"open\") {\n      onOpenChange == null || onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== \"blur\") {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React48.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? \"multiple\" : \"single\",\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonMouseDown = (externalEventHandlers) => (event) => {\n    var _externalEventHandler;\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onMouseDown) == null || _externalEventHandler.call(externalEventHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect_default(() => {\n    if (highlightedOption != null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React48.useCallback((optionValue) => getOptionByValue(optionValue), [getOptionByValue]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      onMouseDown: createHandleButtonMouseDown(otherHandlers),\n      ref: mergedListRootRef,\n      role: \"combobox\",\n      \"aria-expanded\": open,\n      \"aria-controls\": listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const getListboxProps = (externalProps = {}) => {\n    return _extends({}, externalProps, {\n      id: listboxId,\n      role: \"listbox\",\n      \"aria-multiselectable\": multiple ? \"true\" : void 0,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault\n      // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n  React48.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React48.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n  const createHandleHiddenInputChange = (externalEventHandlers) => (event) => {\n    var _externalEventHandler2;\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n    if (event.target.value === \"\") {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== void 0) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      \"aria-hidden\": true,\n      required: required ? true : void 0,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\n// node_modules/@mui/base/useSelect/SelectProvider.js\nvar React49 = __toESM(require_react());\nvar import_jsx_runtime29 = __toESM(require_jsx_runtime());\nfunction SelectProvider(props) {\n  const {\n    value,\n    children\n  } = props;\n  const {\n    dispatch,\n    getItemIndex,\n    getItemState,\n    registerItem,\n    totalSubitemCount\n  } = value;\n  const listContextValue = React49.useMemo(() => ({\n    dispatch,\n    getItemState,\n    getItemIndex\n  }), [dispatch, getItemIndex, getItemState]);\n  const compoundComponentContextValue = React49.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  return (0, import_jsx_runtime29.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime29.jsx)(ListContext.Provider, {\n      value: listContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/Select/Select.js\ninit_composeClasses();\n\n// node_modules/@mui/base/Select/selectClasses.js\nfunction getSelectUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSelect\", slot);\n}\nvar selectClasses = generateUtilityClasses(\"MuiSelect\", [\"root\", \"button\", \"listbox\", \"popper\", \"active\", \"expanded\", \"disabled\", \"focusVisible\"]);\n\n// node_modules/@mui/base/Select/Select.js\nvar import_jsx_runtime30 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime31 = __toESM(require_jsx_runtime());\nvar _span;\nvar _excluded16 = [\"areOptionsEqual\", \"autoComplete\", \"autoFocus\", \"children\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"multiple\", \"name\", \"required\", \"onChange\", \"onListboxOpenChange\", \"getOptionAsString\", \"renderValue\", \"placeholder\", \"slotProps\", \"slots\", \"value\"];\nfunction defaultRenderValue(selectedOptions) {\n  var _selectedOptions$labe;\n  if (Array.isArray(selectedOptions)) {\n    return (0, import_jsx_runtime30.jsx)(React50.Fragment, {\n      children: selectedOptions.map((o) => o.label).join(\", \")\n    });\n  }\n  return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : null;\n}\nfunction useUtilityClasses14(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focusVisible && \"focusVisible\", active && \"active\", open && \"expanded\"],\n    listbox: [\"listbox\", disabled && \"disabled\"],\n    popper: [\"popper\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSelectUtilityClass));\n}\nvar Select = React50.forwardRef(function Select2(props, forwardedRef) {\n  var _slots$root, _slots$listbox, _slots$popper, _ref, _renderValue;\n  const {\n    areOptionsEqual,\n    autoComplete,\n    autoFocus,\n    children,\n    defaultValue,\n    defaultListboxOpen = false,\n    disabled: disabledProp,\n    getSerializedValue,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    multiple = false,\n    name,\n    required = false,\n    onChange,\n    onListboxOpenChange,\n    getOptionAsString = defaultOptionStringifier,\n    renderValue: renderValueProp,\n    placeholder,\n    slotProps = {},\n    slots = {},\n    value: valueProp\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;\n  const [buttonDefined, setButtonDefined] = React50.useState(false);\n  const buttonRef = React50.useRef(null);\n  const listboxRef = React50.useRef(null);\n  const Button3 = (_slots$root = slots.root) != null ? _slots$root : \"button\";\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : \"ul\";\n  const PopperComponent = (_slots$popper = slots.popper) != null ? _slots$popper : Popper;\n  const handleButtonRefChange = React50.useCallback((element) => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React50.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    contextValue,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getHiddenInputProps,\n    getOptionMetadata,\n    value,\n    open\n  } = useSelect({\n    name,\n    required,\n    getSerializedValue,\n    areOptionsEqual,\n    buttonRef: handleButtonRef,\n    defaultOpen: defaultListboxOpen,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple,\n    open: listboxOpenProp,\n    onChange,\n    onOpenChange: onListboxOpenChange,\n    getOptionAsString,\n    value: valueProp\n  });\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open,\n    multiple,\n    renderValue,\n    value\n  });\n  const classes = useUtilityClasses14(ownerState);\n  const buttonProps = useSlotProps({\n    elementType: Button3,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: PopperComponent,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      keepMounted: true,\n      open,\n      placement: \"bottom-start\",\n      role: void 0\n    },\n    ownerState,\n    className: classes.popper\n  });\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;\n  }\n  return (0, import_jsx_runtime31.jsxs)(React50.Fragment, {\n    children: [(0, import_jsx_runtime30.jsx)(Button3, _extends({}, buttonProps, {\n      children: (_ref = (_renderValue = renderValue(selectedOptionsMetadata)) != null ? _renderValue : placeholder) != null ? _ref : (\n        // fall back to a zero-width space to prevent layout shift\n        // from https://github.com/mui/material-ui/pull/24563\n        _span || (_span = (0, import_jsx_runtime30.jsx)(\"span\", {\n          className: \"notranslate\",\n          children: \"​\"\n        }))\n      )\n    })), buttonDefined && (0, import_jsx_runtime30.jsx)(PopperComponent, _extends({}, popperProps, {\n      children: (0, import_jsx_runtime30.jsx)(ListboxRoot, _extends({}, listboxProps, {\n        children: (0, import_jsx_runtime30.jsx)(SelectProvider, {\n          value: contextValue,\n          children\n        })\n      }))\n    })), (0, import_jsx_runtime30.jsx)(\"input\", _extends({}, getHiddenInputProps(), {\n      autoComplete\n    }))]\n  });\n});\ntrue ? Select.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A function used to determine if two options' values are equal.\n   * By default, reference equality is used.\n   *\n   * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).\n   * Therefore, it's recommented to use the default reference equality comparison whenever possible.\n   */\n  areOptionsEqual: import_prop_types20.default.func,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: import_prop_types20.default.string,\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: import_prop_types20.default.bool,\n  /**\n   * @ignore\n   */\n  children: import_prop_types20.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types20.default.string,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: import_prop_types20.default.bool,\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types20.default.any,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: import_prop_types20.default.bool,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  getOptionAsString: import_prop_types20.default.func,\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: import_prop_types20.default.func,\n  /**\n   * `id` attribute of the listbox element.\n   */\n  listboxId: import_prop_types20.default.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: import_prop_types20.default.bool,\n  /**\n   * If `true`, selecting multiple values is allowed.\n   * This affects the type of the `value`, `defaultValue`, and `onChange` props.\n   *\n   * @default false\n   */\n  multiple: import_prop_types20.default.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: import_prop_types20.default.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: import_prop_types20.default.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: import_prop_types20.default.func,\n  /**\n   * Text to show when there is no selected value.\n   */\n  placeholder: import_prop_types20.default.node,\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: import_prop_types20.default.func,\n  /**\n   * If `true`, the Select cannot be empty when submitting form.\n   * @default false\n   */\n  required: import_prop_types20.default.bool,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: import_prop_types20.default.shape({\n    listbox: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object]),\n    popper: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object]),\n    root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types20.default.shape({\n    listbox: import_prop_types20.default.elementType,\n    popper: import_prop_types20.default.elementType,\n    root: import_prop_types20.default.elementType\n  }),\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: import_prop_types20.default.any\n} : void 0;\n\n// node_modules/@mui/base/Slider/Slider.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React51 = __toESM(require_react());\nvar import_prop_types21 = __toESM(require_prop_types());\ninit_clsx();\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Slider/sliderClasses.js\nfunction getSliderUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSlider\", slot);\n}\nvar sliderClasses = generateUtilityClasses(\"MuiSlider\", [\"root\", \"active\", \"focusVisible\", \"disabled\", \"dragging\", \"marked\", \"vertical\", \"trackInverted\", \"trackFalse\", \"rail\", \"track\", \"mark\", \"markActive\", \"markLabel\", \"markLabelActive\", \"thumb\"]);\n\n// node_modules/@mui/base/Slider/Slider.js\nvar import_jsx_runtime32 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime33 = __toESM(require_jsx_runtime());\nvar _excluded17 = [\"aria-label\", \"aria-valuetext\", \"aria-labelledby\", \"className\", \"disableSwap\", \"disabled\", \"getAriaLabel\", \"getAriaValueText\", \"marks\", \"max\", \"min\", \"name\", \"onChange\", \"onChangeCommitted\", \"orientation\", \"scale\", \"step\", \"tabIndex\", \"track\", \"value\", \"valueLabelFormat\", \"isRtl\", \"defaultValue\", \"slotProps\", \"slots\"];\nfunction Identity2(x) {\n  return x;\n}\nvar useUtilityClasses15 = (ownerState) => {\n  const {\n    disabled,\n    dragging,\n    marked,\n    orientation,\n    track\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", dragging && \"dragging\", marked && \"marked\", orientation === \"vertical\" && \"vertical\", track === \"inverted\" && \"trackInverted\", track === false && \"trackFalse\"],\n    rail: [\"rail\"],\n    track: [\"track\"],\n    mark: [\"mark\"],\n    markActive: [\"markActive\"],\n    markLabel: [\"markLabel\"],\n    markLabelActive: [\"markLabelActive\"],\n    valueLabel: [\"valueLabel\"],\n    thumb: [\"thumb\", disabled && \"disabled\"],\n    active: [\"active\"],\n    disabled: [\"disabled\"],\n    focusVisible: [\"focusVisible\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSliderUtilityClass));\n};\nvar Slider = React51.forwardRef(function Slider2(props, forwardedRef) {\n  var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;\n  const {\n    \"aria-label\": ariaLabel,\n    \"aria-valuetext\": ariaValuetext,\n    \"aria-labelledby\": ariaLabelledby,\n    className,\n    disableSwap = false,\n    disabled = false,\n    getAriaLabel,\n    getAriaValueText,\n    marks: marksProp = false,\n    max: max3 = 100,\n    min: min3 = 0,\n    orientation = \"horizontal\",\n    scale = Identity2,\n    step = 1,\n    track = \"normal\",\n    valueLabelFormat = Identity2,\n    isRtl = false,\n    defaultValue,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);\n  const partialOwnerState = _extends({}, props, {\n    marks: marksProp,\n    disabled,\n    disableSwap,\n    isRtl,\n    defaultValue,\n    max: max3,\n    min: min3,\n    orientation,\n    scale,\n    step,\n    track,\n    valueLabelFormat\n  });\n  const {\n    axisProps: axisProps2,\n    getRootProps,\n    getHiddenInputProps,\n    getThumbProps,\n    active,\n    axis,\n    range,\n    focusedThumbIndex,\n    dragging,\n    marks,\n    values,\n    trackOffset,\n    trackLeap,\n    getThumbStyle\n  } = useSlider(_extends({}, partialOwnerState, {\n    rootRef: forwardedRef\n  }));\n  const ownerState = _extends({}, partialOwnerState, {\n    marked: marks.length > 0 && marks.some((mark) => mark.label),\n    dragging,\n    focusedThumbIndex,\n    activeThumbIndex: active\n  });\n  const classes = useUtilityClasses15(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"span\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : \"span\";\n  const railProps = useSlotProps({\n    elementType: Rail,\n    externalSlotProps: slotProps.rail,\n    ownerState,\n    className: classes.rail\n  });\n  const Track = (_slots$track = slots.track) != null ? _slots$track : \"span\";\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    additionalProps: {\n      style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))\n    },\n    ownerState,\n    className: classes.track\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : \"span\";\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    getSlotProps: getThumbProps,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    skipResolvingSlotProps: true\n  });\n  const ValueLabel = slots.valueLabel;\n  const valueLabelProps = useSlotProps({\n    elementType: ValueLabel,\n    externalSlotProps: slotProps.valueLabel,\n    ownerState\n  });\n  const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : \"span\";\n  const markProps = useSlotProps({\n    elementType: Mark,\n    externalSlotProps: slotProps.mark,\n    ownerState,\n    className: classes.mark\n  });\n  const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : \"span\";\n  const markLabelProps = useSlotProps({\n    elementType: MarkLabel,\n    externalSlotProps: slotProps.markLabel,\n    ownerState\n  });\n  const Input3 = slots.input || \"input\";\n  const inputProps = useSlotProps({\n    elementType: Input3,\n    getSlotProps: getHiddenInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState\n  });\n  return (0, import_jsx_runtime33.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime32.jsx)(Rail, _extends({}, railProps)), (0, import_jsx_runtime32.jsx)(Track, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min3 && mark.value <= max3).map((mark, index2) => {\n      const percent = valueToPercent(mark.value, min3, max3);\n      const style = axisProps2[axis].offset(percent);\n      let markActive;\n      if (track === false) {\n        markActive = values.indexOf(mark.value) !== -1;\n      } else {\n        markActive = track === \"normal\" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === \"inverted\" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);\n      }\n      return (0, import_jsx_runtime33.jsxs)(React51.Fragment, {\n        children: [(0, import_jsx_runtime32.jsx)(Mark, _extends({\n          \"data-index\": index2\n        }, markProps, !isHostComponent(Mark) && {\n          markActive\n        }, {\n          style: _extends({}, style, markProps.style),\n          className: clsx_default(markProps.className, markActive && classes.markActive)\n        })), mark.label != null ? (0, import_jsx_runtime32.jsx)(MarkLabel, _extends({\n          \"aria-hidden\": true,\n          \"data-index\": index2\n        }, markLabelProps, !isHostComponent(MarkLabel) && {\n          markLabelActive: markActive\n        }, {\n          style: _extends({}, style, markLabelProps.style),\n          className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),\n          children: mark.label\n        })) : null]\n      }, index2);\n    }), values.map((value, index2) => {\n      const percent = valueToPercent(value, min3, max3);\n      const style = axisProps2[axis].offset(percent);\n      const resolvedSlotProps = resolveComponentProps(slotProps.thumb, ownerState, {\n        index: index2,\n        focused: focusedThumbIndex === index2,\n        active: active === index2\n      });\n      return (0, import_jsx_runtime33.jsxs)(Thumb, _extends({\n        \"data-index\": index2\n      }, thumbProps, resolvedSlotProps, {\n        className: clsx_default(classes.thumb, thumbProps.className, resolvedSlotProps == null ? void 0 : resolvedSlotProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),\n        style: _extends({}, style, getThumbStyle(index2), thumbProps.style, resolvedSlotProps == null ? void 0 : resolvedSlotProps.style),\n        children: [(0, import_jsx_runtime32.jsx)(Input3, _extends({\n          \"data-index\": index2,\n          \"aria-label\": getAriaLabel ? getAriaLabel(index2) : ariaLabel,\n          \"aria-valuenow\": scale(value),\n          \"aria-labelledby\": ariaLabelledby,\n          \"aria-valuetext\": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,\n          value: values[index2]\n        }, inputProps)), ValueLabel ? (0, import_jsx_runtime32.jsx)(ValueLabel, _extends({}, !isHostComponent(ValueLabel) && {\n          valueLabelFormat,\n          index: index2,\n          disabled\n        }, valueLabelProps, {\n          children: typeof valueLabelFormat === \"function\" ? valueLabelFormat(scale(value), index2) : valueLabelFormat\n        })) : null]\n      }), index2);\n    })]\n  }));\n});\ntrue ? Slider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The label of the slider.\n   */\n  \"aria-label\": chainPropTypes(import_prop_types21.default.string, (props) => {\n    const range = Array.isArray(props.value || props.defaultValue);\n    if (range && props[\"aria-label\"] != null) {\n      return new Error(\"MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.\");\n    }\n    return null;\n  }),\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  \"aria-labelledby\": import_prop_types21.default.string,\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  \"aria-valuetext\": chainPropTypes(import_prop_types21.default.string, (props) => {\n    const range = Array.isArray(props.value || props.defaultValue);\n    if (range && props[\"aria-valuetext\"] != null) {\n      return new Error(\"MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.\");\n    }\n    return null;\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.number), import_prop_types21.default.number]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types21.default.bool,\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap: import_prop_types21.default.bool,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: import_prop_types21.default.func,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: import_prop_types21.default.func,\n  /**\n   * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).\n   * @default false\n   */\n  isRtl: import_prop_types21.default.bool,\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.shape({\n    label: import_prop_types21.default.node,\n    value: import_prop_types21.default.number.isRequired\n  })), import_prop_types21.default.bool]),\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: import_prop_types21.default.number,\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: import_prop_types21.default.number,\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: import_prop_types21.default.string,\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {Event} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange: import_prop_types21.default.func,\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: import_prop_types21.default.func,\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: import_prop_types21.default.oneOf([\"horizontal\", \"vertical\"]),\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @param {any} x\n   * @returns {any}\n   * @default function Identity(x) {\n   *   return x;\n   * }\n   */\n  scale: import_prop_types21.default.func,\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  slotProps: import_prop_types21.default.shape({\n    input: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    mark: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    markLabel: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    rail: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    thumb: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    track: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    valueLabel: import_prop_types21.default.oneOfType([import_prop_types21.default.any, import_prop_types21.default.func])\n  }),\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types21.default.shape({\n    input: import_prop_types21.default.elementType,\n    mark: import_prop_types21.default.elementType,\n    markLabel: import_prop_types21.default.elementType,\n    rail: import_prop_types21.default.elementType,\n    root: import_prop_types21.default.elementType,\n    thumb: import_prop_types21.default.elementType,\n    track: import_prop_types21.default.elementType,\n    valueLabel: import_prop_types21.default.elementType\n  }),\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: import_prop_types21.default.number,\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex: import_prop_types21.default.number,\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: import_prop_types21.default.oneOf([\"inverted\", \"normal\", false]),\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.number), import_prop_types21.default.number]),\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @param {any} x\n   * @returns {any}\n   * @default function Identity(x) {\n   *   return x;\n   * }\n   */\n  valueLabelFormat: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.string])\n} : void 0;\n\n// node_modules/@mui/base/Snackbar/Snackbar.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React52 = __toESM(require_react());\nvar import_prop_types22 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Snackbar/snackbarClasses.js\nfunction getSnackbarUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSnackbar\", slot);\n}\nvar snackbarClasses = generateUtilityClasses(\"MuiSnackbar\", [\"root\"]);\n\n// node_modules/@mui/base/Snackbar/Snackbar.js\nvar import_jsx_runtime34 = __toESM(require_jsx_runtime());\nvar _excluded18 = [\"autoHideDuration\", \"children\", \"disableWindowBlurListener\", \"exited\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"slotProps\", \"slots\"];\nvar useUtilityClasses16 = () => {\n  const slots = {\n    root: [\"root\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\nvar Snackbar = React52.forwardRef(function Snackbar2(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onClose,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);\n  const classes = useUtilityClasses16();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar(_extends({}, props, {\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  }));\n  const ownerState = props;\n  const Root = slots.root || \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  });\n  delete clickAwayListenerProps.ownerState;\n  if (!open && exited) {\n    return null;\n  }\n  return (0, import_jsx_runtime34.jsx)(ClickAwayListener, _extends({}, clickAwayListenerProps, {\n    children: (0, import_jsx_runtime34.jsx)(Root, _extends({}, rootProps, {\n      children\n    }))\n  }));\n});\ntrue ? Snackbar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: import_prop_types22.default.number,\n  /**\n   * @ignore\n   */\n  children: import_prop_types22.default.node,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: import_prop_types22.default.bool,\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: import_prop_types22.default.bool,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: import_prop_types22.default.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: import_prop_types22.default.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: import_prop_types22.default.number,\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: import_prop_types22.default.shape({\n    clickAwayListener: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.shape({\n      children: import_prop_types22.default.element.isRequired,\n      disableReactTree: import_prop_types22.default.bool,\n      mouseEvent: import_prop_types22.default.oneOf([\"onClick\", \"onMouseDown\", \"onMouseUp\", \"onPointerDown\", \"onPointerUp\", false]),\n      onClickAway: import_prop_types22.default.func,\n      touchEvent: import_prop_types22.default.oneOf([\"onTouchEnd\", \"onTouchStart\", false])\n    })]),\n    root: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types22.default.shape({\n    root: import_prop_types22.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Switch/Switch.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React54 = __toESM(require_react());\nvar import_prop_types23 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/useSwitch/useSwitch.js\ninit_extends();\nvar React53 = __toESM(require_react());\ninit_esm();\nfunction useSwitch(props) {\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    disabled,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly,\n    required\n  } = props;\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: \"Switch\",\n    state: \"checked\"\n  });\n  const createHandleInputChange = (otherProps) => (event) => {\n    var _otherProps$onChange;\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n    setCheckedState(event.target.checked);\n    onChange == null || onChange(event);\n    (_otherProps$onChange = otherProps.onChange) == null || _otherProps$onChange.call(otherProps, event);\n  };\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React53.useState(false);\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  React53.useEffect(() => {\n    isFocusVisibleRef.current = focusVisible;\n  }, [focusVisible, isFocusVisibleRef]);\n  const inputRef = React53.useRef(null);\n  const createHandleFocus = (otherProps) => (event) => {\n    var _otherProps$onFocus;\n    if (!inputRef.current) {\n      inputRef.current = event.currentTarget;\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n      onFocusVisible == null || onFocusVisible(event);\n    }\n    onFocus == null || onFocus(event);\n    (_otherProps$onFocus = otherProps.onFocus) == null || _otherProps$onFocus.call(otherProps, event);\n  };\n  const createHandleBlur = (otherProps) => (event) => {\n    var _otherProps$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    onBlur == null || onBlur(event);\n    (_otherProps$onBlur = otherProps.onBlur) == null || _otherProps$onBlur.call(otherProps, event);\n  };\n  const handleInputRef = useForkRef(focusVisibleRef, inputRef);\n  const getInputProps = (otherProps = {}) => _extends({\n    checked: checkedProp,\n    defaultChecked,\n    disabled,\n    readOnly,\n    ref: handleInputRef,\n    required,\n    type: \"checkbox\"\n  }, otherProps, {\n    onChange: createHandleInputChange(otherProps),\n    onFocus: createHandleFocus(otherProps),\n    onBlur: createHandleBlur(otherProps)\n  });\n  return {\n    checked,\n    disabled: Boolean(disabled),\n    focusVisible,\n    getInputProps,\n    inputRef: handleInputRef,\n    readOnly: Boolean(readOnly)\n  };\n}\n\n// node_modules/@mui/base/Switch/switchClasses.js\nfunction getSwitchUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSwitch\", slot);\n}\nvar switchClasses = generateUtilityClasses(\"MuiSwitch\", [\"root\", \"input\", \"track\", \"thumb\", \"checked\", \"disabled\", \"focusVisible\", \"readOnly\"]);\n\n// node_modules/@mui/base/Switch/Switch.js\nvar import_jsx_runtime35 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime36 = __toESM(require_jsx_runtime());\nvar _excluded19 = [\"checked\", \"defaultChecked\", \"disabled\", \"onBlur\", \"onChange\", \"onFocus\", \"onFocusVisible\", \"readOnly\", \"required\", \"slotProps\", \"slots\"];\nvar useUtilityClasses17 = (ownerState) => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = ownerState;\n  const slots = {\n    root: [\"root\", checked && \"checked\", disabled && \"disabled\", focusVisible && \"focusVisible\", readOnly && \"readOnly\"],\n    thumb: [\"thumb\"],\n    input: [\"input\"],\n    track: [\"track\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\nvar Switch = React54.forwardRef(function Switch2(props, forwardedRef) {\n  var _slots$root, _slots$thumb, _slots$input, _slots$track;\n  const {\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(props);\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  });\n  const classes = useUtilityClasses17(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"span\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : \"span\";\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    className: classes.thumb\n  });\n  const Input3 = (_slots$input = slots.input) != null ? _slots$input : \"input\";\n  const inputProps = useSlotProps({\n    elementType: Input3,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : \"span\";\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState,\n    className: classes.track\n  });\n  return (0, import_jsx_runtime36.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime35.jsx)(Track, _extends({}, trackProps)), (0, import_jsx_runtime35.jsx)(Thumb, _extends({}, thumbProps)), (0, import_jsx_runtime35.jsx)(Input3, _extends({}, inputProps))]\n  }));\n});\ntrue ? Switch.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: import_prop_types23.default.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types23.default.string,\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: import_prop_types23.default.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: import_prop_types23.default.bool,\n  /**\n   * @ignore\n   */\n  onBlur: import_prop_types23.default.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: import_prop_types23.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: import_prop_types23.default.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: import_prop_types23.default.func,\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: import_prop_types23.default.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: import_prop_types23.default.bool,\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  slotProps: import_prop_types23.default.shape({\n    input: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),\n    root: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),\n    thumb: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),\n    track: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types23.default.shape({\n    input: import_prop_types23.default.elementType,\n    root: import_prop_types23.default.elementType,\n    thumb: import_prop_types23.default.elementType,\n    track: import_prop_types23.default.oneOfType([import_prop_types23.default.elementType, import_prop_types23.default.oneOf([null])])\n  })\n} : void 0;\n\n// node_modules/@mui/base/TablePagination/TablePagination.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React56 = __toESM(require_react());\nvar import_prop_types24 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/TablePagination/TablePaginationActions.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React55 = __toESM(require_react());\nvar import_jsx_runtime37 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime38 = __toESM(require_jsx_runtime());\nvar _excluded20 = [\"count\", \"getItemAriaLabel\", \"onPageChange\", \"page\", \"rowsPerPage\", \"showFirstButton\", \"showLastButton\", \"direction\", \"ownerState\", \"slotProps\", \"slots\"];\nvar _span2;\nvar _span22;\nvar _span3;\nvar _span4;\nfunction LastPageIconDefault() {\n  return _span2 || (_span2 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"⇾|\"\n  }));\n}\nfunction FirstPageIconDefault() {\n  return _span22 || (_span22 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"|⇽\"\n  }));\n}\nfunction NextPageIconDefault() {\n  return _span3 || (_span3 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"⇾\"\n  }));\n}\nfunction BackPageIconDefault() {\n  return _span4 || (_span4 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"⇽\"\n  }));\n}\nfunction defaultGetAriaLabel(type) {\n  return `Go to ${type} page`;\n}\nvar TablePaginationActions = React55.forwardRef(function TablePaginationActions2(props, forwardedRef) {\n  var _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;\n  const {\n    count,\n    getItemAriaLabel = defaultGetAriaLabel,\n    onPageChange,\n    page,\n    rowsPerPage,\n    showFirstButton = false,\n    showLastButton = false,\n    direction,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);\n  const ownerState = props;\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState\n  });\n  const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : \"button\";\n  const firstButtonProps = useSlotProps({\n    elementType: FirstButton,\n    externalSlotProps: slotProps.firstButton,\n    additionalProps: {\n      onClick: handleFirstPageButtonClick,\n      disabled: page === 0,\n      \"aria-label\": getItemAriaLabel(\"first\", page),\n      title: getItemAriaLabel(\"first\", page)\n    },\n    ownerState\n  });\n  const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : \"button\";\n  const lastButtonProps = useSlotProps({\n    elementType: LastButton,\n    externalSlotProps: slotProps.lastButton,\n    additionalProps: {\n      onClick: handleLastPageButtonClick,\n      disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n      \"aria-label\": getItemAriaLabel(\"last\", page),\n      title: getItemAriaLabel(\"last\", page)\n    },\n    ownerState\n  });\n  const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : \"button\";\n  const nextButtonProps = useSlotProps({\n    elementType: NextButton,\n    externalSlotProps: slotProps.nextButton,\n    additionalProps: {\n      onClick: handleNextButtonClick,\n      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,\n      \"aria-label\": getItemAriaLabel(\"next\", page),\n      title: getItemAriaLabel(\"next\", page)\n    },\n    ownerState\n  });\n  const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : \"button\";\n  const backButtonProps = useSlotProps({\n    elementType: BackButton,\n    externalSlotProps: slotProps.backButton,\n    additionalProps: {\n      onClick: handleBackButtonClick,\n      disabled: page === 0,\n      \"aria-label\": getItemAriaLabel(\"previous\", page),\n      title: getItemAriaLabel(\"previous\", page)\n    },\n    ownerState\n  });\n  const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;\n  const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;\n  const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;\n  const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;\n  return (0, import_jsx_runtime38.jsxs)(Root, _extends({}, rootProps, {\n    children: [showFirstButton && (0, import_jsx_runtime37.jsx)(FirstButton, _extends({}, firstButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(LastPageIcon, {}) : (0, import_jsx_runtime37.jsx)(FirstPageIcon, {})\n    })), (0, import_jsx_runtime37.jsx)(BackButton, _extends({}, backButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(NextPageIcon, {}) : (0, import_jsx_runtime37.jsx)(BackPageIcon, {})\n    })), (0, import_jsx_runtime37.jsx)(NextButton, _extends({}, nextButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(BackPageIcon, {}) : (0, import_jsx_runtime37.jsx)(NextPageIcon, {})\n    })), showLastButton && (0, import_jsx_runtime37.jsx)(LastButton, _extends({}, lastButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(FirstPageIcon, {}) : (0, import_jsx_runtime37.jsx)(LastPageIcon, {})\n    }))]\n  }));\n});\n\n// node_modules/@mui/base/TablePagination/tablePaginationClasses.js\nfunction getTablePaginationUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTablePagination\", slot);\n}\nvar tablePaginationClasses = generateUtilityClasses(\"MuiTablePagination\", [\"root\", \"toolbar\", \"spacer\", \"selectLabel\", \"selectRoot\", \"select\", \"selectIcon\", \"input\", \"menuItem\", \"displayedRows\", \"actions\"]);\n\n// node_modules/@mui/base/TablePagination/TablePagination.js\nvar import_jsx_runtime39 = __toESM(require_jsx_runtime());\nvar import_react2 = __toESM(require_react());\nvar import_jsx_runtime40 = __toESM(require_jsx_runtime());\nvar _excluded21 = [\"colSpan\", \"count\", \"getItemAriaLabel\", \"labelDisplayedRows\", \"labelId\", \"labelRowsPerPage\", \"onPageChange\", \"onRowsPerPageChange\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"selectId\", \"slotProps\", \"slots\"];\nfunction defaultLabelDisplayedRows({\n  from,\n  to,\n  count\n}) {\n  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n}\nfunction defaultGetAriaLabel2(type) {\n  return `Go to ${type} page`;\n}\nvar useUtilityClasses18 = () => {\n  const slots = {\n    root: [\"root\"],\n    toolbar: [\"toolbar\"],\n    spacer: [\"spacer\"],\n    selectLabel: [\"selectLabel\"],\n    select: [\"select\"],\n    input: [\"input\"],\n    selectIcon: [\"selectIcon\"],\n    menuItem: [\"menuItem\"],\n    displayedRows: [\"displayedRows\"],\n    actions: [\"actions\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTablePaginationUtilityClass));\n};\nvar TablePagination = React56.forwardRef(function TablePagination2(props, forwardedRef) {\n  var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;\n  const {\n    colSpan: colSpanProp,\n    count,\n    getItemAriaLabel = defaultGetAriaLabel2,\n    labelDisplayedRows = defaultLabelDisplayedRows,\n    labelId: labelIdProp,\n    labelRowsPerPage = \"Rows per page:\",\n    onPageChange,\n    onRowsPerPageChange,\n    page,\n    rowsPerPage,\n    rowsPerPageOptions = [10, 25, 50, 100],\n    selectId: selectIdProp,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);\n  const ownerState = props;\n  const classes = useUtilityClasses18();\n  let colSpan;\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"td\";\n  if (Root === \"td\" || !isHostComponent(Root)) {\n    colSpan = colSpanProp || 1e3;\n  }\n  const getLabelDisplayedRowsTo = () => {\n    if (count === -1) {\n      return (page + 1) * rowsPerPage;\n    }\n    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);\n  };\n  const selectId = useId(selectIdProp);\n  const labelId = useId(labelIdProp);\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      colSpan,\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Select3 = (_slots$select = slots.select) != null ? _slots$select : \"select\";\n  const selectProps = useSlotProps({\n    elementType: Select3,\n    externalSlotProps: slotProps.select,\n    additionalProps: {\n      value: rowsPerPage,\n      id: selectId,\n      onChange: (event) => onRowsPerPageChange && onRowsPerPageChange(event),\n      \"aria-label\": rowsPerPage.toString(),\n      \"aria-labelledby\": [labelId, selectId].filter(Boolean).join(\" \") || void 0\n    },\n    ownerState,\n    className: classes.select\n  });\n  const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActions;\n  const actionsProps = useSlotProps({\n    elementType: Actions,\n    externalSlotProps: slotProps.actions,\n    additionalProps: {\n      page,\n      rowsPerPage,\n      count,\n      onPageChange,\n      getItemAriaLabel\n    },\n    ownerState,\n    className: classes.actions\n  });\n  const MenuItem4 = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : \"option\";\n  const menuItemProps = useSlotProps({\n    elementType: MenuItem4,\n    externalSlotProps: slotProps.menuItem,\n    additionalProps: {\n      value: void 0\n    },\n    ownerState,\n    className: classes.menuItem\n  });\n  const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : \"p\";\n  const selectLabelProps = useSlotProps({\n    elementType: SelectLabel,\n    externalSlotProps: slotProps.selectLabel,\n    additionalProps: {\n      id: labelId\n    },\n    ownerState,\n    className: classes.selectLabel\n  });\n  const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : \"p\";\n  const displayedRowsProps = useSlotProps({\n    elementType: DisplayedRows,\n    externalSlotProps: slotProps.displayedRows,\n    ownerState,\n    className: classes.displayedRows\n  });\n  const Toolbar = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : \"div\";\n  const toolbarProps = useSlotProps({\n    elementType: Toolbar,\n    externalSlotProps: slotProps.toolbar,\n    ownerState,\n    className: classes.toolbar\n  });\n  const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : \"div\";\n  const spacerProps = useSlotProps({\n    elementType: Spacer,\n    externalSlotProps: slotProps.spacer,\n    ownerState,\n    className: classes.spacer\n  });\n  return (0, import_jsx_runtime39.jsx)(Root, _extends({}, rootProps, {\n    children: (0, import_jsx_runtime40.jsxs)(Toolbar, _extends({}, toolbarProps, {\n      children: [(0, import_jsx_runtime39.jsx)(Spacer, _extends({}, spacerProps)), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime39.jsx)(SelectLabel, _extends({}, selectLabelProps, {\n        children: labelRowsPerPage\n      })), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime39.jsx)(Select3, _extends({}, selectProps, {\n        children: rowsPerPageOptions.map((rowsPerPageOption) => (0, import_react2.createElement)(MenuItem4, _extends({}, menuItemProps, {\n          key: typeof rowsPerPageOption !== \"number\" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,\n          value: typeof rowsPerPageOption !== \"number\" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption\n        }), typeof rowsPerPageOption !== \"number\" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))\n      })), (0, import_jsx_runtime39.jsx)(DisplayedRows, _extends({}, displayedRowsProps, {\n        children: labelDisplayedRows({\n          from: count === 0 ? 0 : page * rowsPerPage + 1,\n          to: getLabelDisplayedRowsTo(),\n          count: count === -1 ? -1 : count,\n          page\n        })\n      })), (0, import_jsx_runtime39.jsx)(Actions, _extends({}, actionsProps))]\n    }))\n  }));\n});\ntrue ? TablePagination.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  colSpan: import_prop_types24.default.number,\n  /**\n   * The total number of rows.\n   *\n   * To enable server side pagination for an unknown number of items, provide -1.\n   */\n  count: import_prop_types24.default.number.isRequired,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n   * @returns {string}\n   * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {\n   *   return `Go to ${type} page`;\n   * }\n   */\n  getItemAriaLabel: import_prop_types24.default.func,\n  /**\n   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n   * object.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {\n   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n   * }\n   */\n  labelDisplayedRows: import_prop_types24.default.func,\n  /**\n   * Id of the label element within the pagination.\n   */\n  labelId: import_prop_types24.default.string,\n  /**\n   * Customize the rows per page label.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Rows per page:'\n   */\n  labelRowsPerPage: import_prop_types24.default.node,\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: import_prop_types24.default.func.isRequired,\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n   */\n  onRowsPerPageChange: import_prop_types24.default.func,\n  /**\n   * The zero-based index of the current page.\n   */\n  page: chainPropTypes(integerPropType_default.isRequired, (props) => {\n    const {\n      count,\n      page,\n      rowsPerPage\n    } = props;\n    if (count === -1) {\n      return null;\n    }\n    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n    if (page < 0 || page > newLastPage) {\n      return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);\n    }\n    return null;\n  }),\n  /**\n   * The number of rows per page.\n   *\n   * Set -1 to display all the rows.\n   */\n  rowsPerPage: integerPropType_default.isRequired,\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   * Use -1 for the value with a custom label to show all the rows.\n   * @default [10, 25, 50, 100]\n   */\n  rowsPerPageOptions: import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.shape({\n    label: import_prop_types24.default.string.isRequired,\n    value: import_prop_types24.default.number.isRequired\n  })]).isRequired),\n  /**\n   * Id of the select element within the pagination.\n   */\n  selectId: import_prop_types24.default.string,\n  /**\n   * The props used for each slot inside the TablePagination.\n   * @default {}\n   */\n  slotProps: import_prop_types24.default.shape({\n    actions: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    displayedRows: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    menuItem: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    root: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    select: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    selectLabel: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    spacer: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    toolbar: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object])\n  }),\n  /**\n   * The components used for each slot inside the TablePagination.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types24.default.shape({\n    actions: import_prop_types24.default.elementType,\n    displayedRows: import_prop_types24.default.elementType,\n    menuItem: import_prop_types24.default.elementType,\n    root: import_prop_types24.default.elementType,\n    select: import_prop_types24.default.elementType,\n    selectLabel: import_prop_types24.default.elementType,\n    spacer: import_prop_types24.default.elementType,\n    toolbar: import_prop_types24.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/TabPanel/TabPanel.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React62 = __toESM(require_react());\nvar import_prop_types26 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/TabPanel/tabPanelClasses.js\nfunction getTabPanelUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTabPanel\", slot);\n}\nvar tabPanelClasses = generateUtilityClasses(\"MuiTabPanel\", [\"root\", \"hidden\"]);\n\n// node_modules/@mui/base/useTabPanel/useTabPanel.js\ninit_extends();\nvar React61 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/Tabs/Tabs.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React60 = __toESM(require_react());\nvar import_prop_types25 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Tabs/tabsClasses.js\nfunction getTabsUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTabs\", slot);\n}\nvar tabsClasses = generateUtilityClasses(\"MuiTabs\", [\"root\", \"horizontal\", \"vertical\"]);\n\n// node_modules/@mui/base/useTabs/useTabs.js\ninit_extends();\nvar React57 = __toESM(require_react());\ninit_esm();\nfunction useTabs(parameters) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    selectionFollowsFocus = false\n  } = parameters;\n  const [value, setValue] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: \"Tabs\",\n    state: \"value\"\n  });\n  const onSelected = React57.useCallback((event, newValue) => {\n    setValue(newValue);\n    onChange == null || onChange(event, newValue);\n  }, [onChange, setValue]);\n  const {\n    subitems: tabPanels,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const tabIdLookup = React57.useRef(() => void 0);\n  const getTabPanelId = React57.useCallback((tabValue) => {\n    var _tabPanels$get;\n    return (_tabPanels$get = tabPanels.get(tabValue)) == null ? void 0 : _tabPanels$get.id;\n  }, [tabPanels]);\n  const getTabId = React57.useCallback((tabPanelId) => {\n    return tabIdLookup.current(tabPanelId);\n  }, []);\n  const registerTabIdLookup = React57.useCallback((lookupFunction) => {\n    tabIdLookup.current = lookupFunction;\n  }, []);\n  return {\n    contextValue: _extends({\n      direction,\n      getTabId,\n      getTabPanelId,\n      onSelected,\n      orientation,\n      registerTabIdLookup,\n      selectionFollowsFocus,\n      value\n    }, compoundComponentContextValue)\n  };\n}\n\n// node_modules/@mui/base/useTabs/TabsProvider.js\nvar React59 = __toESM(require_react());\n\n// node_modules/@mui/base/Tabs/TabsContext.js\nvar React58 = __toESM(require_react());\nvar TabsContext = React58.createContext(null);\nif (true) {\n  TabsContext.displayName = \"TabsContext\";\n}\nfunction useTabsContext() {\n  const context = React58.useContext(TabsContext);\n  if (context == null) {\n    throw new Error(\"No TabsContext provided\");\n  }\n  return context;\n}\n\n// node_modules/@mui/base/useTabs/TabsProvider.js\nvar import_jsx_runtime41 = __toESM(require_jsx_runtime());\nfunction TabsProvider(props) {\n  const {\n    value: valueProp,\n    children\n  } = props;\n  const {\n    direction,\n    getItemIndex,\n    onSelected,\n    orientation,\n    registerItem,\n    registerTabIdLookup,\n    selectionFollowsFocus,\n    totalSubitemCount,\n    value,\n    getTabId,\n    getTabPanelId\n  } = valueProp;\n  const compoundComponentContextValue = React59.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  const tabsContextValue = React59.useMemo(() => ({\n    direction,\n    getTabId,\n    getTabPanelId,\n    onSelected,\n    orientation,\n    registerTabIdLookup,\n    selectionFollowsFocus,\n    value\n  }), [direction, getTabId, getTabPanelId, onSelected, orientation, registerTabIdLookup, selectionFollowsFocus, value]);\n  return (0, import_jsx_runtime41.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime41.jsx)(TabsContext.Provider, {\n      value: tabsContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/Tabs/Tabs.js\nvar import_jsx_runtime42 = __toESM(require_jsx_runtime());\nvar _excluded23 = [\"children\", \"value\", \"defaultValue\", \"orientation\", \"direction\", \"onChange\", \"selectionFollowsFocus\", \"slotProps\", \"slots\"];\nvar useUtilityClasses19 = (ownerState) => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: [\"root\", orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));\n};\nvar Tabs = React60.forwardRef(function Tabs2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);\n  const ownerState = _extends({}, props, {\n    orientation,\n    direction\n  });\n  const {\n    contextValue\n  } = useTabs(ownerState);\n  const classes = useUtilityClasses19(ownerState);\n  const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const tabsRootProps = useSlotProps({\n    elementType: TabsRoot,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime42.jsx)(TabsRoot, _extends({}, tabsRootProps, {\n    children: (0, import_jsx_runtime42.jsx)(TabsProvider, {\n      value: contextValue,\n      children\n    })\n  }));\n});\ntrue ? Tabs.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types25.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types25.default.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string]),\n  /**\n   * The direction of the text.\n   * @default 'ltr'\n   */\n  direction: import_prop_types25.default.oneOf([\"ltr\", \"rtl\"]),\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: import_prop_types25.default.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: import_prop_types25.default.oneOf([\"horizontal\", \"vertical\"]),\n  /**\n   * If `true` the selected tab changes on focus. Otherwise it only\n   * changes on activation.\n   */\n  selectionFollowsFocus: import_prop_types25.default.bool,\n  /**\n   * The props used for each slot inside the Tabs.\n   * @default {}\n   */\n  slotProps: import_prop_types25.default.shape({\n    root: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Tabs.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types25.default.shape({\n    root: import_prop_types25.default.elementType\n  }),\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this prop to `null`.\n   */\n  value: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string])\n} : void 0;\n\n// node_modules/@mui/base/useTabPanel/useTabPanel.js\nfunction tabPanelValueGenerator(otherTabPanelValues) {\n  return otherTabPanelValues.size;\n}\nfunction useTabPanel(parameters) {\n  const {\n    value: valueParam,\n    id: idParam,\n    rootRef: externalRef\n  } = parameters;\n  const context = useTabsContext();\n  if (context === null) {\n    throw new Error(\"No TabContext provided\");\n  }\n  const {\n    value: selectedTabValue,\n    getTabId\n  } = context;\n  const id = useId(idParam);\n  const ref = React61.useRef(null);\n  const handleRef = useForkRef(ref, externalRef);\n  const metadata = React61.useMemo(() => ({\n    id,\n    ref\n  }), [id]);\n  const {\n    id: value\n  } = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata);\n  const hidden = value !== selectedTabValue;\n  const correspondingTabId = value !== void 0 ? getTabId(value) : void 0;\n  const getRootProps = (externalProps = {}) => {\n    return _extends({\n      \"aria-labelledby\": correspondingTabId != null ? correspondingTabId : void 0,\n      hidden,\n      id: id != null ? id : void 0\n    }, externalProps, {\n      ref: handleRef\n    });\n  };\n  return {\n    hidden,\n    getRootProps,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/TabPanel/TabPanel.js\nvar import_jsx_runtime43 = __toESM(require_jsx_runtime());\nvar _excluded24 = [\"children\", \"value\", \"slotProps\", \"slots\"];\nvar useUtilityClasses20 = (ownerState) => {\n  const {\n    hidden\n  } = ownerState;\n  const slots = {\n    root: [\"root\", hidden && \"hidden\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));\n};\nvar TabPanel = React62.forwardRef(function TabPanel2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);\n  const {\n    hidden,\n    getRootProps\n  } = useTabPanel(props);\n  const ownerState = _extends({}, props, {\n    hidden\n  });\n  const classes = useUtilityClasses20(ownerState);\n  const TabPanelRoot = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const tabPanelRootProps = useSlotProps({\n    elementType: TabPanelRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: \"tabpanel\",\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime43.jsx)(TabPanelRoot, _extends({}, tabPanelRootProps, {\n    children: !hidden && children\n  }));\n});\ntrue ? TabPanel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types26.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types26.default.string,\n  /**\n   * The props used for each slot inside the TabPanel.\n   * @default {}\n   */\n  slotProps: import_prop_types26.default.shape({\n    root: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object])\n  }),\n  /**\n   * The components used for each slot inside the TabPanel.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types26.default.shape({\n    root: import_prop_types26.default.elementType\n  }),\n  /**\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n   * If not provided, it will fall back to the index of the panel.\n   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\n   */\n  value: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string])\n} : void 0;\n\n// node_modules/@mui/base/TabsList/TabsList.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React65 = __toESM(require_react());\nvar import_prop_types27 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/TabsList/tabsListClasses.js\nfunction getTabsListUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTabsList\", slot);\n}\nvar tabsListClasses = generateUtilityClasses(\"MuiTabsList\", [\"root\", \"horizontal\", \"vertical\"]);\n\n// node_modules/@mui/base/useTabsList/useTabsList.js\ninit_extends();\nvar React63 = __toESM(require_react());\n\n// node_modules/@mui/base/useTabsList/useTabsList.types.js\nvar TabsListActionTypes = {\n  valueChange: \"valueChange\"\n};\n\n// node_modules/@mui/base/useTabsList/tabsListReducer.js\ninit_extends();\nfunction tabsListReducer(state, action) {\n  if (action.type === TabsListActionTypes.valueChange) {\n    return _extends({}, state, {\n      highlightedValue: action.value\n    });\n  }\n  const newState = listReducer(state, action);\n  const {\n    context: {\n      selectionFollowsFocus\n    }\n  } = action;\n  if (action.type === ListActionTypes.itemsChange) {\n    if (newState.selectedValues.length > 0) {\n      return _extends({}, newState, {\n        highlightedValue: newState.selectedValues[0]\n      });\n    }\n    moveHighlight(null, \"reset\", action.context);\n  }\n  if (selectionFollowsFocus && newState.highlightedValue != null) {\n    return _extends({}, newState, {\n      selectedValues: [newState.highlightedValue]\n    });\n  }\n  return newState;\n}\n\n// node_modules/@mui/base/useTabsList/useTabsList.js\nfunction useTabsList(parameters) {\n  var _selectedValues$;\n  const {\n    rootRef: externalRef\n  } = parameters;\n  const {\n    direction = \"ltr\",\n    onSelected,\n    orientation = \"horizontal\",\n    value,\n    registerTabIdLookup,\n    selectionFollowsFocus\n  } = useTabsContext();\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const tabIdLookup = React63.useCallback((tabValue) => {\n    var _subitems$get;\n    return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;\n  }, [subitems]);\n  registerTabIdLookup(tabIdLookup);\n  const subitemKeys = React63.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getTabElement = React63.useCallback((tabValue) => {\n    var _subitems$get$ref$cur, _subitems$get2;\n    if (tabValue == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const isRtl = direction === \"rtl\";\n  let listOrientation;\n  if (orientation === \"vertical\") {\n    listOrientation = \"vertical\";\n  } else {\n    listOrientation = isRtl ? \"horizontal-rtl\" : \"horizontal-ltr\";\n  }\n  const handleChange = React63.useCallback((event, newValue) => {\n    var _newValue$;\n    onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);\n  }, [onSelected]);\n  const controlledProps = React63.useMemo(() => {\n    if (value === void 0) {\n      return {};\n    }\n    return value != null ? {\n      selectedValues: [value]\n    } : {\n      selectedValues: []\n    };\n  }, [value]);\n  const isItemDisabled = React63.useCallback((item) => {\n    var _subitems$get$disable, _subitems$get3;\n    return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;\n  }, [subitems]);\n  const {\n    contextValue: listContextValue,\n    dispatch,\n    getRootProps: getListboxRootProps,\n    state: {\n      highlightedValue,\n      selectedValues\n    },\n    rootRef: mergedRootRef\n  } = useList({\n    controlledProps,\n    disabledItemsFocusable: !selectionFollowsFocus,\n    focusManagement: \"DOM\",\n    getItemDomElement: getTabElement,\n    isItemDisabled,\n    items: subitemKeys,\n    rootRef: externalRef,\n    onChange: handleChange,\n    orientation: listOrientation,\n    reducerActionContext: React63.useMemo(() => ({\n      selectionFollowsFocus: selectionFollowsFocus || false\n    }), [selectionFollowsFocus]),\n    selectionMode: \"single\",\n    stateReducer: tabsListReducer\n  });\n  React63.useEffect(() => {\n    if (value === void 0) {\n      return;\n    }\n    if (value != null) {\n      dispatch({\n        type: TabsListActionTypes.valueChange,\n        value\n      });\n    }\n  }, [dispatch, value]);\n  const getRootProps = (externalProps = {}) => {\n    return _extends({}, externalProps, getListboxRootProps(externalProps), {\n      \"aria-orientation\": orientation === \"vertical\" ? \"vertical\" : void 0,\n      role: \"tablist\"\n    });\n  };\n  const contextValue = React63.useMemo(() => _extends({}, compoundComponentContextValue, listContextValue), [compoundComponentContextValue, listContextValue]);\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    highlightedValue,\n    isRtl,\n    orientation,\n    rootRef: mergedRootRef,\n    selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null\n  };\n}\n\n// node_modules/@mui/base/useTabsList/TabsListProvider.js\nvar React64 = __toESM(require_react());\nvar import_jsx_runtime44 = __toESM(require_jsx_runtime());\nfunction TabsListProvider(props) {\n  const {\n    value,\n    children\n  } = props;\n  const {\n    dispatch,\n    getItemIndex,\n    getItemState,\n    registerItem,\n    totalSubitemCount\n  } = value;\n  const listContextValue = React64.useMemo(() => ({\n    dispatch,\n    getItemState,\n    getItemIndex\n  }), [dispatch, getItemIndex, getItemState]);\n  const compoundComponentContextValue = React64.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  return (0, import_jsx_runtime44.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime44.jsx)(ListContext.Provider, {\n      value: listContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/TabsList/TabsList.js\nvar import_jsx_runtime45 = __toESM(require_jsx_runtime());\nvar _excluded25 = [\"children\", \"slotProps\", \"slots\"];\nvar useUtilityClasses21 = (ownerState) => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: [\"root\", orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsListUtilityClass));\n};\nvar TabsList = React65.forwardRef(function TabsList2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);\n  const {\n    isRtl,\n    orientation,\n    getRootProps,\n    contextValue\n  } = useTabsList({\n    rootRef: forwardedRef\n  });\n  const ownerState = _extends({}, props, {\n    isRtl,\n    orientation\n  });\n  const classes = useUtilityClasses21(ownerState);\n  const TabsListRoot = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const tabsListRootProps = useSlotProps({\n    elementType: TabsListRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime45.jsx)(TabsListProvider, {\n    value: contextValue,\n    children: (0, import_jsx_runtime45.jsx)(TabsListRoot, _extends({}, tabsListRootProps, {\n      children\n    }))\n  });\n});\ntrue ? TabsList.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types27.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types27.default.string,\n  /**\n   * The props used for each slot inside the TabsList.\n   * @default {}\n   */\n  slotProps: import_prop_types27.default.shape({\n    root: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object])\n  }),\n  /**\n   * The components used for each slot inside the TabsList.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types27.default.shape({\n    root: import_prop_types27.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Tab/Tab.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React67 = __toESM(require_react());\nvar import_prop_types28 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Tab/tabClasses.js\nfunction getTabUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTab\", slot);\n}\nvar tabClasses = generateUtilityClasses(\"MuiTab\", [\"root\", \"selected\", \"disabled\"]);\n\n// node_modules/@mui/base/useTab/useTab.js\ninit_extends();\nvar React66 = __toESM(require_react());\ninit_esm();\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React66.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React66.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index: index2,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: \"button\"\n  });\n  const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  const tabPanelId = value !== void 0 ? getTabPanelId(value) : void 0;\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: \"tab\",\n      \"aria-controls\": tabPanelId,\n      \"aria-selected\": selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index: index2,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\n\n// node_modules/@mui/base/Tab/Tab.js\nvar import_jsx_runtime46 = __toESM(require_jsx_runtime());\nvar _excluded26 = [\"action\", \"children\", \"disabled\", \"onChange\", \"onClick\", \"onFocus\", \"slotProps\", \"slots\", \"value\"];\nvar useUtilityClasses22 = (ownerState) => {\n  const {\n    selected,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: [\"root\", selected && \"selected\", disabled && \"disabled\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\nvar Tab = React67.forwardRef(function Tab2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    disabled = false,\n    slotProps = {},\n    slots = {},\n    value\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);\n  const tabRef = React67.useRef();\n  const handleRef = useForkRef(tabRef, forwardedRef);\n  const {\n    active,\n    highlighted,\n    selected,\n    getRootProps\n  } = useTab(_extends({}, props, {\n    rootRef: handleRef,\n    value\n  }));\n  const ownerState = _extends({}, props, {\n    active,\n    disabled,\n    highlighted,\n    selected\n  });\n  const classes = useUtilityClasses22(ownerState);\n  const TabRoot = (_slots$root = slots.root) != null ? _slots$root : \"button\";\n  const tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime46.jsx)(TabRoot, _extends({}, tabRootProps, {\n    children\n  }));\n});\ntrue ? Tab.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.shape({\n    current: import_prop_types28.default.shape({\n      focusVisible: import_prop_types28.default.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types28.default.node,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types28.default.bool,\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: import_prop_types28.default.func,\n  /**\n   * The props used for each slot inside the Tab.\n   * @default {}\n   */\n  slotProps: import_prop_types28.default.shape({\n    root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Tab.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types28.default.shape({\n    root: import_prop_types28.default.elementType\n  }),\n  /**\n   * You can provide your own value. Otherwise, it falls back to the child position index.\n   */\n  value: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string])\n} : void 0;\n\nexport {\n  isHostComponent,\n  appendOwnerState,\n  useSlotProps,\n  useBadge,\n  ClickAwayListener,\n  FocusTrap,\n  Portal,\n  Popper,\n  ModalManager,\n  useModal,\n  NoSsr,\n  valueToPercent,\n  useSlider,\n  useSnackbar,\n  TextareaAutosize,\n  createFilterOptions,\n  useAutocomplete\n};\n/*! Bundled license information:\n\n@mui/base/index.js:\n  (**\n   * @mui/base v5.0.0-beta.24\n   *\n   * @license MIT\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n//# sourceMappingURL=chunk-QK5I2FHH.js.map\n",
      "start": 1701867792155,
      "end": 1701867792289,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:react-swc",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1701867792289,
      "end": 1701867792289,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1701867792289,
      "end": 1701867792290,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1701867792290,
      "end": 1701867792290,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1701867792290,
      "end": 1701867792290,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1701867792290,
      "end": 1701867792290,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import {\n  require_react_dom\n} from \"/node_modules/.vite/deps/chunk-GSZ7ISAW.js?v=c929456e\";\nimport {\n  init_composeClasses\n} from \"/node_modules/.vite/deps/chunk-5CYIWUDX.js?v=c929456e\";\nimport {\n  HTMLElementType,\n  _objectWithoutPropertiesLoose,\n  chainPropTypes,\n  clsx_default,\n  composeClasses,\n  createChainedFunction,\n  debounce,\n  elementAcceptingRef_default,\n  exactProp,\n  generateUtilityClass,\n  generateUtilityClasses,\n  getScrollbarSize,\n  init_clsx,\n  init_esm,\n  init_objectWithoutPropertiesLoose,\n  init_useControlled,\n  integerPropType_default,\n  ownerDocument,\n  ownerWindow,\n  refType_default,\n  require_prop_types,\n  setRef,\n  useControlled,\n  useEnhancedEffect_default,\n  useEventCallback_default,\n  useForkRef,\n  useId,\n  useIsFocusVisible,\n  usePreviousProps_default,\n  visuallyHidden_default\n} from \"/node_modules/.vite/deps/chunk-CY3GP2WZ.js?v=c929456e\";\nimport {\n  require_jsx_runtime\n} from \"/node_modules/.vite/deps/chunk-U73TBONF.js?v=c929456e\";\nimport {\n  _extends,\n  init_extends\n} from \"/node_modules/.vite/deps/chunk-HMTWVGVS.js?v=c929456e\";\nimport {\n  require_react\n} from \"/node_modules/.vite/deps/chunk-ZGRSIX2Q.js?v=c929456e\";\nimport {\n  __toESM\n} from \"/node_modules/.vite/deps/chunk-ROME4SDB.js?v=c929456e\";\n\n// node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js\nvar React = __toESM(require_react());\nvar import_prop_types = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime = __toESM(require_jsx_runtime());\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = \"onClick\",\n    onClickAway,\n    touchEvent = \"onTouchEnd\"\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef(\n    // @ts-expect-error TODO upstream fix\n    children.ref,\n    nodeRef\n  );\n  const handleClickAway = useEventCallback_default((event) => {\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current);\n    if (!activatedRef.current || !nodeRef.current || \"clientX\" in event && clickedRootScrollbar(event, doc)) {\n      return;\n    }\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n    let insideDOM;\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(\n        // @ts-expect-error returns `false` as intended when not dispatched from a Node\n        event.target\n      ) || nodeRef.current.contains(\n        // @ts-expect-error returns `false` as intended when not dispatched from a Node\n        event.target\n      );\n    }\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  });\n  const createHandleSynthetic = (handlerName) => (event) => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const childrenProps = {\n    ref: handleRef\n  };\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener(\"touchmove\", handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener(\"touchmove\", handleTouchMove);\n      };\n    }\n    return void 0;\n  }, [handleClickAway, touchEvent]);\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n    return void 0;\n  }, [handleClickAway, mouseEvent]);\n  return (0, import_jsx_runtime.jsx)(React.Fragment, {\n    children: React.cloneElement(children, childrenProps)\n  });\n}\ntrue ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef_default.isRequired,\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: import_prop_types.default.bool,\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: import_prop_types.default.oneOf([\"onClick\", \"onMouseDown\", \"onMouseUp\", \"onPointerDown\", \"onPointerUp\", false]),\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: import_prop_types.default.func.isRequired,\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: import_prop_types.default.oneOf([\"onTouchEnd\", \"onTouchStart\", false])\n} : void 0;\nif (true) {\n  ClickAwayListener[\"propTypes\"] = exactProp(ClickAwayListener.propTypes);\n}\n\n// node_modules/@mui/base/FocusTrap/FocusTrap.js\nvar React2 = __toESM(require_react());\nvar import_prop_types2 = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime2 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime3 = __toESM(require_jsx_runtime());\nvar candidatesSelector = [\"input\", \"select\", \"textarea\", \"a[href]\", \"button\", \"[tabindex]\", \"audio[controls]\", \"video[controls]\", '[contenteditable]:not([contenteditable=\"false\"])'].join(\",\");\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute(\"tabindex\") || \"\", 10);\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  }\n  if (node.contentEditable === \"true\" || (node.nodeName === \"AUDIO\" || node.nodeName === \"VIDEO\" || node.nodeName === \"DETAILS\") && node.getAttribute(\"tabindex\") === null) {\n    return 0;\n  }\n  return node.tabIndex;\n}\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== \"INPUT\" || node.type !== \"radio\") {\n    return false;\n  }\n  if (!node.name) {\n    return false;\n  }\n  const getRadio = (selector) => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n  return roving !== node;\n}\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === \"INPUT\" && node.type === \"hidden\" || isNonTabbableRadio(node)) {\n    return false;\n  }\n  return true;\n}\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);\n}\nfunction defaultIsEnabled() {\n  return true;\n}\nfunction FocusTrap(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = React2.useRef(false);\n  const sentinelStart = React2.useRef(null);\n  const sentinelEnd = React2.useRef(null);\n  const nodeToRestore = React2.useRef(null);\n  const reactFocusEventTarget = React2.useRef(null);\n  const activated = React2.useRef(false);\n  const rootRef = React2.useRef(null);\n  const handleRef = useForkRef(children.ref, rootRef);\n  const lastKeydown = React2.useRef(null);\n  React2.useEffect(() => {\n    if (!open || !rootRef.current) {\n      return;\n    }\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React2.useEffect(() => {\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = ownerDocument(rootRef.current);\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute(\"tabIndex\")) {\n        if (true) {\n          console.error([\"MUI: The modal content node does not accept focus.\", 'For the benefit of assistive technologies, the tabIndex of the node is being set to \"-1\".'].join(\"\\n\"));\n        }\n        rootRef.current.setAttribute(\"tabIndex\", \"-1\");\n      }\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n    return () => {\n      if (!disableRestoreFocus) {\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n        nodeToRestore.current = null;\n      }\n    };\n  }, [open]);\n  React2.useEffect(() => {\n    if (!open || !rootRef.current) {\n      return;\n    }\n    const doc = ownerDocument(rootRef.current);\n    const loopFocus = (nativeEvent) => {\n      lastKeydown.current = nativeEvent;\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== \"Tab\") {\n        return;\n      }\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        ignoreNextEnforceFocus.current = true;\n        if (sentinelEnd.current) {\n          sentinelEnd.current.focus();\n        }\n      }\n    };\n    const contain = () => {\n      const rootElement = rootRef.current;\n      if (rootElement === null) {\n        return;\n      }\n      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n      if (rootElement.contains(doc.activeElement)) {\n        return;\n      }\n      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {\n        return;\n      }\n      if (doc.activeElement !== reactFocusEventTarget.current) {\n        reactFocusEventTarget.current = null;\n      } else if (reactFocusEventTarget.current !== null) {\n        return;\n      }\n      if (!activated.current) {\n        return;\n      }\n      let tabbable = [];\n      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n        tabbable = getTabbable(rootRef.current);\n      }\n      if (tabbable.length > 0) {\n        var _lastKeydown$current, _lastKeydown$current2;\n        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === \"Tab\");\n        const focusNext = tabbable[0];\n        const focusPrevious = tabbable[tabbable.length - 1];\n        if (typeof focusNext !== \"string\" && typeof focusPrevious !== \"string\") {\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        }\n      } else {\n        rootElement.focus();\n      }\n    };\n    doc.addEventListener(\"focusin\", contain);\n    doc.addEventListener(\"keydown\", loopFocus, true);\n    const interval = setInterval(() => {\n      if (doc.activeElement && doc.activeElement.tagName === \"BODY\") {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener(\"focusin\", contain);\n      doc.removeEventListener(\"keydown\", loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n  const onFocus = (event) => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const handleFocusSentinel = (event) => {\n    if (nodeToRestore.current === null) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n    activated.current = true;\n  };\n  return (0, import_jsx_runtime3.jsxs)(React2.Fragment, {\n    children: [(0, import_jsx_runtime2.jsx)(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-testid\": \"sentinelStart\"\n    }), React2.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), (0, import_jsx_runtime2.jsx)(\"div\", {\n      tabIndex: open ? 0 : -1,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-testid\": \"sentinelEnd\"\n    })]\n  });\n}\ntrue ? FocusTrap.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef_default,\n  /**\n   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: import_prop_types2.default.bool,\n  /**\n   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.\n   *\n   * Generally this should never be set to `true` as it makes the focus trap less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: import_prop_types2.default.bool,\n  /**\n   * If `true`, the focus trap will not restore focus to previously focused element once\n   * focus trap is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: import_prop_types2.default.bool,\n  /**\n   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n   * For instance, you can provide the \"tabbable\" npm dependency.\n   * @param {HTMLElement} root\n   */\n  getTabbable: import_prop_types2.default.func,\n  /**\n   * This prop extends the `open` prop.\n   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n   * This prop should be memoized.\n   * It can be used to support multiple focus trap mounted at the same time.\n   * @default function defaultIsEnabled(): boolean {\n   *   return true;\n   * }\n   */\n  isEnabled: import_prop_types2.default.func,\n  /**\n   * If `true`, focus is locked.\n   */\n  open: import_prop_types2.default.bool.isRequired\n} : void 0;\nif (true) {\n  FocusTrap[\"propTypes\"] = exactProp(FocusTrap.propTypes);\n}\n\n// node_modules/@mui/base/Portal/Portal.js\nvar React3 = __toESM(require_react());\nvar ReactDOM = __toESM(require_react_dom());\nvar import_prop_types3 = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime4 = __toESM(require_jsx_runtime());\nfunction getContainer(container) {\n  return typeof container === \"function\" ? container() : container;\n}\nvar Portal = React3.forwardRef(function Portal2(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React3.useState(null);\n  const handleRef = useForkRef(React3.isValidElement(children) ? children.ref : null, forwardedRef);\n  useEnhancedEffect_default(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect_default(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n    return void 0;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if (React3.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return React3.cloneElement(children, newProps);\n    }\n    return (0, import_jsx_runtime4.jsx)(React3.Fragment, {\n      children\n    });\n  }\n  return (0, import_jsx_runtime4.jsx)(React3.Fragment, {\n    children: mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\ntrue ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The children to render into the `container`.\n   */\n  children: import_prop_types3.default.node,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: import_prop_types3.default.oneOfType([HTMLElementType, import_prop_types3.default.func]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: import_prop_types3.default.bool\n} : void 0;\nif (true) {\n  Portal[\"propTypes\"] = exactProp(Portal.propTypes);\n}\n\n// node_modules/@mui/base/unstable_useModal/ModalManager.js\ninit_esm();\nfunction isOverflowing(container) {\n  const doc = ownerDocument(container);\n  if (doc.body === container) {\n    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;\n  }\n  return container.scrollHeight > container.clientHeight;\n}\nfunction ariaHidden(element, show) {\n  if (show) {\n    element.setAttribute(\"aria-hidden\", \"true\");\n  } else {\n    element.removeAttribute(\"aria-hidden\");\n  }\n}\nfunction getPaddingRight(element) {\n  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;\n}\nfunction isAriaHiddenForbiddenOnElement(element) {\n  const forbiddenTagNames = [\"TEMPLATE\", \"SCRIPT\", \"STYLE\", \"LINK\", \"MAP\", \"META\", \"NOSCRIPT\", \"PICTURE\", \"COL\", \"COLGROUP\", \"PARAM\", \"SLOT\", \"SOURCE\", \"TRACK\"];\n  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;\n  const isInputHidden = element.tagName === \"INPUT\" && element.getAttribute(\"type\") === \"hidden\";\n  return isForbiddenTagName || isInputHidden;\n}\nfunction ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {\n  const blacklist = [mountElement, currentElement, ...elementsToExclude];\n  [].forEach.call(container.children, (element) => {\n    const isNotExcludedElement = blacklist.indexOf(element) === -1;\n    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);\n    if (isNotExcludedElement && isNotForbiddenElement) {\n      ariaHidden(element, show);\n    }\n  });\n}\nfunction findIndexOf(items, callback) {\n  let idx = -1;\n  items.some((item, index2) => {\n    if (callback(item)) {\n      idx = index2;\n      return true;\n    }\n    return false;\n  });\n  return idx;\n}\nfunction handleContainer(containerInfo, props) {\n  const restoreStyle = [];\n  const container = containerInfo.container;\n  if (!props.disableScrollLock) {\n    if (isOverflowing(container)) {\n      const scrollbarSize = getScrollbarSize(ownerDocument(container));\n      restoreStyle.push({\n        value: container.style.paddingRight,\n        property: \"padding-right\",\n        el: container\n      });\n      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;\n      const fixedElements = ownerDocument(container).querySelectorAll(\".mui-fixed\");\n      [].forEach.call(fixedElements, (element) => {\n        restoreStyle.push({\n          value: element.style.paddingRight,\n          property: \"padding-right\",\n          el: element\n        });\n        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;\n      });\n    }\n    let scrollContainer;\n    if (container.parentNode instanceof DocumentFragment) {\n      scrollContainer = ownerDocument(container).body;\n    } else {\n      const parent = container.parentElement;\n      const containerWindow = ownerWindow(container);\n      scrollContainer = (parent == null ? void 0 : parent.nodeName) === \"HTML\" && containerWindow.getComputedStyle(parent).overflowY === \"scroll\" ? parent : container;\n    }\n    restoreStyle.push({\n      value: scrollContainer.style.overflow,\n      property: \"overflow\",\n      el: scrollContainer\n    }, {\n      value: scrollContainer.style.overflowX,\n      property: \"overflow-x\",\n      el: scrollContainer\n    }, {\n      value: scrollContainer.style.overflowY,\n      property: \"overflow-y\",\n      el: scrollContainer\n    });\n    scrollContainer.style.overflow = \"hidden\";\n  }\n  const restore = () => {\n    restoreStyle.forEach(({\n      value,\n      el,\n      property\n    }) => {\n      if (value) {\n        el.style.setProperty(property, value);\n      } else {\n        el.style.removeProperty(property);\n      }\n    });\n  };\n  return restore;\n}\nfunction getHiddenSiblings(container) {\n  const hiddenSiblings = [];\n  [].forEach.call(container.children, (element) => {\n    if (element.getAttribute(\"aria-hidden\") === \"true\") {\n      hiddenSiblings.push(element);\n    }\n  });\n  return hiddenSiblings;\n}\nvar ModalManager = class {\n  constructor() {\n    this.containers = void 0;\n    this.modals = void 0;\n    this.modals = [];\n    this.containers = [];\n  }\n  add(modal, container) {\n    let modalIndex = this.modals.indexOf(modal);\n    if (modalIndex !== -1) {\n      return modalIndex;\n    }\n    modalIndex = this.modals.length;\n    this.modals.push(modal);\n    if (modal.modalRef) {\n      ariaHidden(modal.modalRef, false);\n    }\n    const hiddenSiblings = getHiddenSiblings(container);\n    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);\n    const containerIndex = findIndexOf(this.containers, (item) => item.container === container);\n    if (containerIndex !== -1) {\n      this.containers[containerIndex].modals.push(modal);\n      return modalIndex;\n    }\n    this.containers.push({\n      modals: [modal],\n      container,\n      restore: null,\n      hiddenSiblings\n    });\n    return modalIndex;\n  }\n  mount(modal, props) {\n    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);\n    const containerInfo = this.containers[containerIndex];\n    if (!containerInfo.restore) {\n      containerInfo.restore = handleContainer(containerInfo, props);\n    }\n  }\n  remove(modal, ariaHiddenState = true) {\n    const modalIndex = this.modals.indexOf(modal);\n    if (modalIndex === -1) {\n      return modalIndex;\n    }\n    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);\n    const containerInfo = this.containers[containerIndex];\n    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);\n    this.modals.splice(modalIndex, 1);\n    if (containerInfo.modals.length === 0) {\n      if (containerInfo.restore) {\n        containerInfo.restore();\n      }\n      if (modal.modalRef) {\n        ariaHidden(modal.modalRef, ariaHiddenState);\n      }\n      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);\n      this.containers.splice(containerIndex, 1);\n    } else {\n      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];\n      if (nextTop.modalRef) {\n        ariaHidden(nextTop.modalRef, false);\n      }\n    }\n    return modalIndex;\n  }\n  isTopModal(modal) {\n    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;\n  }\n};\n\n// node_modules/@mui/base/NoSsr/NoSsr.js\nvar React4 = __toESM(require_react());\nvar import_prop_types4 = __toESM(require_prop_types());\ninit_esm();\nvar import_jsx_runtime5 = __toESM(require_jsx_runtime());\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React4.useState(false);\n  useEnhancedEffect_default(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React4.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  return (0, import_jsx_runtime5.jsx)(React4.Fragment, {\n    children: mountedState ? children : fallback\n  });\n}\ntrue ? NoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * You can wrap a node.\n   */\n  children: import_prop_types4.default.node,\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: import_prop_types4.default.bool,\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: import_prop_types4.default.node\n} : void 0;\nif (true) {\n  NoSsr[\"propTypes\"] = exactProp(NoSsr.propTypes);\n}\n\n// node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React5 = __toESM(require_react());\nvar import_prop_types5 = __toESM(require_prop_types());\nvar ReactDOM2 = __toESM(require_react_dom());\ninit_esm();\nvar import_jsx_runtime6 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime7 = __toESM(require_jsx_runtime());\nvar _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nvar styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: \"hidden\",\n    // Remove from the content flow\n    position: \"absolute\",\n    // Ignore the scrollbar width\n    overflow: \"hidden\",\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: \"translateZ(0)\"\n  }\n};\nfunction isEmpty(obj) {\n  return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\nvar TextareaAutosize = React5.forwardRef(function TextareaAutosize2(props, forwardedRef) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React5.useRef(value != null);\n  const inputRef = React5.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React5.useRef(null);\n  const renders = React5.useRef(0);\n  const [state, setState] = React5.useState({\n    outerHeightStyle: 0\n  });\n  const getUpdatedState = React5.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n    if (computedStyle.width === \"0px\") {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || \"x\";\n    if (inputShallow.value.slice(-1) === \"\\n\") {\n      inputShallow.value += \" \";\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n    const innerHeight = inputShallow.scrollHeight;\n    inputShallow.value = \"x\";\n    const singleRowHeight = inputShallow.scrollHeight;\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n    const outerHeightStyle = outerHeight + (boxSizing === \"border-box\" ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (true) {\n      if (renders.current === 20) {\n        console.error([\"MUI: Too many re-renders. The layout is unstable.\", \"TextareaAutosize limits the number of renders to prevent an infinite loop.\"].join(\"\\n\"));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React5.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState((prevState) => updateState(prevState, newState));\n  }, [getUpdatedState]);\n  useEnhancedEffect_default(() => {\n    const syncHeightWithFlushSync = () => {\n      const newState = getUpdatedState();\n      if (isEmpty(newState)) {\n        return;\n      }\n      ReactDOM2.flushSync(() => {\n        setState((prevState) => updateState(prevState, newState));\n      });\n    };\n    const handleResize = () => {\n      renders.current = 0;\n      syncHeightWithFlushSync();\n    };\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener(\"resize\", debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== \"undefined\") {\n      resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener(\"resize\", debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [getUpdatedState]);\n  useEnhancedEffect_default(() => {\n    syncHeight();\n  });\n  React5.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = (event) => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return (0, import_jsx_runtime7.jsxs)(React5.Fragment, {\n    children: [(0, import_jsx_runtime6.jsx)(\"textarea\", _extends({\n      value,\n      onChange: handleChange,\n      ref: handleRef,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? \"hidden\" : void 0\n      }, style)\n    }, other)), (0, import_jsx_runtime6.jsx)(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\ntrue ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: import_prop_types5.default.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),\n  /**\n   * @ignore\n   */\n  onChange: import_prop_types5.default.func,\n  /**\n   * @ignore\n   */\n  placeholder: import_prop_types5.default.string,\n  /**\n   * @ignore\n   */\n  style: import_prop_types5.default.object,\n  /**\n   * @ignore\n   */\n  value: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.string), import_prop_types5.default.number, import_prop_types5.default.string])\n} : void 0;\n\n// node_modules/@mui/base/useAutocomplete/useAutocomplete.js\ninit_extends();\nvar React6 = __toESM(require_react());\ninit_esm();\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== \"undefined\" ? string.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") : string;\n}\nfunction createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = \"any\",\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter((option) => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === \"start\" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === \"number\" ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nvar defaultFilterOptions = createFilterOptions();\nvar pageSize = 5;\nvar defaultIsActiveElementInListbox = (listboxRef) => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = \"Mui\",\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = \"useAutocomplete\",\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = (option) => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value2) => option === value2,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = (option) => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== \"string\") {\n      if (true) {\n        const erroneousReturn = optionLabel === void 0 ? \"undefined\" : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React6.useRef(false);\n  const firstFocus = React6.useRef(true);\n  const inputRef = React6.useRef(null);\n  const listboxRef = React6.useRef(null);\n  const [anchorEl, setAnchorEl] = React6.useState(null);\n  const [focusedTag, setFocusedTag] = React6.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React6.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: \"\",\n    name: componentName,\n    state: \"inputValue\"\n  });\n  const [focused, setFocused] = React6.useState(false);\n  const resetInputValue = React6.useCallback((event, newValue) => {\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = \"\";\n    } else if (newValue == null) {\n      newInputValue = \"\";\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === \"string\" ? optionLabel : \"\";\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, \"reset\");\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: \"open\"\n  });\n  const [inputPristine, setInputPristine] = React6.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(\n    options.filter((option) => {\n      if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {\n        return false;\n      }\n      return true;\n    }),\n    // we use the empty string to manipulate `filterOptions` to not filter any options\n    // i.e. the filter predicate always returns true\n    {\n      inputValue: inputValueIsSelectedValue && inputPristine ? \"\" : inputValue,\n      getOptionLabel\n    }\n  ) : [];\n  const previousProps = usePreviousProps_default({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React6.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (true) {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, \"You can use the `isOptionEqualToValue` prop to customize the equality test.\"].join(\"\\n\"));\n      }\n    }\n  }\n  const focusTag = useEventCallback_default((tagToFocus) => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n  React6.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index2, direction) {\n    if (!listboxRef.current || index2 < 0 || index2 >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index2;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute(\"aria-disabled\") === \"true\";\n      if (option && option.hasAttribute(\"tabindex\") && !nextFocusDisabled) {\n        return nextFocus;\n      }\n      if (direction === \"next\") {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n      if (nextFocus === index2) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback_default(({\n    event,\n    index: index2,\n    reason = \"auto\"\n  }) => {\n    highlightedIndexRef.current = index2;\n    if (index2 === -1) {\n      inputRef.current.removeAttribute(\"aria-activedescendant\");\n    } else {\n      inputRef.current.setAttribute(\"aria-activedescendant\", `${id}-option-${index2}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index2 === -1 ? null : filteredOptions[index2], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute(\"role\") !== \"listbox\") {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n    if (!listboxNode) {\n      return;\n    }\n    if (index2 === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index2}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === \"keyboard\") {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== \"mouse\" && reason !== \"touch\") {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback_default(({\n    event,\n    diff,\n    direction = \"next\",\n    reason = \"auto\"\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === \"reset\") {\n        return defaultHighlighted;\n      }\n      if (diff === \"start\") {\n        return 0;\n      }\n      if (diff === \"end\") {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n    if (autoComplete && diff !== \"reset\") {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n        const index2 = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index2 === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const checkHighlightedOptionExists = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : \"\";\n      const label2 = value2 ? getOptionLabel(value2) : \"\";\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        const previousHighlightedOptionExists = filteredOptions.some((option) => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n        if (previousHighlightedOptionExists) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const syncHighlightedIndex = React6.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n    if (checkHighlightedOptionExists()) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: \"reset\"\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n      if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: \"reset\"\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n  }, [\n    // Only sync the highlighted index when the option switch between empty and not\n    filteredOptions.length,\n    // Don't sync the highlighted index with the value when multiple\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    multiple ? false : value,\n    filterSelectedOptions,\n    changeHighlightedIndex,\n    setHighlightedIndex,\n    popupOpen,\n    inputValue,\n    multiple\n  ]);\n  const handleListboxRef = useEventCallback_default((node) => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (true) {\n    React6.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== \"INPUT\") {\n        if (inputRef.current && inputRef.current.nodeName === \"TEXTAREA\") {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join(\"\\n\"));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, \"\", componentName === \"useAutocomplete\" ? \"Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.\" : \"Make sure you have customized the input component correctly.\"].join(\"\\n\"));\n        }\n      }\n    }, [componentName]);\n  }\n  React6.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = (event) => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React6.useRef(false);\n  const selectNewValue = (event, option, reasonProp = \"selectOption\", origin = \"options\") => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (true) {\n        const matches = newValue.filter((val) => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join(\"\\n\"));\n        }\n      }\n      const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== \"freeSolo\") {\n        newValue.splice(itemIndex, 1);\n        reason = \"removeOption\";\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === \"touch\" && isTouch.current || blurOnSelect === \"mouse\" && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index2, direction) {\n    if (index2 === -1) {\n      return -1;\n    }\n    let nextFocus = index2;\n    while (true) {\n      if (direction === \"next\" && nextFocus === value.length || direction === \"previous\" && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n      if (!option || !option.hasAttribute(\"tabindex\") || option.disabled || option.getAttribute(\"aria-disabled\") === \"true\") {\n        nextFocus += direction === \"next\" ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === \"\") {\n      handleClose(event, \"toggleInput\");\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === \"\" && direction === \"previous\") {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === \"next\" ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = (event) => {\n    ignoreFocus.current = true;\n    setInputValueState(\"\");\n    if (onInputChange) {\n      onInputChange(event, \"\", \"clear\");\n    }\n    handleValue(event, multiple ? [] : null, \"clear\");\n  };\n  const handleKeyDown2 = (other) => (event) => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && [\"ArrowLeft\", \"ArrowRight\"].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n    if (event.which !== 229) {\n      switch (event.key) {\n        case \"Home\":\n          if (popupOpen && handleHomeEndKeys) {\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: \"start\",\n              direction: \"next\",\n              reason: \"keyboard\",\n              event\n            });\n          }\n          break;\n        case \"End\":\n          if (popupOpen && handleHomeEndKeys) {\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: \"end\",\n              direction: \"previous\",\n              reason: \"keyboard\",\n              event\n            });\n          }\n          break;\n        case \"PageUp\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: \"previous\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"PageDown\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: \"next\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"ArrowDown\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: \"next\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"ArrowUp\":\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: \"previous\",\n            reason: \"keyboard\",\n            event\n          });\n          handleOpen(event);\n          break;\n        case \"ArrowLeft\":\n          handleFocusTag(event, \"previous\");\n          break;\n        case \"ArrowRight\":\n          handleFocusTag(event, \"next\");\n          break;\n        case \"Enter\":\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, \"selectOption\");\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== \"\" && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, \"createOption\", \"freeSolo\");\n          }\n          break;\n        case \"Escape\":\n          if (popupOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            handleClose(event, \"escape\");\n          } else if (clearOnEscape && (inputValue !== \"\" || multiple && value.length > 0)) {\n            event.preventDefault();\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case \"Backspace\":\n          if (multiple && !readOnly && inputValue === \"\" && value.length > 0) {\n            const index2 = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index2, 1);\n            handleValue(event, newValue, \"removeOption\", {\n              option: value[index2]\n            });\n          }\n          break;\n        case \"Delete\":\n          if (multiple && !readOnly && inputValue === \"\" && value.length > 0 && focusedTag !== -1) {\n            const index2 = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index2, 1);\n            handleValue(event, newValue, \"removeOption\", {\n              option: value[index2]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = (event) => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur2 = (event) => {\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], \"blur\");\n    } else if (autoSelect && freeSolo && inputValue !== \"\") {\n      selectNewValue(event, inputValue, \"blur\", \"freeSolo\");\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, \"blur\");\n  };\n  const handleInputChange = (event) => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, \"input\");\n      }\n    }\n    if (newValue === \"\") {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, \"clear\");\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = (event) => {\n    const index2 = Number(event.currentTarget.getAttribute(\"data-option-index\"));\n    if (highlightedIndexRef.current !== index2) {\n      setHighlightedIndex({\n        event,\n        index: index2,\n        reason: \"mouse\"\n      });\n    }\n  };\n  const handleOptionTouchStart = (event) => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute(\"data-option-index\")),\n      reason: \"touch\"\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = (event) => {\n    const index2 = Number(event.currentTarget.getAttribute(\"data-option-index\"));\n    selectNewValue(event, filteredOptions[index2], \"selectOption\");\n    isTouch.current = false;\n  };\n  const handleTagDelete = (index2) => (event) => {\n    const newValue = value.slice();\n    newValue.splice(index2, 1);\n    handleValue(event, newValue, \"removeOption\", {\n      option: value[index2]\n    });\n  };\n  const handlePopupIndicator = (event) => {\n    if (open) {\n      handleClose(event, \"toggleInput\");\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleMouseDown = (event) => {\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute(\"id\") !== id) {\n      event.preventDefault();\n    }\n  };\n  const handleClick = (event) => {\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = (event) => {\n    if (!disabledProp && (inputValue === \"\" || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    const indexBy = /* @__PURE__ */ new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index2) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (true) {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, \"You can solve the issue by sorting the options with the output of `groupBy`.\");\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index2,\n          index: index2,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur2();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      \"aria-owns\": listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown2(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur2,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      \"aria-activedescendant\": popupOpen ? \"\" : null,\n      \"aria-autocomplete\": autoComplete ? \"both\" : \"list\",\n      \"aria-controls\": listboxAvailable ? `${id}-listbox` : void 0,\n      \"aria-expanded\": listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: \"off\",\n      ref: inputRef,\n      autoCapitalize: \"none\",\n      spellCheck: \"false\",\n      role: \"combobox\",\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: \"button\",\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: \"button\",\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index: index2\n    }) => _extends({\n      key: index2,\n      \"data-tag-index\": index2,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index2)\n    }),\n    getListboxProps: () => ({\n      role: \"listbox\",\n      id: `${id}-listbox`,\n      \"aria-labelledby\": `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: (event) => {\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index: index2,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: \"option\",\n        id: `${id}-option-${index2}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        \"data-option-index\": index2,\n        \"aria-disabled\": disabled,\n        \"aria-selected\": selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\n\n// node_modules/@mui/base/utils/isHostComponent.js\nfunction isHostComponent(element) {\n  return typeof element === \"string\";\n}\n\n// node_modules/@mui/base/utils/appendOwnerState.js\ninit_extends();\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === void 0 || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return _extends({}, otherProps, {\n    ownerState: _extends({}, otherProps.ownerState, ownerState)\n  });\n}\n\n// node_modules/@mui/base/utils/useSlotProps.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\ninit_esm();\n\n// node_modules/@mui/base/utils/mergeSlotProps.js\ninit_extends();\ninit_clsx();\n\n// node_modules/@mui/base/utils/extractEventHandlers.js\nfunction extractEventHandlers(object, excludeKeys = []) {\n  if (object === void 0) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === \"function\" && !excludeKeys.includes(prop)).forEach((prop) => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\n\n// node_modules/@mui/base/utils/omitEventHandlers.js\nfunction omitEventHandlers(object) {\n  if (object === void 0) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === \"function\")).forEach((prop) => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\n\n// node_modules/@mui/base/utils/mergeSlotProps.js\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n    const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n    const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);\n    if (joinedClasses2.length > 0) {\n      props2.className = joinedClasses2;\n    }\n    if (Object.keys(mergedStyle2).length > 0) {\n      props2.style = mergedStyle2;\n    }\n    return {\n      props: props2,\n      internalRef: void 0\n    };\n  }\n  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n  const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\n\n// node_modules/@mui/base/utils/resolveComponentProps.js\nfunction resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === \"function\") {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}\n\n// node_modules/@mui/base/utils/useSlotProps.js\nvar _excluded2 = [\"elementType\", \"externalSlotProps\", \"ownerState\", \"skipResolvingSlotProps\"];\nfunction useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false\n  } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded2);\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}\n\n// node_modules/@mui/base/utils/areArraysEqual.js\nfunction areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {\n  return array1.length === array2.length && array1.every((value, index2) => itemComparer(value, array2[index2]));\n}\n\n// node_modules/@mui/base/utils/ClassNameConfigurator.js\nvar React7 = __toESM(require_react());\nvar import_jsx_runtime8 = __toESM(require_jsx_runtime());\nvar defaultContextValue = {\n  disableDefaultClasses: false\n};\nvar ClassNameConfiguratorContext = React7.createContext(defaultContextValue);\nfunction useClassNamesOverride(generateUtilityClass2) {\n  const {\n    disableDefaultClasses\n  } = React7.useContext(ClassNameConfiguratorContext);\n  return (slot) => {\n    if (disableDefaultClasses) {\n      return \"\";\n    }\n    return generateUtilityClass2(slot);\n  };\n}\n\n// node_modules/@mui/base/utils/prepareForSlot.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React8 = __toESM(require_react());\n\n// node_modules/@mui/base/useBadge/useBadge.js\ninit_esm();\nfunction useBadge(parameters) {\n  const {\n    badgeContent: badgeContentProp,\n    invisible: invisibleProp = false,\n    max: maxProp = 99,\n    showZero = false\n  } = parameters;\n  const prevProps = usePreviousProps_default({\n    badgeContent: badgeContentProp,\n    max: maxProp\n  });\n  let invisible = invisibleProp;\n  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {\n    invisible = true;\n  }\n  const {\n    badgeContent,\n    max: max3 = maxProp\n  } = invisible ? prevProps : parameters;\n  const displayValue = badgeContent && Number(badgeContent) > max3 ? `${max3}+` : badgeContent;\n  return {\n    badgeContent,\n    invisible,\n    max: max3,\n    displayValue\n  };\n}\n\n// node_modules/@mui/base/Popper/Popper.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React9 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@popperjs/core/lib/enums.js\nvar top = \"top\";\nvar bottom = \"bottom\";\nvar right = \"right\";\nvar left = \"left\";\nvar auto = \"auto\";\nvar basePlacements = [top, bottom, right, left];\nvar start = \"start\";\nvar end = \"end\";\nvar clippingParents = \"clippingParents\";\nvar viewport = \"viewport\";\nvar popper = \"popper\";\nvar reference = \"reference\";\nvar variationPlacements = basePlacements.reduce(function(acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar beforeRead = \"beforeRead\";\nvar read = \"read\";\nvar afterRead = \"afterRead\";\nvar beforeMain = \"beforeMain\";\nvar main = \"main\";\nvar afterMain = \"afterMain\";\nvar beforeWrite = \"beforeWrite\";\nvar write = \"write\";\nvar afterWrite = \"afterWrite\";\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\n// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\nfunction getNodeName(element) {\n  return element ? (element.nodeName || \"\").toLowerCase() : null;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getWindow.js\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n  if (node.toString() !== \"[object Window]\") {\n    var ownerDocument2 = node.ownerDocument;\n    return ownerDocument2 ? ownerDocument2.defaultView || window : window;\n  }\n  return node;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\nfunction isShadowRoot(node) {\n  if (typeof ShadowRoot === \"undefined\") {\n    return false;\n  }\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// node_modules/@popperjs/core/lib/modifiers/applyStyles.js\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function(name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name];\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    }\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function(name2) {\n      var value = attributes[name2];\n      if (value === false) {\n        element.removeAttribute(name2);\n      } else {\n        element.setAttribute(name2, value === true ? \"\" : value);\n      }\n    });\n  });\n}\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: \"0\",\n      top: \"0\",\n      margin: \"0\"\n    },\n    arrow: {\n      position: \"absolute\"\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n  return function() {\n    Object.keys(state.elements).forEach(function(name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);\n      var style = styleProperties.reduce(function(style2, property) {\n        style2[property] = \"\";\n        return style2;\n      }, {});\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function(attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n}\nvar applyStyles_default = {\n  name: \"applyStyles\",\n  enabled: true,\n  phase: \"write\",\n  fn: applyStyles,\n  effect,\n  requires: [\"computeStyles\"]\n};\n\n// node_modules/@popperjs/core/lib/utils/getBasePlacement.js\nfunction getBasePlacement(placement) {\n  return placement.split(\"-\")[0];\n}\n\n// node_modules/@popperjs/core/lib/utils/math.js\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\n\n// node_modules/@popperjs/core/lib/utils/userAgent.js\nfunction getUAString() {\n  var uaData = navigator.userAgentData;\n  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(function(item) {\n      return item.brand + \"/\" + item.version;\n    }).join(\" \");\n  }\n  return navigator.userAgent;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js\nfunction isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width,\n    height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x,\n    y\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\nfunction getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element);\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width,\n    height\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/contains.js\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode();\n  if (parent.contains(child)) {\n    return true;\n  } else if (rootNode && isShadowRoot(rootNode)) {\n    var next = child;\n    do {\n      if (next && parent.isSameNode(next)) {\n        return true;\n      }\n      next = next.parentNode || next.host;\n    } while (next);\n  }\n  return false;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\nfunction isTableElement(element) {\n  return [\"table\", \"td\", \"th\"].indexOf(getNodeName(element)) >= 0;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\nfunction getDocumentElement(element) {\n  return ((isElement(element) ? element.ownerDocument : (\n    // $FlowFixMe[prop-missing]\n    element.document\n  )) || window.document).documentElement;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\nfunction getParentNode(element) {\n  if (getNodeName(element) === \"html\") {\n    return element;\n  }\n  return (\n    // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || // DOM Element detected\n    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element)\n  );\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === \"fixed\") {\n    return null;\n  }\n  return element.offsetParent;\n}\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n  if (isIE && isHTMLElement(element)) {\n    var elementCss = getComputedStyle(element);\n    if (elementCss.position === \"fixed\") {\n      return null;\n    }\n  }\n  var currentNode = getParentNode(element);\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n  while (isHTMLElement(currentNode) && [\"html\", \"body\"].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode);\n    if (css.transform !== \"none\" || css.perspective !== \"none\" || css.contain === \"paint\" || [\"transform\", \"perspective\"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === \"filter\" || isFirefox && css.filter && css.filter !== \"none\") {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n  return null;\n}\nfunction getOffsetParent(element) {\n  var window2 = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === \"static\") {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle(offsetParent).position === \"static\")) {\n    return window2;\n  }\n  return offsetParent || getContainingBlock(element) || window2;\n}\n\n// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\nfunction getMainAxisFromPlacement(placement) {\n  return [\"top\", \"bottom\"].indexOf(placement) >= 0 ? \"x\" : \"y\";\n}\n\n// node_modules/@popperjs/core/lib/utils/within.js\nfunction within(min3, value, max3) {\n  return max(min3, min(value, max3));\n}\nfunction withinMaxClamp(min3, value, max3) {\n  var v = within(min3, value, max3);\n  return v > max3 ? max3 : v;\n}\n\n// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}\n\n// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}\n\n// node_modules/@popperjs/core/lib/utils/expandToHashMap.js\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function(hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}\n\n// node_modules/@popperjs/core/lib/modifiers/arrow.js\nvar toPaddingObject = function toPaddingObject2(padding, state) {\n  padding = typeof padding === \"function\" ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n};\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n  var state = _ref.state, name = _ref.name, options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets2 = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? \"height\" : \"width\";\n  if (!arrowElement || !popperOffsets2) {\n    return;\n  }\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === \"y\" ? top : left;\n  var maxProp = axis === \"y\" ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === \"y\" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2;\n  var min3 = paddingObject[minProp];\n  var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset3 = within(min3, center, max3);\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset3, _state$modifiersData$.centerOffset = offset3 - center, _state$modifiersData$);\n}\nfunction effect2(_ref2) {\n  var state = _ref2.state, options = _ref2.options;\n  var _options$element = options.element, arrowElement = _options$element === void 0 ? \"[data-popper-arrow]\" : _options$element;\n  if (arrowElement == null) {\n    return;\n  }\n  if (typeof arrowElement === \"string\") {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n    if (!arrowElement) {\n      return;\n    }\n  }\n  if (!contains(state.elements.popper, arrowElement)) {\n    return;\n  }\n  state.elements.arrow = arrowElement;\n}\nvar arrow_default = {\n  name: \"arrow\",\n  enabled: true,\n  phase: \"main\",\n  fn: arrow,\n  effect: effect2,\n  requires: [\"popperOffsets\"],\n  requiresIfExists: [\"preventOverflow\"]\n};\n\n// node_modules/@popperjs/core/lib/utils/getVariation.js\nfunction getVariation(placement) {\n  return placement.split(\"-\")[1];\n}\n\n// node_modules/@popperjs/core/lib/modifiers/computeStyles.js\nvar unsetSides = {\n  top: \"auto\",\n  right: \"auto\",\n  bottom: \"auto\",\n  left: \"auto\"\n};\nfunction roundOffsetsByDPR(_ref, win) {\n  var x = _ref.x, y = _ref.y;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;\n  var _ref3 = typeof roundOffsets === \"function\" ? roundOffsets({\n    x,\n    y\n  }) : {\n    x,\n    y\n  };\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty(\"x\");\n  var hasY = offsets.hasOwnProperty(\"y\");\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper2);\n    var heightProp = \"clientHeight\";\n    var widthProp = \"clientWidth\";\n    if (offsetParent === getWindow(popper2)) {\n      offsetParent = getDocumentElement(popper2);\n      if (getComputedStyle(offsetParent).position !== \"static\" && position === \"absolute\") {\n        heightProp = \"scrollHeight\";\n        widthProp = \"scrollWidth\";\n      }\n    }\n    offsetParent = offsetParent;\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (\n        // $FlowFixMe[prop-missing]\n        offsetParent[heightProp]\n      );\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (\n        // $FlowFixMe[prop-missing]\n        offsetParent[widthProp]\n      );\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n  var commonStyles = Object.assign({\n    position\n  }, adaptive && unsetSides);\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x,\n    y\n  }, getWindow(popper2)) : {\n    x,\n    y\n  };\n  x = _ref4.x;\n  y = _ref4.y;\n  if (gpuAcceleration) {\n    var _Object$assign;\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? \"0\" : \"\", _Object$assign[sideX] = hasX ? \"0\" : \"\", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : \"\", _Object$assign2[sideX] = hasX ? x + \"px\" : \"\", _Object$assign2.transform = \"\", _Object$assign2));\n}\nfunction computeStyles(_ref5) {\n  var state = _ref5.state, options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration,\n    isFixed: state.options.strategy === \"fixed\"\n  };\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive,\n      roundOffsets\n    })));\n  }\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: \"absolute\",\n      adaptive: false,\n      roundOffsets\n    })));\n  }\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    \"data-popper-placement\": state.placement\n  });\n}\nvar computeStyles_default = {\n  name: \"computeStyles\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  fn: computeStyles,\n  data: {}\n};\n\n// node_modules/@popperjs/core/lib/modifiers/eventListeners.js\nvar passive = {\n  passive: true\n};\nfunction effect3(_ref) {\n  var state = _ref.state, instance = _ref.instance, options = _ref.options;\n  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;\n  var window2 = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n  if (scroll) {\n    scrollParents.forEach(function(scrollParent) {\n      scrollParent.addEventListener(\"scroll\", instance.update, passive);\n    });\n  }\n  if (resize) {\n    window2.addEventListener(\"resize\", instance.update, passive);\n  }\n  return function() {\n    if (scroll) {\n      scrollParents.forEach(function(scrollParent) {\n        scrollParent.removeEventListener(\"scroll\", instance.update, passive);\n      });\n    }\n    if (resize) {\n      window2.removeEventListener(\"resize\", instance.update, passive);\n    }\n  };\n}\nvar eventListeners_default = {\n  name: \"eventListeners\",\n  enabled: true,\n  phase: \"write\",\n  fn: function fn() {\n  },\n  effect: effect3,\n  data: {}\n};\n\n// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\nvar hash = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function(matched) {\n    return hash[matched];\n  });\n}\n\n// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\nvar hash2 = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function(matched) {\n    return hash2[matched];\n  });\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\nfunction getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft,\n    scrollTop\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\nfunction getWindowScrollBarX(element) {\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\nfunction getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n    if (layoutViewport || !layoutViewport && strategy === \"fixed\") {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x: x + getWindowScrollBarX(element),\n    y\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n  if (getComputedStyle(body || html).direction === \"rtl\") {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\nfunction isScrollParent(element) {\n  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\nfunction getScrollParent(node) {\n  if ([\"html\", \"body\", \"#document\"].indexOf(getNodeName(node)) >= 0) {\n    return node.ownerDocument.body;\n  }\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n  return getScrollParent(getParentNode(node));\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n  if (list === void 0) {\n    list = [];\n  }\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : (\n    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    updatedList.concat(listScrollParents(getParentNode(target)))\n  );\n}\n\n// node_modules/@popperjs/core/lib/utils/rectToClientRect.js\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === \"fixed\");\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n}\nfunction getClippingParents(element) {\n  var clippingParents2 = listScrollParents(getParentNode(element));\n  var canEscapeClipping = [\"absolute\", \"fixed\"].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n  if (!isElement(clipperElement)) {\n    return [];\n  }\n  return clippingParents2.filter(function(clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== \"body\";\n  });\n}\nfunction getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === \"clippingParents\" ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents2[0];\n  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n\n// node_modules/@popperjs/core/lib/utils/computeOffsets.js\nfunction computeOffsets(_ref) {\n  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference2.x + reference2.width / 2 - element.width / 2;\n  var commonY = reference2.y + reference2.height / 2 - element.height / 2;\n  var offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference2.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference2.y + reference2.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference2.x + reference2.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference2.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference2.x,\n        y: reference2.y\n      };\n  }\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n  if (mainAxis != null) {\n    var len = mainAxis === \"y\" ? \"height\" : \"width\";\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n  return offsets;\n}\n\n// node_modules/@popperjs/core/lib/utils/detectOverflow.js\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets2 = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: \"absolute\",\n    placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset;\n  if (elementContext === popper && offsetData) {\n    var offset3 = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function(key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? \"y\" : \"x\";\n      overflowOffsets[key] += offset3[axis] * multiply;\n    });\n  }\n  return overflowOffsets;\n}\n\n// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {\n    return getVariation(placement2) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements3.filter(function(placement2) {\n    return allowedAutoPlacements.indexOf(placement2) >= 0;\n  });\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements3;\n  }\n  var overflows = allowedPlacements.reduce(function(acc, placement2) {\n    acc[placement2] = detectOverflow(state, {\n      placement: placement2,\n      boundary,\n      rootBoundary,\n      padding\n    })[getBasePlacement(placement2)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function(a, b) {\n    return overflows[a] - overflows[b];\n  });\n}\n\n// node_modules/@popperjs/core/lib/modifiers/flip.js\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\nfunction flip(_ref) {\n  var state = _ref.state, options = _ref.options, name = _ref.name;\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {\n    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {\n      placement: placement2,\n      boundary,\n      rootBoundary,\n      padding,\n      flipVariations,\n      allowedAutoPlacements\n    }) : placement2);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = /* @__PURE__ */ new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements3[0];\n  for (var i = 0; i < placements3.length; i++) {\n    var placement = placements3[i];\n    var _basePlacement = getBasePlacement(placement);\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? \"width\" : \"height\";\n    var overflow = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      altBoundary,\n      padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n    if (checks.every(function(check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n    checksMap.set(placement, checks);\n  }\n  if (makeFallbackChecks) {\n    var numberOfChecks = flipVariations ? 3 : 1;\n    var _loop = function _loop2(_i2) {\n      var fittingPlacement = placements3.find(function(placement2) {\n        var checks2 = checksMap.get(placement2);\n        if (checks2) {\n          return checks2.slice(0, _i2).every(function(check) {\n            return check;\n          });\n        }\n      });\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n      if (_ret === \"break\")\n        break;\n    }\n  }\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n}\nvar flip_default = {\n  name: \"flip\",\n  enabled: true,\n  phase: \"main\",\n  fn: flip,\n  requiresIfExists: [\"offset\"],\n  data: {\n    _skip: false\n  }\n};\n\n// node_modules/@popperjs/core/lib/modifiers/hide.js\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function(side) {\n    return overflow[side] >= 0;\n  });\n}\nfunction hide(_ref) {\n  var state = _ref.state, name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: \"reference\"\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets,\n    popperEscapeOffsets,\n    isReferenceHidden,\n    hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    \"data-popper-reference-hidden\": isReferenceHidden,\n    \"data-popper-escaped\": hasPopperEscaped\n  });\n}\nvar hide_default = {\n  name: \"hide\",\n  enabled: true,\n  phase: \"main\",\n  requiresIfExists: [\"preventOverflow\"],\n  fn: hide\n};\n\n// node_modules/@popperjs/core/lib/modifiers/offset.js\nfunction distanceAndSkiddingToXY(placement, rects, offset3) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n  var _ref = typeof offset3 === \"function\" ? offset3(Object.assign({}, rects, {\n    placement\n  })) : offset3, skidding = _ref[0], distance = _ref[1];\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\nfunction offset(_ref2) {\n  var state = _ref2.state, options = _ref2.options, name = _ref2.name;\n  var _options$offset = options.offset, offset3 = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function(acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset3);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n  state.modifiersData[name] = data;\n}\nvar offset_default = {\n  name: \"offset\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"popperOffsets\"],\n  fn: offset\n};\n\n// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\nfunction popperOffsets(_ref) {\n  var state = _ref.state, name = _ref.name;\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: \"absolute\",\n    placement: state.placement\n  });\n}\nvar popperOffsets_default = {\n  name: \"popperOffsets\",\n  enabled: true,\n  phase: \"read\",\n  fn: popperOffsets,\n  data: {}\n};\n\n// node_modules/@popperjs/core/lib/utils/getAltAxis.js\nfunction getAltAxis(axis) {\n  return axis === \"x\" ? \"y\" : \"x\";\n}\n\n// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\nfunction preventOverflow(_ref) {\n  var state = _ref.state, options = _ref.options, name = _ref.name;\n  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary,\n    rootBoundary,\n    padding,\n    altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets2 = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === \"function\" ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === \"number\" ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n  if (!popperOffsets2) {\n    return;\n  }\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n    var mainSide = mainAxis === \"y\" ? top : left;\n    var altSide = mainAxis === \"y\" ? bottom : right;\n    var len = mainAxis === \"y\" ? \"height\" : \"width\";\n    var offset3 = popperOffsets2[mainAxis];\n    var min3 = offset3 + overflow[mainSide];\n    var max3 = offset3 - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData[\"arrow#persistent\"] ? state.modifiersData[\"arrow#persistent\"].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide];\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === \"y\" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset3 + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset3 + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? min(min3, tetherMin) : min3, offset3, tether ? max(max3, tetherMax) : max3);\n    popperOffsets2[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset3;\n  }\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n    var _mainSide = mainAxis === \"x\" ? top : left;\n    var _altSide = mainAxis === \"x\" ? bottom : right;\n    var _offset = popperOffsets2[altAxis];\n    var _len = altAxis === \"y\" ? \"height\" : \"width\";\n    var _min = _offset + overflow[_mainSide];\n    var _max = _offset - overflow[_altSide];\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n    popperOffsets2[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n  state.modifiersData[name] = data;\n}\nvar preventOverflow_default = {\n  name: \"preventOverflow\",\n  enabled: true,\n  phase: \"main\",\n  fn: preventOverflow,\n  requiresIfExists: [\"offset\"]\n};\n\n// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\nfunction getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n\n// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n}\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n// node_modules/@popperjs/core/lib/utils/orderModifiers.js\nfunction order(modifiers) {\n  var map = /* @__PURE__ */ new Map();\n  var visited = /* @__PURE__ */ new Set();\n  var result = [];\n  modifiers.forEach(function(modifier) {\n    map.set(modifier.name, modifier);\n  });\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function(dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n  modifiers.forEach(function(modifier) {\n    if (!visited.has(modifier.name)) {\n      sort(modifier);\n    }\n  });\n  return result;\n}\nfunction orderModifiers(modifiers) {\n  var orderedModifiers = order(modifiers);\n  return modifierPhases.reduce(function(acc, phase) {\n    return acc.concat(orderedModifiers.filter(function(modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}\n\n// node_modules/@popperjs/core/lib/utils/debounce.js\nfunction debounce2(fn2) {\n  var pending;\n  return function() {\n    if (!pending) {\n      pending = new Promise(function(resolve) {\n        Promise.resolve().then(function() {\n          pending = void 0;\n          resolve(fn2());\n        });\n      });\n    }\n    return pending;\n  };\n}\n\n// node_modules/@popperjs/core/lib/utils/mergeByName.js\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function(merged2, current) {\n    var existing = merged2[current.name];\n    merged2[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged2;\n  }, {});\n  return Object.keys(merged).map(function(key) {\n    return merged[key];\n  });\n}\n\n// node_modules/@popperjs/core/lib/createPopper.js\nvar DEFAULT_OPTIONS = {\n  placement: \"bottom\",\n  modifiers: [],\n  strategy: \"absolute\"\n};\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return !args.some(function(element) {\n    return !(element && typeof element.getBoundingClientRect === \"function\");\n  });\n}\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper4(reference2, popper2, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n    var state = {\n      placement: \"bottom\",\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference2,\n        popper: popper2\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options2 = typeof setOptionsAction === \"function\" ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options2);\n        state.scrollParents = {\n          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],\n          popper: listScrollParents(popper2)\n        };\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));\n        state.orderedModifiers = orderedModifiers.filter(function(m) {\n          return m.enabled;\n        });\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;\n        if (!areValidElements(reference3, popper3)) {\n          return;\n        }\n        state.rects = {\n          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === \"fixed\"),\n          popper: getLayoutRect(popper3)\n        };\n        state.reset = false;\n        state.placement = state.options.placement;\n        state.orderedModifiers.forEach(function(modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {\n          if (state.reset === true) {\n            state.reset = false;\n            index2 = -1;\n            continue;\n          }\n          var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;\n          if (typeof fn2 === \"function\") {\n            state = fn2({\n              state,\n              options: _options,\n              name,\n              instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce2(function() {\n        return new Promise(function(resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n    if (!areValidElements(reference2, popper2)) {\n      return instance;\n    }\n    instance.setOptions(options).then(function(state2) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state2);\n      }\n    });\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function(_ref) {\n        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;\n        if (typeof effect4 === \"function\") {\n          var cleanupFn = effect4({\n            state,\n            name,\n            instance,\n            options: options2\n          });\n          var noopFn = function noopFn2() {\n          };\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function(fn2) {\n        return fn2();\n      });\n      effectCleanupFns = [];\n    }\n    return instance;\n  };\n}\nvar createPopper = popperGenerator();\n\n// node_modules/@popperjs/core/lib/popper-lite.js\nvar defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];\nvar createPopper2 = popperGenerator({\n  defaultModifiers\n});\n\n// node_modules/@popperjs/core/lib/popper.js\nvar defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];\nvar createPopper3 = popperGenerator({\n  defaultModifiers: defaultModifiers2\n});\n\n// node_modules/@mui/base/Popper/Popper.js\nvar import_prop_types6 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/generateUtilityClass/index.js\ninit_esm();\n\n// node_modules/@mui/base/generateUtilityClasses/index.js\ninit_esm();\n\n// node_modules/@mui/base/Popper/popperClasses.js\nfunction getPopperUtilityClass(slot) {\n  return generateUtilityClass(\"MuiPopper\", slot);\n}\nvar popperClasses = generateUtilityClasses(\"MuiPopper\", [\"root\"]);\n\n// node_modules/@mui/base/Popper/Popper.js\nvar import_jsx_runtime9 = __toESM(require_jsx_runtime());\nvar _excluded3 = [\"anchorEl\", \"children\", \"direction\", \"disablePortal\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"slotProps\", \"slots\", \"TransitionProps\", \"ownerState\"];\nvar _excluded22 = [\"anchorEl\", \"children\", \"container\", \"direction\", \"disablePortal\", \"keepMounted\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"style\", \"transition\", \"slotProps\", \"slots\"];\nfunction flipPlacement(placement, direction) {\n  if (direction === \"ltr\") {\n    return placement;\n  }\n  switch (placement) {\n    case \"bottom-end\":\n      return \"bottom-start\";\n    case \"bottom-start\":\n      return \"bottom-end\";\n    case \"top-end\":\n      return \"top-start\";\n    case \"top-start\":\n      return \"top-end\";\n    default:\n      return placement;\n  }\n}\nfunction resolveAnchorEl(anchorEl) {\n  return typeof anchorEl === \"function\" ? anchorEl() : anchorEl;\n}\nfunction isHTMLElement2(element) {\n  return element.nodeType !== void 0;\n}\nfunction isVirtualElement(element) {\n  return !isHTMLElement2(element);\n}\nvar useUtilityClasses = () => {\n  const slots = {\n    root: [\"root\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));\n};\nvar defaultPopperOptions = {};\nvar PopperTooltip = React9.forwardRef(function PopperTooltip2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    anchorEl,\n    children,\n    direction,\n    disablePortal,\n    modifiers,\n    open,\n    placement: initialPlacement,\n    popperOptions,\n    popperRef: popperRefProp,\n    slotProps = {},\n    slots = {},\n    TransitionProps\n    // @ts-ignore internal logic\n    // prevent from spreading to DOM, it can come from the parent component e.g. Select.\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);\n  const tooltipRef = React9.useRef(null);\n  const ownRef = useForkRef(tooltipRef, forwardedRef);\n  const popperRef = React9.useRef(null);\n  const handlePopperRef = useForkRef(popperRef, popperRefProp);\n  const handlePopperRefRef = React9.useRef(handlePopperRef);\n  useEnhancedEffect_default(() => {\n    handlePopperRefRef.current = handlePopperRef;\n  }, [handlePopperRef]);\n  React9.useImperativeHandle(popperRefProp, () => popperRef.current, []);\n  const rtlPlacement = flipPlacement(initialPlacement, direction);\n  const [placement, setPlacement] = React9.useState(rtlPlacement);\n  const [resolvedAnchorElement, setResolvedAnchorElement] = React9.useState(resolveAnchorEl(anchorEl));\n  React9.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.forceUpdate();\n    }\n  });\n  React9.useEffect(() => {\n    if (anchorEl) {\n      setResolvedAnchorElement(resolveAnchorEl(anchorEl));\n    }\n  }, [anchorEl]);\n  useEnhancedEffect_default(() => {\n    if (!resolvedAnchorElement || !open) {\n      return void 0;\n    }\n    const handlePopperUpdate = (data) => {\n      setPlacement(data.placement);\n    };\n    if (true) {\n      if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {\n        const box = resolvedAnchorElement.getBoundingClientRect();\n        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          console.warn([\"MUI: The `anchorEl` prop provided to the component is invalid.\", \"The anchor element should be part of the document layout.\", \"Make sure the element is present in the document or that it's not display none.\"].join(\"\\n\"));\n        }\n      }\n    }\n    let popperModifiers = [{\n      name: \"preventOverflow\",\n      options: {\n        altBoundary: disablePortal\n      }\n    }, {\n      name: \"flip\",\n      options: {\n        altBoundary: disablePortal\n      }\n    }, {\n      name: \"onUpdate\",\n      enabled: true,\n      phase: \"afterWrite\",\n      fn: ({\n        state\n      }) => {\n        handlePopperUpdate(state);\n      }\n    }];\n    if (modifiers != null) {\n      popperModifiers = popperModifiers.concat(modifiers);\n    }\n    if (popperOptions && popperOptions.modifiers != null) {\n      popperModifiers = popperModifiers.concat(popperOptions.modifiers);\n    }\n    const popper2 = createPopper3(resolvedAnchorElement, tooltipRef.current, _extends({\n      placement: rtlPlacement\n    }, popperOptions, {\n      modifiers: popperModifiers\n    }));\n    handlePopperRefRef.current(popper2);\n    return () => {\n      popper2.destroy();\n      handlePopperRefRef.current(null);\n    };\n  }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);\n  const childProps = {\n    placement\n  };\n  if (TransitionProps !== null) {\n    childProps.TransitionProps = TransitionProps;\n  }\n  const classes = useUtilityClasses();\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: \"tooltip\",\n      ref: ownRef\n    },\n    ownerState: props,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime9.jsx)(Root, _extends({}, rootProps, {\n    children: typeof children === \"function\" ? children(childProps) : children\n  }));\n});\nvar Popper = React9.forwardRef(function Popper2(props, forwardedRef) {\n  const {\n    anchorEl,\n    children,\n    container: containerProp,\n    direction = \"ltr\",\n    disablePortal = false,\n    keepMounted = false,\n    modifiers,\n    open,\n    placement = \"bottom\",\n    popperOptions = defaultPopperOptions,\n    popperRef,\n    style,\n    transition = false,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);\n  const [exited, setExited] = React9.useState(true);\n  const handleEnter = () => {\n    setExited(false);\n  };\n  const handleExited = () => {\n    setExited(true);\n  };\n  if (!keepMounted && !open && (!transition || exited)) {\n    return null;\n  }\n  let container;\n  if (containerProp) {\n    container = containerProp;\n  } else if (anchorEl) {\n    const resolvedAnchorEl = resolveAnchorEl(anchorEl);\n    container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;\n  }\n  const display = !open && keepMounted && (!transition || exited) ? \"none\" : void 0;\n  const transitionProps = transition ? {\n    in: open,\n    onEnter: handleEnter,\n    onExited: handleExited\n  } : void 0;\n  return (0, import_jsx_runtime9.jsx)(Portal, {\n    disablePortal,\n    container,\n    children: (0, import_jsx_runtime9.jsx)(PopperTooltip, _extends({\n      anchorEl,\n      direction,\n      disablePortal,\n      modifiers,\n      ref: forwardedRef,\n      open: transition ? !exited : open,\n      placement,\n      popperOptions,\n      popperRef,\n      slotProps,\n      slots\n    }, other, {\n      style: _extends({\n        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.\n        position: \"fixed\",\n        // Fix Popper.js display issue\n        top: 0,\n        left: 0,\n        display\n      }, style),\n      TransitionProps: transitionProps,\n      children\n    }))\n  });\n});\ntrue ? Popper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: chainPropTypes(import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.object, import_prop_types6.default.func]), (props) => {\n    if (props.open) {\n      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);\n      if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          return new Error([\"MUI: The `anchorEl` prop provided to the component is invalid.\", \"The anchor element should be part of the document layout.\", \"Make sure the element is present in the document or that it's not display none.\"].join(\"\\n\"));\n        }\n      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== \"function\" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {\n        return new Error([\"MUI: The `anchorEl` prop provided to the component is invalid.\", \"It should be an HTML element instance or a virtualElement \", \"(https://popper.js.org/docs/v2/virtual-elements/).\"].join(\"\\n\"));\n      }\n    }\n    return null;\n  }),\n  /**\n   * Popper render function or node.\n   */\n  children: import_prop_types6.default.oneOfType([import_prop_types6.default.node, import_prop_types6.default.func]),\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.func]),\n  /**\n   * Direction of the text.\n   * @default 'ltr'\n   */\n  direction: import_prop_types6.default.oneOf([\"ltr\", \"rtl\"]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: import_prop_types6.default.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Popper.\n   * @default false\n   */\n  keepMounted: import_prop_types6.default.bool,\n  /**\n   * Popper.js is based on a \"plugin-like\" architecture,\n   * most of its features are fully encapsulated \"modifiers\".\n   *\n   * A modifier is a function that is called each time Popper.js needs to\n   * compute the position of the popper.\n   * For this reason, modifiers should be very performant to avoid bottlenecks.\n   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).\n   */\n  modifiers: import_prop_types6.default.arrayOf(import_prop_types6.default.shape({\n    data: import_prop_types6.default.object,\n    effect: import_prop_types6.default.func,\n    enabled: import_prop_types6.default.bool,\n    fn: import_prop_types6.default.func,\n    name: import_prop_types6.default.any,\n    options: import_prop_types6.default.object,\n    phase: import_prop_types6.default.oneOf([\"afterMain\", \"afterRead\", \"afterWrite\", \"beforeMain\", \"beforeRead\", \"beforeWrite\", \"main\", \"read\", \"write\"]),\n    requires: import_prop_types6.default.arrayOf(import_prop_types6.default.string),\n    requiresIfExists: import_prop_types6.default.arrayOf(import_prop_types6.default.string)\n  })),\n  /**\n   * If `true`, the component is shown.\n   */\n  open: import_prop_types6.default.bool.isRequired,\n  /**\n   * Popper placement.\n   * @default 'bottom'\n   */\n  placement: import_prop_types6.default.oneOf([\"auto-end\", \"auto-start\", \"auto\", \"bottom-end\", \"bottom-start\", \"bottom\", \"left-end\", \"left-start\", \"left\", \"right-end\", \"right-start\", \"right\", \"top-end\", \"top-start\", \"top\"]),\n  /**\n   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.\n   * @default {}\n   */\n  popperOptions: import_prop_types6.default.shape({\n    modifiers: import_prop_types6.default.array,\n    onFirstUpdate: import_prop_types6.default.func,\n    placement: import_prop_types6.default.oneOf([\"auto-end\", \"auto-start\", \"auto\", \"bottom-end\", \"bottom-start\", \"bottom\", \"left-end\", \"left-start\", \"left\", \"right-end\", \"right-start\", \"right\", \"top-end\", \"top-start\", \"top\"]),\n    strategy: import_prop_types6.default.oneOf([\"absolute\", \"fixed\"])\n  }),\n  /**\n   * A ref that points to the used popper instance.\n   */\n  popperRef: refType_default,\n  /**\n   * The props used for each slot inside the Popper.\n   * @default {}\n   */\n  slotProps: import_prop_types6.default.shape({\n    root: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Popper.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types6.default.shape({\n    root: import_prop_types6.default.elementType\n  }),\n  /**\n   * Help supporting a react-transition-group/Transition component.\n   * @default false\n   */\n  transition: import_prop_types6.default.bool\n} : void 0;\n\n// node_modules/@mui/base/unstable_useModal/useModal.js\ninit_extends();\nvar React10 = __toESM(require_react());\ninit_esm();\nfunction getContainer2(container) {\n  return typeof container === \"function\" ? container() : container;\n}\nfunction getHasTransition(children) {\n  return children ? children.props.hasOwnProperty(\"in\") : false;\n}\nvar defaultManager = new ModalManager();\nfunction useModal(parameters) {\n  const {\n    container,\n    disableEscapeKeyDown = false,\n    disableScrollLock = false,\n    // @ts-ignore internal logic - Base UI supports the manager as a prop too\n    manager = defaultManager,\n    closeAfterTransition = false,\n    onTransitionEnter,\n    onTransitionExited,\n    children,\n    onClose,\n    open,\n    rootRef\n  } = parameters;\n  const modal = React10.useRef({});\n  const mountNodeRef = React10.useRef(null);\n  const modalRef = React10.useRef(null);\n  const handleRef = useForkRef(modalRef, rootRef);\n  const [exited, setExited] = React10.useState(!open);\n  const hasTransition = getHasTransition(children);\n  let ariaHiddenProp = true;\n  if (parameters[\"aria-hidden\"] === \"false\" || parameters[\"aria-hidden\"] === false) {\n    ariaHiddenProp = false;\n  }\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mount = mountNodeRef.current;\n    return modal.current;\n  };\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    });\n    if (modalRef.current) {\n      modalRef.current.scrollTop = 0;\n    }\n  };\n  const handleOpen = useEventCallback_default(() => {\n    const resolvedContainer = getContainer2(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer);\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = React10.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = useEventCallback_default((node) => {\n    mountNodeRef.current = node;\n    if (!node) {\n      return;\n    }\n    if (open && isTopModal()) {\n      handleMounted();\n    } else if (modalRef.current) {\n      ariaHidden(modalRef.current, ariaHiddenProp);\n    }\n  });\n  const handleClose = React10.useCallback(() => {\n    manager.remove(getModal(), ariaHiddenProp);\n  }, [ariaHiddenProp, manager]);\n  React10.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  React10.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.key !== \"Escape\" || event.which === 229 || // Wait until IME is settled.\n    !isTopModal()) {\n      return;\n    }\n    if (!disableEscapeKeyDown) {\n      event.stopPropagation();\n      if (onClose) {\n        onClose(event, \"escapeKeyDown\");\n      }\n    }\n  };\n  const createHandleBackdropClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (onClose) {\n      onClose(event, \"backdropClick\");\n    }\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters);\n    delete propsEventHandlers.onTransitionEnter;\n    delete propsEventHandlers.onTransitionExited;\n    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);\n    return _extends({\n      role: \"presentation\"\n    }, externalEventHandlers, {\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      ref: handleRef\n    });\n  };\n  const getBackdropProps = (otherHandlers = {}) => {\n    const externalEventHandlers = otherHandlers;\n    return _extends({\n      \"aria-hidden\": true\n    }, externalEventHandlers, {\n      onClick: createHandleBackdropClick(externalEventHandlers),\n      open\n    });\n  };\n  const getTransitionProps = () => {\n    const handleEnter = () => {\n      setExited(false);\n      if (onTransitionEnter) {\n        onTransitionEnter();\n      }\n    };\n    const handleExited = () => {\n      setExited(true);\n      if (onTransitionExited) {\n        onTransitionExited();\n      }\n      if (closeAfterTransition) {\n        handleClose();\n      }\n    };\n    return {\n      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),\n      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)\n    };\n  };\n  return {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    rootRef: handleRef,\n    portalRef: handlePortalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  };\n}\n\n// node_modules/@mui/base/useSlider/useSlider.js\ninit_extends();\nvar React11 = __toESM(require_react());\ninit_esm();\nvar INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;\nfunction asc(a, b) {\n  return a - b;\n}\nfunction clamp(value, min3, max3) {\n  if (value == null) {\n    return min3;\n  }\n  return Math.min(Math.max(min3, value), max3);\n}\nfunction findClosest(values, currentValue) {\n  var _values$reduce;\n  const {\n    index: closestIndex\n  } = (_values$reduce = values.reduce((acc, value, index2) => {\n    const distance = Math.abs(currentValue - value);\n    if (acc === null || distance < acc.distance || distance === acc.distance) {\n      return {\n        distance,\n        index: index2\n      };\n    }\n    return acc;\n  }, null)) != null ? _values$reduce : {};\n  return closestIndex;\n}\nfunction trackFinger(event, touchId) {\n  if (touchId.current !== void 0 && event.changedTouches) {\n    const touchEvent = event;\n    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {\n      const touch = touchEvent.changedTouches[i];\n      if (touch.identifier === touchId.current) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction valueToPercent(value, min3, max3) {\n  return (value - min3) * 100 / (max3 - min3);\n}\nfunction percentToValue(percent, min3, max3) {\n  return (max3 - min3) * percent + min3;\n}\nfunction getDecimalPrecision(num) {\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split(\"e-\");\n    const matissaDecimalPart = parts[0].split(\".\")[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n  const decimalPart = num.toString().split(\".\")[1];\n  return decimalPart ? decimalPart.length : 0;\n}\nfunction roundValueToStep(value, step, min3) {\n  const nearest = Math.round((value - min3) / step) * step + min3;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n}\nfunction setValueIndex({\n  values,\n  newValue,\n  index: index2\n}) {\n  const output = values.slice();\n  output[index2] = newValue;\n  return output.sort(asc);\n}\nfunction focusThumb({\n  sliderRef,\n  activeIndex,\n  setActive\n}) {\n  var _sliderRef$current, _doc$activeElement;\n  const doc = ownerDocument(sliderRef.current);\n  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute(\"data-index\")) !== activeIndex) {\n    var _sliderRef$current2;\n    (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type=\"range\"][data-index=\"${activeIndex}\"]`).focus();\n  }\n  if (setActive) {\n    setActive(activeIndex);\n  }\n}\nfunction areValuesEqual(newValue, oldValue) {\n  if (typeof newValue === \"number\" && typeof oldValue === \"number\") {\n    return newValue === oldValue;\n  }\n  if (typeof newValue === \"object\" && typeof oldValue === \"object\") {\n    return areArraysEqual(newValue, oldValue);\n  }\n  return false;\n}\nvar axisProps = {\n  horizontal: {\n    offset: (percent) => ({\n      left: `${percent}%`\n    }),\n    leap: (percent) => ({\n      width: `${percent}%`\n    })\n  },\n  \"horizontal-reverse\": {\n    offset: (percent) => ({\n      right: `${percent}%`\n    }),\n    leap: (percent) => ({\n      width: `${percent}%`\n    })\n  },\n  vertical: {\n    offset: (percent) => ({\n      bottom: `${percent}%`\n    }),\n    leap: (percent) => ({\n      height: `${percent}%`\n    })\n  }\n};\nvar Identity = (x) => x;\nvar cachedSupportsTouchActionNone;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === void 0) {\n    if (typeof CSS !== \"undefined\" && typeof CSS.supports === \"function\") {\n      cachedSupportsTouchActionNone = CSS.supports(\"touch-action\", \"none\");\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction useSlider(parameters) {\n  const {\n    \"aria-labelledby\": ariaLabelledby,\n    defaultValue,\n    disabled = false,\n    disableSwap = false,\n    isRtl = false,\n    marks: marksProp = false,\n    max: max3 = 100,\n    min: min3 = 0,\n    name,\n    onChange,\n    onChangeCommitted,\n    orientation = \"horizontal\",\n    rootRef: ref,\n    scale = Identity,\n    step = 1,\n    tabIndex,\n    value: valueProp\n  } = parameters;\n  const touchId = React11.useRef();\n  const [active, setActive] = React11.useState(-1);\n  const [open, setOpen] = React11.useState(-1);\n  const [dragging, setDragging] = React11.useState(false);\n  const moveCount = React11.useRef(0);\n  const [valueDerived, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : min3,\n    name: \"Slider\"\n  });\n  const handleChange = onChange && ((event, value, thumbIndex) => {\n    const nativeEvent = event.nativeEvent || event;\n    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\n    Object.defineProperty(clonedEvent, \"target\", {\n      writable: true,\n      value: {\n        value,\n        name\n      }\n    });\n    onChange(clonedEvent, value, thumbIndex);\n  });\n  const range = Array.isArray(valueDerived);\n  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];\n  values = values.map((value) => clamp(value, min3, max3));\n  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max3 - min3) / step) + 1)].map((_, index2) => ({\n    value: min3 + step * index2\n  })) : marksProp || [];\n  const marksValues = marks.map((mark) => mark.value);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusedThumbIndex, setFocusedThumbIndex] = React11.useState(-1);\n  const sliderRef = React11.useRef();\n  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);\n  const handleRef = useForkRef(ref, handleFocusRef);\n  const createHandleHiddenInputFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu;\n    const index2 = Number(event.currentTarget.getAttribute(\"data-index\"));\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusedThumbIndex(index2);\n    }\n    setOpen(index2);\n    otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n  };\n  const createHandleHiddenInputBlur = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusedThumbIndex(-1);\n    }\n    setOpen(-1);\n    otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n  };\n  useEnhancedEffect_default(() => {\n    if (disabled && sliderRef.current.contains(document.activeElement)) {\n      var _document$activeEleme;\n      (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();\n    }\n  }, [disabled]);\n  if (disabled && active !== -1) {\n    setActive(-1);\n  }\n  if (disabled && focusedThumbIndex !== -1) {\n    setFocusedThumbIndex(-1);\n  }\n  const createHandleHiddenInputChange = (otherHandlers) => (event) => {\n    var _otherHandlers$onChan;\n    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);\n    const index2 = Number(event.currentTarget.getAttribute(\"data-index\"));\n    const value = values[index2];\n    const marksIndex = marksValues.indexOf(value);\n    let newValue = event.target.valueAsNumber;\n    if (marks && step == null) {\n      const maxMarksValue = marksValues[marksValues.length - 1];\n      if (newValue > maxMarksValue) {\n        newValue = maxMarksValue;\n      } else if (newValue < marksValues[0]) {\n        newValue = marksValues[0];\n      } else {\n        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];\n      }\n    }\n    newValue = clamp(newValue, min3, max3);\n    if (range) {\n      if (disableSwap) {\n        newValue = clamp(newValue, values[index2 - 1] || -Infinity, values[index2 + 1] || Infinity);\n      }\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        newValue,\n        index: index2\n      });\n      let activeIndex = index2;\n      if (!disableSwap) {\n        activeIndex = newValue.indexOf(previousValue);\n      }\n      focusThumb({\n        sliderRef,\n        activeIndex\n      });\n    }\n    setValueState(newValue);\n    setFocusedThumbIndex(index2);\n    if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n      handleChange(event, newValue, index2);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(event, newValue);\n    }\n  };\n  const previousIndex = React11.useRef();\n  let axis = orientation;\n  if (isRtl && orientation === \"horizontal\") {\n    axis += \"-reverse\";\n  }\n  const getFingerNewValue = ({\n    finger,\n    move = false\n  }) => {\n    const {\n      current: slider\n    } = sliderRef;\n    const {\n      width,\n      height,\n      bottom: bottom2,\n      left: left2\n    } = slider.getBoundingClientRect();\n    let percent;\n    if (axis.indexOf(\"vertical\") === 0) {\n      percent = (bottom2 - finger.y) / height;\n    } else {\n      percent = (finger.x - left2) / width;\n    }\n    if (axis.indexOf(\"-reverse\") !== -1) {\n      percent = 1 - percent;\n    }\n    let newValue;\n    newValue = percentToValue(percent, min3, max3);\n    if (step) {\n      newValue = roundValueToStep(newValue, step, min3);\n    } else {\n      const closestIndex = findClosest(marksValues, newValue);\n      newValue = marksValues[closestIndex];\n    }\n    newValue = clamp(newValue, min3, max3);\n    let activeIndex = 0;\n    if (range) {\n      if (!move) {\n        activeIndex = findClosest(values, newValue);\n      } else {\n        activeIndex = previousIndex.current;\n      }\n      if (disableSwap) {\n        newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);\n      }\n      const previousValue = newValue;\n      newValue = setValueIndex({\n        values,\n        newValue,\n        index: activeIndex\n      });\n      if (!(disableSwap && move)) {\n        activeIndex = newValue.indexOf(previousValue);\n        previousIndex.current = activeIndex;\n      }\n    }\n    return {\n      newValue,\n      activeIndex\n    };\n  };\n  const handleTouchMove = useEventCallback_default((nativeEvent) => {\n    const finger = trackFinger(nativeEvent, touchId);\n    if (!finger) {\n      return;\n    }\n    moveCount.current += 1;\n    if (nativeEvent.type === \"mousemove\" && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    const {\n      newValue,\n      activeIndex\n    } = getFingerNewValue({\n      finger,\n      move: true\n    });\n    focusThumb({\n      sliderRef,\n      activeIndex,\n      setActive\n    });\n    setValueState(newValue);\n    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {\n      setDragging(true);\n    }\n    if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n      handleChange(nativeEvent, newValue, activeIndex);\n    }\n  });\n  const handleTouchEnd = useEventCallback_default((nativeEvent) => {\n    const finger = trackFinger(nativeEvent, touchId);\n    setDragging(false);\n    if (!finger) {\n      return;\n    }\n    const {\n      newValue\n    } = getFingerNewValue({\n      finger,\n      move: true\n    });\n    setActive(-1);\n    if (nativeEvent.type === \"touchend\") {\n      setOpen(-1);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(nativeEvent, newValue);\n    }\n    touchId.current = void 0;\n    stopListening();\n  });\n  const handleTouchStart = useEventCallback_default((nativeEvent) => {\n    if (disabled) {\n      return;\n    }\n    if (!doesSupportTouchActionNone()) {\n      nativeEvent.preventDefault();\n    }\n    const touch = nativeEvent.changedTouches[0];\n    if (touch != null) {\n      touchId.current = touch.identifier;\n    }\n    const finger = trackFinger(nativeEvent, touchId);\n    if (finger !== false) {\n      const {\n        newValue,\n        activeIndex\n      } = getFingerNewValue({\n        finger\n      });\n      focusThumb({\n        sliderRef,\n        activeIndex,\n        setActive\n      });\n      setValueState(newValue);\n      if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n        handleChange(nativeEvent, newValue, activeIndex);\n      }\n    }\n    moveCount.current = 0;\n    const doc = ownerDocument(sliderRef.current);\n    doc.addEventListener(\"touchmove\", handleTouchMove);\n    doc.addEventListener(\"touchend\", handleTouchEnd);\n  });\n  const stopListening = React11.useCallback(() => {\n    const doc = ownerDocument(sliderRef.current);\n    doc.removeEventListener(\"mousemove\", handleTouchMove);\n    doc.removeEventListener(\"mouseup\", handleTouchEnd);\n    doc.removeEventListener(\"touchmove\", handleTouchMove);\n    doc.removeEventListener(\"touchend\", handleTouchEnd);\n  }, [handleTouchEnd, handleTouchMove]);\n  React11.useEffect(() => {\n    const {\n      current: slider\n    } = sliderRef;\n    slider.addEventListener(\"touchstart\", handleTouchStart, {\n      passive: doesSupportTouchActionNone()\n    });\n    return () => {\n      slider.removeEventListener(\"touchstart\", handleTouchStart, {\n        passive: doesSupportTouchActionNone()\n      });\n      stopListening();\n    };\n  }, [stopListening, handleTouchStart]);\n  React11.useEffect(() => {\n    if (disabled) {\n      stopListening();\n    }\n  }, [disabled, stopListening]);\n  const createHandleMouseDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous;\n    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);\n    if (disabled) {\n      return;\n    }\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.button !== 0) {\n      return;\n    }\n    event.preventDefault();\n    const finger = trackFinger(event, touchId);\n    if (finger !== false) {\n      const {\n        newValue,\n        activeIndex\n      } = getFingerNewValue({\n        finger\n      });\n      focusThumb({\n        sliderRef,\n        activeIndex,\n        setActive\n      });\n      setValueState(newValue);\n      if (handleChange && !areValuesEqual(newValue, valueDerived)) {\n        handleChange(event, newValue, activeIndex);\n      }\n    }\n    moveCount.current = 0;\n    const doc = ownerDocument(sliderRef.current);\n    doc.addEventListener(\"mousemove\", handleTouchMove);\n    doc.addEventListener(\"mouseup\", handleTouchEnd);\n  };\n  const trackOffset = valueToPercent(range ? values[0] : min3, min3, max3);\n  const trackLeap = valueToPercent(values[values.length - 1], min3, max3) - trackOffset;\n  const getRootProps = (externalProps = {}) => {\n    const externalHandlers = extractEventHandlers(externalProps);\n    const ownEventHandlers = {\n      onMouseDown: createHandleMouseDown(externalHandlers || {})\n    };\n    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);\n    return _extends({}, externalProps, {\n      ref: handleRef\n    }, mergedEventHandlers);\n  };\n  const createHandleMouseOver = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous2;\n    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);\n    const index2 = Number(event.currentTarget.getAttribute(\"data-index\"));\n    setOpen(index2);\n  };\n  const createHandleMouseLeave = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous3;\n    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);\n    setOpen(-1);\n  };\n  const getThumbProps = (externalProps = {}) => {\n    const externalHandlers = extractEventHandlers(externalProps);\n    const ownEventHandlers = {\n      onMouseOver: createHandleMouseOver(externalHandlers || {}),\n      onMouseLeave: createHandleMouseLeave(externalHandlers || {})\n    };\n    return _extends({}, externalProps, externalHandlers, ownEventHandlers);\n  };\n  const getThumbStyle = (index2) => {\n    return {\n      // So the non active thumb doesn't show its label on hover.\n      pointerEvents: active !== -1 && active !== index2 ? \"none\" : void 0\n    };\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    var _parameters$step;\n    const externalHandlers = extractEventHandlers(externalProps);\n    const ownEventHandlers = {\n      onChange: createHandleHiddenInputChange(externalHandlers || {}),\n      onFocus: createHandleHiddenInputFocus(externalHandlers || {}),\n      onBlur: createHandleHiddenInputBlur(externalHandlers || {})\n    };\n    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);\n    return _extends({\n      tabIndex,\n      \"aria-labelledby\": ariaLabelledby,\n      \"aria-orientation\": orientation,\n      \"aria-valuemax\": scale(max3),\n      \"aria-valuemin\": scale(min3),\n      name,\n      type: \"range\",\n      min: parameters.min,\n      max: parameters.max,\n      step: parameters.step === null && parameters.marks ? \"any\" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,\n      disabled\n    }, externalProps, mergedEventHandlers, {\n      style: _extends({}, visuallyHidden_default, {\n        direction: isRtl ? \"rtl\" : \"ltr\",\n        // So that VoiceOver's focus indicator matches the thumb's dimensions\n        width: \"100%\",\n        height: \"100%\"\n      })\n    });\n  };\n  return {\n    active,\n    axis,\n    axisProps,\n    dragging,\n    focusedThumbIndex,\n    getHiddenInputProps,\n    getRootProps,\n    getThumbProps,\n    marks,\n    open,\n    range,\n    rootRef: handleRef,\n    trackLeap,\n    trackOffset,\n    values,\n    getThumbStyle\n  };\n}\n\n// node_modules/@mui/base/useSnackbar/useSnackbar.js\ninit_extends();\nvar React12 = __toESM(require_react());\ninit_esm();\nfunction useSnackbar(parameters = {}) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = React12.useRef();\n  React12.useEffect(() => {\n    if (!open) {\n      return void 0;\n    }\n    function handleKeyDown2(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        if (nativeEvent.key === \"Escape\" || nativeEvent.key === \"Esc\") {\n          onClose == null || onClose(nativeEvent, \"escapeKeyDown\");\n        }\n      }\n    }\n    document.addEventListener(\"keydown\", handleKeyDown2);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown2);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback_default((event, reason) => {\n    onClose == null || onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback_default((autoHideDurationParam) => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, \"timeout\");\n    }, autoHideDurationParam);\n  });\n  React12.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n  const handleClickAway = (event) => {\n    onClose == null || onClose(event, \"clickaway\");\n  };\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  };\n  const handleResume = React12.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = (otherHandlers) => (event) => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null || onBlurCallback(event);\n    handleResume();\n  };\n  const createHandleFocus = (otherHandlers) => (event) => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null || onFocusCallback(event);\n    handlePause();\n  };\n  const createMouseEnter = (otherHandlers) => (event) => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null || onMouseEnterCallback(event);\n    handlePause();\n  };\n  const createMouseLeave = (otherHandlers) => (event) => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null || onMouseLeaveCallback(event);\n    handleResume();\n  };\n  React12.useEffect(() => {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener(\"focus\", handleResume);\n      window.addEventListener(\"blur\", handlePause);\n      return () => {\n        window.removeEventListener(\"focus\", handleResume);\n        window.removeEventListener(\"blur\", handlePause);\n      };\n    }\n    return void 0;\n  }, [disableWindowBlurListener, handleResume, open]);\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: \"presentation\"\n    }, externalProps, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}\n\n// node_modules/@mui/base/Badge/Badge.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React13 = __toESM(require_react());\nvar import_prop_types7 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Badge/badgeClasses.js\nfunction getBadgeUtilityClass(slot) {\n  return generateUtilityClass(\"MuiBadge\", slot);\n}\nvar badgeClasses = generateUtilityClasses(\"MuiBadge\", [\"root\", \"badge\", \"invisible\"]);\n\n// node_modules/@mui/base/Badge/Badge.js\nvar import_jsx_runtime10 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime11 = __toESM(require_jsx_runtime());\nvar _excluded4 = [\"badgeContent\", \"children\", \"invisible\", \"max\", \"slotProps\", \"slots\", \"showZero\"];\nvar useUtilityClasses2 = (ownerState) => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\"],\n    badge: [\"badge\", invisible && \"invisible\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\nvar Badge = React13.forwardRef(function Badge2(props, forwardedRef) {\n  var _slots$root, _slots$badge;\n  const {\n    children,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);\n  const {\n    badgeContent,\n    max: max3,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    max: maxProp\n  }));\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max: max3,\n    showZero\n  });\n  const classes = useUtilityClasses2(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"span\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : \"span\";\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return (0, import_jsx_runtime11.jsxs)(Root, _extends({}, rootProps, {\n    children: [children, (0, import_jsx_runtime10.jsx)(BadgeComponent, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\ntrue ? Badge.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: import_prop_types7.default.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: import_prop_types7.default.node,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: import_prop_types7.default.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: import_prop_types7.default.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: import_prop_types7.default.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: import_prop_types7.default.shape({\n    badge: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object]),\n    root: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types7.default.shape({\n    badge: import_prop_types7.default.elementType,\n    root: import_prop_types7.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Button/Button.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React15 = __toESM(require_react());\nvar import_prop_types8 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Button/buttonClasses.js\nfunction getButtonUtilityClass(slot) {\n  return generateUtilityClass(\"MuiButton\", slot);\n}\nvar buttonClasses = generateUtilityClasses(\"MuiButton\", [\"root\", \"active\", \"disabled\", \"focusVisible\"]);\n\n// node_modules/@mui/base/useButton/useButton.js\ninit_extends();\nvar React14 = __toESM(require_react());\ninit_esm();\nfunction useButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    href,\n    rootRef: externalRef,\n    tabIndex,\n    to,\n    type\n  } = parameters;\n  const buttonRef = React14.useRef();\n  const [active, setActive] = React14.useState(false);\n  const {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React14.useState(false);\n  if (disabled && !focusableWhenDisabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  React14.useEffect(() => {\n    isFocusVisibleRef.current = focusVisible;\n  }, [focusVisible, isFocusVisibleRef]);\n  const [hostElementName, setHostElementName] = React14.useState(\"\");\n  const createHandleMouseLeave = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous;\n    if (focusVisible) {\n      event.preventDefault();\n    }\n    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);\n  };\n  const createHandleBlur = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n  };\n  const createHandleFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu2;\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      var _otherHandlers$onFocu;\n      setFocusVisible(true);\n      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n    }\n    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);\n  };\n  const isNativeButton = () => {\n    const button = buttonRef.current;\n    return hostElementName === \"BUTTON\" || hostElementName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(button == null ? void 0 : button.type) || hostElementName === \"A\" && (button == null ? void 0 : button.href);\n  };\n  const createHandleClick = (otherHandlers) => (event) => {\n    if (!disabled) {\n      var _otherHandlers$onClic;\n      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    }\n  };\n  const createHandleMouseDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onMous2;\n    if (!disabled) {\n      setActive(true);\n      document.addEventListener(\"mouseup\", () => {\n        setActive(false);\n      }, {\n        once: true\n      });\n    }\n    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);\n  };\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === \" \") {\n      event.preventDefault();\n    }\n    if (event.target === event.currentTarget && event.key === \" \" && !disabled) {\n      setActive(true);\n    }\n    if (event.target === event.currentTarget && !isNativeButton() && event.key === \"Enter\" && !disabled) {\n      var _otherHandlers$onClic2;\n      (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);\n      event.preventDefault();\n    }\n  };\n  const createHandleKeyUp = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyU;\n    if (event.target === event.currentTarget) {\n      setActive(false);\n    }\n    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === \" \" && !event.defaultMuiPrevented) {\n      var _otherHandlers$onClic3;\n      (_otherHandlers$onClic3 = otherHandlers.onClick) == null || _otherHandlers$onClic3.call(otherHandlers, event);\n    }\n  };\n  const updateHostElementName = React14.useCallback((instance) => {\n    var _instance$tagName;\n    setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : \"\");\n  }, []);\n  const handleRef = useForkRef(updateHostElementName, externalRef, focusVisibleRef, buttonRef);\n  const buttonProps = {};\n  if (tabIndex !== void 0) {\n    buttonProps.tabIndex = tabIndex;\n  }\n  if (hostElementName === \"BUTTON\") {\n    buttonProps.type = type != null ? type : \"button\";\n    if (focusableWhenDisabled) {\n      buttonProps[\"aria-disabled\"] = disabled;\n    } else {\n      buttonProps.disabled = disabled;\n    }\n  } else if (hostElementName !== \"\") {\n    if (!href && !to) {\n      buttonProps.role = \"button\";\n      buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;\n    }\n    if (disabled) {\n      buttonProps[\"aria-disabled\"] = disabled;\n      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;\n    }\n  }\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    const props = _extends({\n      type\n    }, externalEventHandlers, buttonProps, externalProps, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onClick: createHandleClick(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers),\n      onKeyUp: createHandleKeyUp(externalEventHandlers),\n      onMouseDown: createHandleMouseDown(externalEventHandlers),\n      onMouseLeave: createHandleMouseLeave(externalEventHandlers),\n      ref: handleRef\n    });\n    delete props.onFocusVisible;\n    return props;\n  };\n  return {\n    getRootProps,\n    focusVisible,\n    setFocusVisible,\n    active,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/Button/Button.js\nvar import_jsx_runtime12 = __toESM(require_jsx_runtime());\nvar _excluded5 = [\"action\", \"children\", \"disabled\", \"focusableWhenDisabled\", \"onFocusVisible\", \"slotProps\", \"slots\"];\nvar useUtilityClasses3 = (ownerState) => {\n  const {\n    active,\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focusVisible && \"focusVisible\", active && \"active\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\nvar Button = React15.forwardRef(function Button2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    action,\n    children,\n    focusableWhenDisabled = false,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);\n  const buttonRef = React15.useRef();\n  const {\n    active,\n    focusVisible,\n    setFocusVisible,\n    getRootProps\n  } = useButton(_extends({}, props, {\n    focusableWhenDisabled\n  }));\n  React15.useImperativeHandle(action, () => ({\n    focusVisible: () => {\n      setFocusVisible(true);\n      buttonRef.current.focus();\n    }\n  }), [setFocusVisible]);\n  const ownerState = _extends({}, props, {\n    active,\n    focusableWhenDisabled,\n    focusVisible\n  });\n  const classes = useUtilityClasses3(ownerState);\n  const defaultElement = other.href || other.to ? \"a\" : \"button\";\n  const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime12.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n});\ntrue ? Button.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.shape({\n    current: import_prop_types8.default.shape({\n      focusVisible: import_prop_types8.default.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types8.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types8.default.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types8.default.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: import_prop_types8.default.bool,\n  /**\n   * @ignore\n   */\n  href: import_prop_types8.default.string,\n  /**\n   * @ignore\n   */\n  onFocusVisible: import_prop_types8.default.func,\n  /**\n   * The props used for each slot inside the Button.\n   * @default {}\n   */\n  slotProps: import_prop_types8.default.shape({\n    root: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types8.default.shape({\n    root: import_prop_types8.default.elementType\n  }),\n  /**\n   * @ignore\n   */\n  to: import_prop_types8.default.string\n} : void 0;\n\n// node_modules/@mui/base/index.js\ninit_composeClasses();\n\n// node_modules/@mui/base/Dropdown/Dropdown.js\nvar React19 = __toESM(require_react());\nvar import_prop_types9 = __toESM(require_prop_types());\ninit_esm();\n\n// node_modules/@mui/base/useDropdown/DropdownContext.js\nvar React16 = __toESM(require_react());\nvar DropdownContext = React16.createContext(null);\n\n// node_modules/@mui/base/useDropdown/useDropdown.js\nvar React18 = __toESM(require_react());\n\n// node_modules/@mui/base/utils/useControllableReducer.js\ninit_extends();\nvar React17 = __toESM(require_react());\nfunction areEqual(a, b) {\n  return a === b;\n}\nvar EMPTY_OBJECT = {};\nvar NOOP = () => {\n};\nfunction getControlledState(internalState, controlledProps) {\n  const augmentedState = _extends({}, internalState);\n  Object.keys(controlledProps).forEach((key) => {\n    if (controlledProps[key] !== void 0) {\n      augmentedState[key] = controlledProps[key];\n    }\n  });\n  return augmentedState;\n}\nfunction useStateChangeDetection(parameters) {\n  const {\n    nextState,\n    initialState,\n    stateComparers,\n    onStateChange,\n    controlledProps,\n    lastActionRef\n  } = parameters;\n  const internalPreviousStateRef = React17.useRef(initialState);\n  React17.useEffect(() => {\n    if (lastActionRef.current === null) {\n      return;\n    }\n    const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);\n    Object.keys(nextState).forEach((key) => {\n      var _stateComparers$key;\n      const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;\n      const nextStateItem = nextState[key];\n      const previousStateItem = previousState[key];\n      if (previousStateItem == null && nextStateItem != null || previousStateItem != null && nextStateItem == null || previousStateItem != null && nextStateItem != null && !stateComparer(nextStateItem, previousStateItem)) {\n        var _event, _type;\n        onStateChange == null || onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : \"\", nextState);\n      }\n    });\n    internalPreviousStateRef.current = nextState;\n    lastActionRef.current = null;\n  }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);\n}\nfunction useControllableReducer(parameters) {\n  const lastActionRef = React17.useRef(null);\n  const {\n    reducer,\n    initialState,\n    controlledProps = EMPTY_OBJECT,\n    stateComparers = EMPTY_OBJECT,\n    onStateChange = NOOP,\n    actionContext\n  } = parameters;\n  const reducerWithControlledState = React17.useCallback((state, action) => {\n    lastActionRef.current = action;\n    const controlledState = getControlledState(state, controlledProps);\n    const newState = reducer(controlledState, action);\n    return newState;\n  }, [controlledProps, reducer]);\n  const [nextState, dispatch] = React17.useReducer(reducerWithControlledState, initialState);\n  const dispatchWithContext = React17.useCallback((action) => {\n    dispatch(_extends({}, action, {\n      context: actionContext\n    }));\n  }, [actionContext]);\n  useStateChangeDetection({\n    nextState,\n    initialState,\n    stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,\n    onStateChange: onStateChange != null ? onStateChange : NOOP,\n    controlledProps,\n    lastActionRef\n  });\n  return [getControlledState(nextState, controlledProps), dispatchWithContext];\n}\n\n// node_modules/@mui/base/useDropdown/useDropdown.types.js\nvar DropdownActionTypes = {\n  blur: \"dropdown:blur\",\n  escapeKeyDown: \"dropdown:escapeKeyDown\",\n  toggle: \"dropdown:toggle\",\n  open: \"dropdown:open\",\n  close: \"dropdown:close\"\n};\n\n// node_modules/@mui/base/useDropdown/dropdownReducer.js\nfunction dropdownReducer(state, action) {\n  switch (action.type) {\n    case DropdownActionTypes.blur:\n      return {\n        open: false\n      };\n    case DropdownActionTypes.escapeKeyDown:\n      return {\n        open: false\n      };\n    case DropdownActionTypes.toggle:\n      return {\n        open: !state.open\n      };\n    case DropdownActionTypes.open:\n      return {\n        open: true\n      };\n    case DropdownActionTypes.close:\n      return {\n        open: false\n      };\n    default:\n      throw new Error(`Unhandled action`);\n  }\n}\n\n// node_modules/@mui/base/useDropdown/useDropdown.js\nfunction useDropdown(parameters = {}) {\n  const {\n    defaultOpen,\n    onOpenChange,\n    open: openProp\n  } = parameters;\n  const [popupId, setPopupId] = React18.useState(\"\");\n  const [triggerElement, setTriggerElement] = React18.useState(null);\n  const lastActionType = React18.useRef(null);\n  const handleStateChange = React18.useCallback((event, field, value, reason) => {\n    if (field === \"open\") {\n      onOpenChange == null || onOpenChange(event, value);\n    }\n    lastActionType.current = reason;\n  }, [onOpenChange]);\n  const controlledProps = React18.useMemo(() => openProp !== void 0 ? {\n    open: openProp\n  } : {}, [openProp]);\n  const [state, dispatch] = useControllableReducer({\n    controlledProps,\n    initialState: defaultOpen ? {\n      open: true\n    } : {\n      open: false\n    },\n    onStateChange: handleStateChange,\n    reducer: dropdownReducer\n  });\n  React18.useEffect(() => {\n    if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {\n      triggerElement == null || triggerElement.focus();\n    }\n  }, [state.open, triggerElement]);\n  const contextValue = {\n    state,\n    dispatch,\n    popupId,\n    registerPopup: setPopupId,\n    registerTrigger: setTriggerElement,\n    triggerElement\n  };\n  return {\n    contextValue,\n    open: state.open\n  };\n}\n\n// node_modules/@mui/base/Dropdown/Dropdown.js\nvar import_jsx_runtime13 = __toESM(require_jsx_runtime());\nfunction Dropdown(props) {\n  const {\n    children,\n    open,\n    defaultOpen,\n    onOpenChange\n  } = props;\n  const {\n    contextValue\n  } = useDropdown({\n    defaultOpen,\n    onOpenChange,\n    open\n  });\n  return (0, import_jsx_runtime13.jsx)(DropdownContext.Provider, {\n    value: contextValue,\n    children\n  });\n}\ntrue ? Dropdown.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types9.default.node,\n  /**\n   * If `true`, the dropdown is initially open.\n   */\n  defaultOpen: import_prop_types9.default.bool,\n  /**\n   * Callback fired when the component requests to be opened or closed.\n   */\n  onOpenChange: import_prop_types9.default.func,\n  /**\n   * Allows to control whether the dropdown is open.\n   * This is a controlled counterpart of `defaultOpen`.\n   */\n  open: import_prop_types9.default.bool\n} : void 0;\nif (true) {\n  Dropdown[\"propTypes\"] = exactProp(Dropdown.propTypes);\n}\n\n// node_modules/@mui/base/FormControl/FormControl.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React21 = __toESM(require_react());\nvar import_prop_types10 = __toESM(require_prop_types());\ninit_useControlled();\n\n// node_modules/@mui/base/FormControl/FormControlContext.js\nvar React20 = __toESM(require_react());\nvar FormControlContext = React20.createContext(void 0);\nif (true) {\n  FormControlContext.displayName = \"FormControlContext\";\n}\n\n// node_modules/@mui/base/FormControl/formControlClasses.js\nfunction getFormControlUtilityClass(slot) {\n  return generateUtilityClass(\"MuiFormControl\", slot);\n}\nvar formControlClasses = generateUtilityClasses(\"MuiFormControl\", [\"root\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n// node_modules/@mui/base/FormControl/FormControl.js\ninit_composeClasses();\nvar import_jsx_runtime14 = __toESM(require_jsx_runtime());\nvar _excluded6 = [\"defaultValue\", \"children\", \"disabled\", \"error\", \"onChange\", \"required\", \"slotProps\", \"slots\", \"value\"];\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== \"\";\n}\nfunction useUtilityClasses4(ownerState) {\n  const {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focused && \"focused\", error && \"error\", filled && \"filled\", required && \"required\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getFormControlUtilityClass));\n}\nvar FormControl = React21.forwardRef(function FormControl2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    defaultValue,\n    children,\n    disabled = false,\n    error = false,\n    onChange,\n    required = false,\n    slotProps = {},\n    slots = {},\n    value: incomingValue\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);\n  const [value, setValue] = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: \"FormControl\",\n    state: \"value\"\n  });\n  const filled = hasValue(value);\n  const [focusedState, setFocused] = React21.useState(false);\n  const focused = focusedState && !disabled;\n  React21.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n  const childContext = React21.useMemo(() => {\n    return {\n      disabled,\n      error,\n      filled,\n      focused,\n      onBlur: () => {\n        setFocused(false);\n      },\n      onChange: (event) => {\n        setValue(event.target.value);\n        onChange == null || onChange(event);\n      },\n      onFocus: () => {\n        setFocused(true);\n      },\n      required,\n      value: value != null ? value : \"\"\n    };\n  }, [disabled, error, filled, focused, onChange, required, setValue, value]);\n  const classes = useUtilityClasses4(ownerState);\n  const renderChildren = () => {\n    if (typeof children === \"function\") {\n      return children(childContext);\n    }\n    return children;\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      children: renderChildren()\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime14.jsx)(FormControlContext.Provider, {\n    value: childContext,\n    children: (0, import_jsx_runtime14.jsx)(Root, _extends({}, rootProps))\n  });\n});\ntrue ? FormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types10.default.oneOfType([import_prop_types10.default.node, import_prop_types10.default.func]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types10.default.string,\n  /**\n   * @ignore\n   */\n  defaultValue: import_prop_types10.default.any,\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: import_prop_types10.default.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: import_prop_types10.default.bool,\n  /**\n   * Callback fired when the form element's value is modified.\n   */\n  onChange: import_prop_types10.default.func,\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: import_prop_types10.default.bool,\n  /**\n   * The props used for each slot inside the FormControl.\n   * @default {}\n   */\n  slotProps: import_prop_types10.default.shape({\n    root: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object])\n  }),\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types10.default.shape({\n    root: import_prop_types10.default.elementType\n  }),\n  /**\n   * The value of the form element.\n   */\n  value: import_prop_types10.default.any\n} : void 0;\n\n// node_modules/@mui/base/FormControl/useFormControlContext.js\nvar React22 = __toESM(require_react());\nfunction useFormControlContext() {\n  return React22.useContext(FormControlContext);\n}\n\n// node_modules/@mui/base/Input/Input.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React24 = __toESM(require_react());\nvar import_prop_types11 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/Input/inputClasses.js\nfunction getInputUtilityClass(slot) {\n  return generateUtilityClass(\"MuiInput\", slot);\n}\nvar inputClasses = generateUtilityClasses(\"MuiInput\", [\"root\", \"formControl\", \"focused\", \"disabled\", \"error\", \"multiline\", \"input\", \"inputMultiline\", \"inputTypeSearch\", \"adornedStart\", \"adornedEnd\"]);\n\n// node_modules/@mui/base/useInput/useInput.js\ninit_extends();\ninit_esm();\nvar React23 = __toESM(require_react());\ninit_esm();\nfunction useInput(parameters = {}) {\n  const {\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onChange,\n    onFocus,\n    required: requiredProp = false,\n    value: valueProp,\n    inputRef: inputRefProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  let defaultValue;\n  let disabled;\n  let error;\n  let required;\n  let value;\n  if (formControlContext) {\n    var _formControlContext$d, _formControlContext$e, _formControlContext$r;\n    defaultValue = void 0;\n    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;\n    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;\n    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;\n    value = formControlContext.value;\n    if (true) {\n      const definedLocalProps = [\"defaultValue\", \"disabled\", \"error\", \"required\", \"value\"].filter((prop) => parameters[prop] !== void 0);\n      if (definedLocalProps.length > 0) {\n        console.warn([\"MUI: You have set props on an input that is inside a FormControl.\", \"Set these props on a FormControl instead. Otherwise they will be ignored.\", `Ignored props: ${definedLocalProps.join(\", \")}`].join(\"\\n\"));\n      }\n    }\n  } else {\n    defaultValue = defaultValueProp;\n    disabled = disabledProp;\n    error = errorProp;\n    required = requiredProp;\n    value = valueProp;\n  }\n  const {\n    current: isControlled\n  } = React23.useRef(value != null);\n  const handleInputRefWarning = React23.useCallback((instance) => {\n    if (true) {\n      if (instance && instance.nodeName !== \"INPUT\" && !instance.focus) {\n        console.error([\"MUI: You have provided a `slots.input` to the input component\", \"that does not correctly handle the `ref` prop.\", \"Make sure the `ref` prop is called with a HTMLInputElement.\"].join(\"\\n\"));\n      }\n    }\n  }, []);\n  const inputRef = React23.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const [focused, setFocused] = React23.useState(false);\n  React23.useEffect(() => {\n    if (!formControlContext && disabled && focused) {\n      setFocused(false);\n      onBlur == null || onBlur();\n    }\n  }, [formControlContext, disabled, focused, onBlur]);\n  const handleFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu;\n    if (formControlContext != null && formControlContext.disabled) {\n      event.stopPropagation();\n      return;\n    }\n    (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n    if (formControlContext && formControlContext.onFocus) {\n      var _formControlContext$o;\n      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);\n    } else {\n      setFocused(true);\n    }\n  };\n  const handleBlur2 = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    } else {\n      setFocused(false);\n    }\n  };\n  const handleChange = (otherHandlers) => (event, ...args) => {\n    var _formControlContext$o2, _otherHandlers$onChan;\n    if (!isControlled) {\n      const element = event.target || inputRef.current;\n      if (element == null) {\n        throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));\n      }\n    }\n    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);\n    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);\n  };\n  const handleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n  };\n  const getRootProps = (externalProps = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters, [\"onBlur\", \"onChange\", \"onFocus\"]);\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n    return _extends({}, externalProps, externalEventHandlers, {\n      onClick: handleClick(externalEventHandlers)\n    });\n  };\n  const getInputProps = (externalProps = {}) => {\n    const propsEventHandlers = {\n      onBlur,\n      onChange,\n      onFocus\n    };\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n    const mergedEventHandlers = _extends({}, externalEventHandlers, {\n      onBlur: handleBlur2(externalEventHandlers),\n      onChange: handleChange(externalEventHandlers),\n      onFocus: handleFocus(externalEventHandlers)\n    });\n    return _extends({}, mergedEventHandlers, {\n      \"aria-invalid\": error || void 0,\n      defaultValue,\n      value,\n      required,\n      disabled\n    }, externalProps, {\n      ref: handleInputRef\n    }, mergedEventHandlers);\n  };\n  return {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    getInputProps,\n    getRootProps,\n    inputRef: handleInputRef,\n    required,\n    value\n  };\n}\n\n// node_modules/@mui/base/Input/Input.js\ninit_composeClasses();\nvar import_jsx_runtime15 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime16 = __toESM(require_jsx_runtime());\nvar _excluded7 = [\"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"autoComplete\", \"autoFocus\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"id\", \"multiline\", \"name\", \"onClick\", \"onChange\", \"onKeyDown\", \"onKeyUp\", \"onFocus\", \"onBlur\", \"placeholder\", \"readOnly\", \"required\", \"startAdornment\", \"value\", \"type\", \"rows\", \"slotProps\", \"slots\", \"minRows\", \"maxRows\"];\nvar useUtilityClasses5 = (ownerState) => {\n  const {\n    disabled,\n    error,\n    focused,\n    formControlContext,\n    multiline,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", error && \"error\", focused && \"focused\", Boolean(formControlContext) && \"formControl\", multiline && \"multiline\", Boolean(startAdornment) && \"adornedStart\", Boolean(endAdornment) && \"adornedEnd\"],\n    input: [\"input\", disabled && \"disabled\", multiline && \"multiline\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getInputUtilityClass));\n};\nvar Input = React24.forwardRef(function Input2(props, forwardedRef) {\n  var _slots$root, _slots$textarea, _slots$input;\n  const {\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    multiline = false,\n    name,\n    onClick,\n    onChange,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    placeholder,\n    readOnly,\n    required,\n    startAdornment,\n    value,\n    type: typeProp,\n    rows,\n    slotProps = {},\n    slots = {},\n    minRows,\n    maxRows\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);\n  const {\n    getRootProps,\n    getInputProps,\n    focused,\n    formControlContext,\n    error: errorState,\n    disabled: disabledState\n  } = useInput({\n    disabled,\n    defaultValue,\n    error,\n    onBlur,\n    onClick,\n    onChange,\n    onFocus,\n    required,\n    value\n  });\n  const type = !multiline ? typeProp != null ? typeProp : \"text\" : void 0;\n  const ownerState = _extends({}, props, {\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    formControlContext,\n    multiline,\n    type\n  });\n  const classes = useUtilityClasses5(ownerState);\n  const propsToForward = {\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    autoComplete,\n    autoFocus,\n    id,\n    onKeyDown,\n    onKeyUp,\n    name,\n    placeholder,\n    readOnly,\n    type\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const InputComponent = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : \"textarea\" : (_slots$input = slots.input) != null ? _slots$input : \"input\";\n  const inputProps = useSlotProps({\n    elementType: InputComponent,\n    getSlotProps: (otherHandlers) => {\n      return getInputProps(_extends({}, propsToForward, otherHandlers));\n    },\n    externalSlotProps: slotProps.input,\n    additionalProps: _extends({\n      rows: multiline ? rows : void 0\n    }, multiline && !isHostComponent(InputComponent) && {\n      minRows: rows || minRows,\n      maxRows: rows || maxRows\n    }),\n    ownerState,\n    className: classes.input\n  });\n  if (true) {\n    if (multiline) {\n      if (rows) {\n        if (minRows || maxRows) {\n          console.warn(\"MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.\");\n        }\n      }\n    }\n  }\n  return (0, import_jsx_runtime16.jsxs)(Root, _extends({}, rootProps, {\n    children: [startAdornment, (0, import_jsx_runtime15.jsx)(InputComponent, _extends({}, inputProps)), endAdornment]\n  }));\n});\ntrue ? Input.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  \"aria-describedby\": import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  \"aria-label\": import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  \"aria-labelledby\": import_prop_types11.default.string,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: import_prop_types11.default.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: import_prop_types11.default.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types11.default.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types11.default.any,\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: import_prop_types11.default.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: import_prop_types11.default.node,\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error: import_prop_types11.default.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  inputRef: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.shape({\n    current: import_prop_types11.default.object\n  })]),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: import_prop_types11.default.number,\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: import_prop_types11.default.number,\n  /**\n   * If `true`, a `textarea` element is rendered.\n   * @default false\n   */\n  multiline: import_prop_types11.default.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: import_prop_types11.default.string,\n  /**\n   * @ignore\n   */\n  onBlur: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onChange: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onClick: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: import_prop_types11.default.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: import_prop_types11.default.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: import_prop_types11.default.string,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: import_prop_types11.default.bool,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: import_prop_types11.default.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: import_prop_types11.default.number,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: import_prop_types11.default.shape({\n    input: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object]),\n    root: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object])\n  }),\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types11.default.shape({\n    input: import_prop_types11.default.elementType,\n    root: import_prop_types11.default.elementType,\n    textarea: import_prop_types11.default.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: import_prop_types11.default.node,\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type: import_prop_types11.default.oneOf([\"button\", \"checkbox\", \"color\", \"date\", \"datetime-local\", \"email\", \"file\", \"hidden\", \"image\", \"month\", \"number\", \"password\", \"radio\", \"range\", \"reset\", \"search\", \"submit\", \"tel\", \"text\", \"time\", \"url\", \"week\"]),\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: import_prop_types11.default.any\n} : void 0;\n\n// node_modules/@mui/base/Menu/Menu.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React33 = __toESM(require_react());\nvar import_prop_types12 = __toESM(require_prop_types());\ninit_esm();\n\n// node_modules/@mui/base/Menu/menuClasses.js\nfunction getMenuUtilityClass(slot) {\n  return generateUtilityClass(\"MuiMenu\", slot);\n}\nvar menuClasses = generateUtilityClasses(\"MuiMenu\", [\"root\", \"listbox\", \"expanded\"]);\n\n// node_modules/@mui/base/useMenu/useMenu.js\ninit_extends();\nvar React31 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/useMenu/menuReducer.js\ninit_extends();\n\n// node_modules/@mui/base/useList/useList.js\ninit_extends();\nvar React26 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/useList/listActions.types.js\nvar ListActionTypes = {\n  blur: \"list:blur\",\n  focus: \"list:focus\",\n  itemClick: \"list:itemClick\",\n  itemHover: \"list:itemHover\",\n  itemsChange: \"list:itemsChange\",\n  keyDown: \"list:keyDown\",\n  resetHighlight: \"list:resetHighlight\",\n  textNavigation: \"list:textNavigation\",\n  clearSelection: \"list:clearSelection\"\n};\n\n// node_modules/@mui/base/useList/listReducer.js\ninit_extends();\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n  let nextFocus = currentIndex;\n  for (; ; ) {\n    if (!wrapAround && lookupDirection === \"next\" && nextFocus === items.length || !wrapAround && lookupDirection === \"previous\" && nextFocus === -1) {\n      return -1;\n    }\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === \"next\" ? 1 : -1;\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\nfunction moveHighlight(previouslyHighlightedValue, offset3, context) {\n  var _items$nextIndex;\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context;\n  const defaultHighlightedIndex = focusManagement === \"DOM\" ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex((item) => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n  switch (offset3) {\n    case \"reset\":\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n      nextIndexCandidate = 0;\n      lookupDirection = \"next\";\n      wrapAround = false;\n      break;\n    case \"start\":\n      nextIndexCandidate = 0;\n      lookupDirection = \"next\";\n      wrapAround = false;\n      break;\n    case \"end\":\n      nextIndexCandidate = maxIndex;\n      lookupDirection = \"previous\";\n      wrapAround = false;\n      break;\n    default: {\n      const newIndex = previouslyHighlightedIndex + offset3;\n      if (newIndex < 0) {\n        if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset3) > 1) {\n          nextIndexCandidate = 0;\n          lookupDirection = \"next\";\n        } else {\n          nextIndexCandidate = maxIndex;\n          lookupDirection = \"previous\";\n        }\n      } else if (newIndex > maxIndex) {\n        if (!wrapAround || Math.abs(offset3) > 1) {\n          nextIndexCandidate = maxIndex;\n          lookupDirection = \"previous\";\n        } else {\n          nextIndexCandidate = 0;\n          lookupDirection = \"next\";\n        }\n      } else {\n        nextIndexCandidate = newIndex;\n        lookupDirection = offset3 >= 0 ? \"next\" : \"previous\";\n      }\n    }\n  }\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;\n}\nfunction toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === \"none\") {\n    return [];\n  }\n  if (selectionMode === \"single\") {\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n    return [item];\n  }\n  if (selectedValues.some((sv) => itemComparer(sv, item))) {\n    return selectedValues.filter((sv) => !itemComparer(sv, item));\n  }\n  return [...selectedValues, item];\n}\nfunction handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex((i) => itemComparer(item, i));\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  }\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize: pageSize2\n  } = context;\n  switch (key) {\n    case \"Home\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, \"start\", context)\n      });\n    case \"End\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, \"end\", context)\n      });\n    case \"PageUp\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize2, context)\n      });\n    case \"PageDown\":\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize2, context)\n      });\n    case \"ArrowUp\":\n      if (orientation !== \"vertical\") {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n    case \"ArrowDown\":\n      if (orientation !== \"vertical\") {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n    case \"ArrowLeft\": {\n      if (orientation === \"vertical\") {\n        break;\n      }\n      const offset3 = orientation === \"horizontal-ltr\" ? -1 : 1;\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, offset3, context)\n      });\n    }\n    case \"ArrowRight\": {\n      if (orientation === \"vertical\") {\n        break;\n      }\n      const offset3 = orientation === \"horizontal-ltr\" ? 1 : -1;\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, offset3, context)\n      });\n    }\n    case \"Enter\":\n    case \" \":\n      if (state.highlightedValue === null) {\n        return state;\n      }\n      return handleItemSelection(state.highlightedValue, state, context);\n    default:\n      break;\n  }\n  return state;\n}\nfunction handleBlur(state, context) {\n  if (context.focusManagement === \"DOM\") {\n    return state;\n  }\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  var _stringifyItem;\n  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();\n  if (!text || text.length === 0) {\n    return false;\n  }\n  return text.indexOf(searchString) === 0;\n}\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n  for (let index2 = 0; index2 < items.length; index2 += 1) {\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    }\n    nextItem = moveHighlight(nextItem, 1, context);\n  }\n  return state;\n}\nfunction handleItemsChange(items, previousItems, state, context) {\n  var _state$selectedValues;\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n  if (state.highlightedValue != null) {\n    var _items$find;\n    newHighlightedValue = (_items$find = items.find((item) => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;\n  } else if (focusManagement === \"DOM\" && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, \"reset\", context);\n  }\n  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];\n  const newSelectedValues = selectedValues.filter((selectedValue) => items.some((item) => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\nfunction handleResetHighlight(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, \"reset\", context)\n  });\n}\nfunction handleClearSelection(state, context) {\n  return _extends({}, state, {\n    selectedValues: [],\n    highlightedValue: moveHighlight(null, \"reset\", context)\n  });\n}\nfunction listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n    case ListActionTypes.clearSelection:\n      return handleClearSelection(state, context);\n    default:\n      return state;\n  }\n}\n\n// node_modules/@mui/base/utils/useTextNavigation.js\nvar React25 = __toESM(require_react());\nvar TEXT_NAVIGATION_RESET_TIMEOUT = 500;\nfunction useTextNavigation(callback) {\n  const textCriteriaRef = React25.useRef({\n    searchString: \"\",\n    lastTime: null\n  });\n  return React25.useCallback((event) => {\n    if (event.key.length === 1 && event.key !== \" \") {\n      const textCriteria = textCriteriaRef.current;\n      const lowerKey = event.key.toLowerCase();\n      const currentTime = performance.now();\n      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {\n        textCriteria.searchString = lowerKey;\n      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {\n        textCriteria.searchString += lowerKey;\n      }\n      textCriteria.lastTime = currentTime;\n      callback(textCriteria.searchString, event);\n    }\n  }, [callback]);\n}\n\n// node_modules/@mui/base/useList/useList.js\nvar EMPTY_OBJECT2 = {};\nvar NOOP2 = () => {\n};\nvar defaultItemComparer = (optionA, optionB) => optionA === optionB;\nvar defaultIsItemDisabled = () => false;\nvar defaultItemStringifier = (item) => typeof item === \"string\" ? item : String(item);\nvar defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT2,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = \"activeDescendant\",\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP2,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    onItemsChange,\n    orientation = \"vertical\",\n    pageSize: pageSize2 = 5,\n    reducerActionContext = EMPTY_OBJECT2,\n    selectionMode = \"single\",\n    stateReducer: externalReducer\n  } = params;\n  if (true) {\n    if (focusManagement === \"DOM\" && getItemDomElement == null) {\n      throw new Error(\"useList: The `getItemDomElement` prop is required when using the `DOM` focus management.\");\n    }\n    if (focusManagement === \"activeDescendant\" && getItemId == null) {\n      throw new Error(\"useList: The `getItemId` prop is required when using the `activeDescendant` focus management.\");\n    }\n  }\n  const listRef = React26.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React26.useCallback((event, value, reason) => {\n    onHighlightChange == null || onHighlightChange(event, value, reason);\n    if (focusManagement === \"DOM\" && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null || _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React26.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n  const handleStateChange = React26.useCallback((event, field, value, reason, state2) => {\n    onStateChange == null || onStateChange(event, field, value, reason, state2);\n    switch (field) {\n      case \"highlightedValue\":\n        handleHighlightChange(event, value, reason);\n        break;\n      case \"selectedValues\":\n        onChange == null || onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n  const listActionContext = React26.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize: pageSize2,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize2, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : listReducer;\n  const actionContext = React26.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation2 = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n  const previousItems = React26.useRef([]);\n  React26.useEffect(() => {\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange == null || onItemsChange(items);\n  }, [items, itemComparer, dispatch, onItemsChange]);\n  const createHandleKeyDown = (externalHandlers) => (event) => {\n    var _externalHandlers$onK;\n    (_externalHandlers$onK = externalHandlers.onKeyDown) == null || _externalHandlers$onK.call(externalHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = [\"Home\", \"End\", \"PageUp\", \"PageDown\"];\n    if (orientation === \"vertical\") {\n      keysToPreventDefault.push(\"ArrowUp\", \"ArrowDown\");\n    } else {\n      keysToPreventDefault.push(\"ArrowLeft\", \"ArrowRight\");\n    }\n    if (focusManagement === \"activeDescendant\") {\n      keysToPreventDefault.push(\" \", \"Enter\");\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation2(event);\n  };\n  const createHandleBlur = (externalHandlers) => (event) => {\n    var _externalHandlers$onB, _listRef$current;\n    (_externalHandlers$onB = externalHandlers.onBlur) == null || _externalHandlers$onB.call(externalHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, {\n      \"aria-activedescendant\": focusManagement === \"activeDescendant\" && highlightedValue != null ? getItemId(highlightedValue) : void 0,\n      tabIndex: focusManagement === \"DOM\" ? -1 : 0,\n      ref: handleRef\n    }, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers)\n    });\n  };\n  const getItemState = React26.useCallback((item) => {\n    const selected = (selectedValues != null ? selectedValues : []).some((value) => value != null && itemComparer(item, value));\n    const highlighted = highlightedValue != null && itemComparer(item, highlightedValue);\n    const focusable = focusManagement === \"DOM\";\n    return {\n      focusable,\n      highlighted,\n      selected\n    };\n  }, [itemComparer, selectedValues, highlightedValue, focusManagement]);\n  const contextValue = React26.useMemo(() => ({\n    dispatch,\n    getItemState\n  }), [dispatch, getItemState]);\n  React26.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\n\n// node_modules/@mui/base/useList/useListItem.js\ninit_extends();\nvar React28 = __toESM(require_react());\n\n// node_modules/@mui/base/useList/ListContext.js\nvar React27 = __toESM(require_react());\nvar ListContext = React27.createContext(null);\nif (true) {\n  ListContext.displayName = \"ListContext\";\n}\n\n// node_modules/@mui/base/useList/useListItem.js\nfunction useListItem(parameters) {\n  const {\n    handlePointerOverEvents = false,\n    item\n  } = parameters;\n  const listContext = React28.useContext(ListContext);\n  if (!listContext) {\n    throw new Error(\"useListItem must be used within a ListProvider\");\n  }\n  const {\n    dispatch,\n    getItemState\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(item);\n  const createHandleClick = React28.useCallback((externalHandlers) => (event) => {\n    var _externalHandlers$onC;\n    (_externalHandlers$onC = externalHandlers.onClick) == null || _externalHandlers$onC.call(externalHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (true) {\n      if (item === void 0) {\n        throw new Error([\"MUI: The `item` provided to useListItem() is undefined.\", \"This should happen only during server-side rendering under React 17.\"].join(\"\\n\"));\n      }\n    }\n    dispatch({\n      type: ListActionTypes.itemClick,\n      item,\n      event\n    });\n  }, [dispatch, item]);\n  const createHandlePointerOver = React28.useCallback((externalHandlers) => (event) => {\n    var _externalHandlers$onM;\n    (_externalHandlers$onM = externalHandlers.onMouseOver) == null || _externalHandlers$onM.call(externalHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (true) {\n      if (item === void 0) {\n        throw new Error([\"MUI: The `item` provided to useListItem() is undefined.\", \"This should happen only during server-side rendering under React 17.\"].join(\"\\n\"));\n      }\n    }\n    dispatch({\n      type: ListActionTypes.itemHover,\n      item,\n      event\n    });\n  }, [dispatch, item]);\n  let tabIndex;\n  if (focusable) {\n    tabIndex = highlighted ? 0 : -1;\n  }\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, {\n      onClick: createHandleClick(externalEventHandlers),\n      onPointerOver: handlePointerOverEvents ? createHandlePointerOver(externalEventHandlers) : void 0,\n      tabIndex\n    });\n  };\n  return {\n    getRootProps,\n    highlighted,\n    selected\n  };\n}\n\n// node_modules/@mui/base/useMenu/menuReducer.js\nfunction menuReducer(state, action) {\n  if (action.type === ListActionTypes.itemHover) {\n    return state;\n  }\n  const newState = listReducer(state, action);\n  if (newState.highlightedValue === null && action.context.items.length > 0) {\n    return _extends({}, newState, {\n      highlightedValue: action.context.items[0]\n    });\n  }\n  if (action.type === ListActionTypes.keyDown) {\n    if (action.event.key === \"Escape\") {\n      return _extends({}, newState, {\n        open: false\n      });\n    }\n  }\n  if (action.type === ListActionTypes.blur) {\n    var _action$context$listb;\n    if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {\n      var _action$context$listb2, _action$event$related;\n      const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute(\"id\");\n      const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute(\"aria-controls\");\n      if (listboxId && controlledBy && listboxId === controlledBy) {\n        return newState;\n      }\n      return _extends({}, newState, {\n        open: false,\n        highlightedValue: action.context.items[0]\n      });\n    }\n  }\n  return newState;\n}\n\n// node_modules/@mui/base/useCompound/useCompoundParent.js\nvar React29 = __toESM(require_react());\nvar CompoundComponentContext = React29.createContext(null);\nCompoundComponentContext.displayName = \"CompoundComponentContext\";\nfunction sortSubitems(subitems) {\n  const subitemsArray = Array.from(subitems.keys()).map((key) => {\n    const subitem = subitems.get(key);\n    return {\n      key,\n      subitem\n    };\n  });\n  subitemsArray.sort((a, b) => {\n    const aNode = a.subitem.ref.current;\n    const bNode = b.subitem.ref.current;\n    if (aNode === null || bNode === null || aNode === bNode) {\n      return 0;\n    }\n    return aNode.compareDocumentPosition(bNode) & Node.DOCUMENT_POSITION_PRECEDING ? 1 : -1;\n  });\n  return new Map(subitemsArray.map((item) => [item.key, item.subitem]));\n}\nfunction useCompoundParent() {\n  const [subitems, setSubitems] = React29.useState(/* @__PURE__ */ new Map());\n  const subitemKeys = React29.useRef(/* @__PURE__ */ new Set());\n  const deregisterItem = React29.useCallback(function deregisterItem2(id) {\n    subitemKeys.current.delete(id);\n    setSubitems((previousState) => {\n      const newState = new Map(previousState);\n      newState.delete(id);\n      return newState;\n    });\n  }, []);\n  const registerItem = React29.useCallback(function registerItem2(id, item) {\n    let providedOrGeneratedId;\n    if (typeof id === \"function\") {\n      providedOrGeneratedId = id(subitemKeys.current);\n    } else {\n      providedOrGeneratedId = id;\n    }\n    subitemKeys.current.add(providedOrGeneratedId);\n    setSubitems((previousState) => {\n      const newState = new Map(previousState);\n      newState.set(providedOrGeneratedId, item);\n      return newState;\n    });\n    return {\n      id: providedOrGeneratedId,\n      deregister: () => deregisterItem(providedOrGeneratedId)\n    };\n  }, [deregisterItem]);\n  const sortedSubitems = React29.useMemo(() => sortSubitems(subitems), [subitems]);\n  const getItemIndex = React29.useCallback(function getItemIndex2(id) {\n    return Array.from(sortedSubitems.keys()).indexOf(id);\n  }, [sortedSubitems]);\n  const contextValue = React29.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount: subitems.size\n  }), [getItemIndex, registerItem, subitems.size]);\n  return {\n    contextValue,\n    subitems: sortedSubitems\n  };\n}\n\n// node_modules/@mui/base/useCompound/useCompoundItem.js\nvar React30 = __toESM(require_react());\ninit_esm();\nfunction useCompoundItem(id, itemMetadata) {\n  const context = React30.useContext(CompoundComponentContext);\n  if (context === null) {\n    throw new Error(\"useCompoundItem must be used within a useCompoundParent\");\n  }\n  const {\n    registerItem\n  } = context;\n  const [registeredId, setRegisteredId] = React30.useState(typeof id === \"function\" ? void 0 : id);\n  useEnhancedEffect_default(() => {\n    const {\n      id: returnedId,\n      deregister\n    } = registerItem(id, itemMetadata);\n    setRegisteredId(returnedId);\n    return deregister;\n  }, [registerItem, itemMetadata, id]);\n  return {\n    id: registeredId,\n    index: registeredId !== void 0 ? context.getItemIndex(registeredId) : -1,\n    totalItemCount: context.totalSubitemCount\n  };\n}\n\n// node_modules/@mui/base/utils/combineHooksSlotProps.js\ninit_extends();\nfunction combineHooksSlotProps(getFirstProps, getSecondProps) {\n  return function getCombinedProps(external = {}) {\n    const firstResult = _extends({}, external, getFirstProps(external));\n    const result = _extends({}, firstResult, getSecondProps(firstResult));\n    return result;\n  };\n}\n\n// node_modules/@mui/base/useMenu/useMenu.js\nvar FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {\n  },\n  popupId: \"\",\n  registerPopup: () => {\n  },\n  registerTrigger: () => {\n  },\n  state: {\n    open: true\n  },\n  triggerElement: null\n};\nfunction useMenu(parameters = {}) {\n  var _useId, _React$useContext;\n  const {\n    listboxRef: listboxRefProp,\n    onItemsChange,\n    id: idParam,\n    disabledItemsFocusable = true,\n    disableListWrap = false\n    // autoFocus = true,\n  } = parameters;\n  const rootRef = React31.useRef(null);\n  const handleRef = useForkRef(rootRef, listboxRefProp);\n  const listboxId = (_useId = useId(idParam)) != null ? _useId : \"\";\n  const {\n    state: {\n      open\n    },\n    dispatch: menuDispatch,\n    triggerElement,\n    registerPopup\n  } = (_React$useContext = React31.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT;\n  const isInitiallyOpen = React31.useRef(open);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React31.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React31.useCallback((itemId) => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const isItemDisabled = React31.useCallback((id) => {\n    var _subitems$get2;\n    return (subitems == null || (_subitems$get2 = subitems.get(id)) == null ? void 0 : _subitems$get2.disabled) || false;\n  }, [subitems]);\n  const getItemAsString = React31.useCallback((id) => {\n    var _subitems$get3, _subitems$get4;\n    return ((_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) == null || (_subitems$get4 = _subitems$get4.ref.current) == null ? void 0 : _subitems$get4.innerText);\n  }, [subitems]);\n  const reducerActionContext = React31.useMemo(() => ({\n    listboxRef: rootRef\n  }), [rootRef]);\n  const {\n    dispatch: listDispatch,\n    getRootProps: getListRootProps,\n    contextValue: listContextValue,\n    state: {\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement: \"DOM\",\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null\n    }),\n    isItemDisabled,\n    items: subitemKeys,\n    getItemAsString,\n    rootRef: handleRef,\n    onItemsChange,\n    reducerActionContext,\n    selectionMode: \"none\",\n    stateReducer: menuReducer\n  });\n  useEnhancedEffect_default(() => {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  React31.useEffect(() => {\n    if (open && highlightedValue === subitemKeys[0] && !isInitiallyOpen.current) {\n      var _subitems$get5;\n      (_subitems$get5 = subitems.get(subitemKeys[0])) == null || (_subitems$get5 = _subitems$get5.ref) == null || (_subitems$get5 = _subitems$get5.current) == null || _subitems$get5.focus();\n    }\n  }, [open, highlightedValue, subitems, subitemKeys]);\n  React31.useEffect(() => {\n    var _rootRef$current;\n    if ((_rootRef$current = rootRef.current) != null && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {\n      var _subitems$get6;\n      subitems == null || (_subitems$get6 = subitems.get(highlightedValue)) == null || (_subitems$get6 = _subitems$get6.ref.current) == null || _subitems$get6.focus();\n    }\n  }, [highlightedValue, subitems]);\n  const createHandleBlur = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur, _rootRef$current2;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_rootRef$current2 = rootRef.current) != null && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n      return;\n    }\n    menuDispatch({\n      type: DropdownActionTypes.blur,\n      event\n    });\n  };\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === \"Escape\") {\n      menuDispatch({\n        type: DropdownActionTypes.escapeKeyDown,\n        event\n      });\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createHandleBlur(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {\n      id: listboxId,\n      role: \"menu\"\n    });\n  };\n  React31.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: _extends({}, compoundComponentContextValue, listContextValue),\n    dispatch: listDispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open,\n    triggerElement\n  };\n}\n\n// node_modules/@mui/base/useMenu/MenuProvider.js\nvar React32 = __toESM(require_react());\nvar import_jsx_runtime17 = __toESM(require_jsx_runtime());\nfunction MenuProvider(props) {\n  const {\n    value,\n    children\n  } = props;\n  const {\n    dispatch,\n    getItemIndex,\n    getItemState,\n    registerItem,\n    totalSubitemCount\n  } = value;\n  const listContextValue = React32.useMemo(() => ({\n    dispatch,\n    getItemState,\n    getItemIndex\n  }), [dispatch, getItemIndex, getItemState]);\n  const compoundComponentContextValue = React32.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  return (0, import_jsx_runtime17.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime17.jsx)(ListContext.Provider, {\n      value: listContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/Menu/Menu.js\ninit_composeClasses();\nvar import_jsx_runtime18 = __toESM(require_jsx_runtime());\nvar _excluded8 = [\"actions\", \"anchor\", \"children\", \"onItemsChange\", \"slotProps\", \"slots\"];\nfunction useUtilityClasses6(ownerState) {\n  const {\n    open\n  } = ownerState;\n  const slots = {\n    root: [\"root\", open && \"expanded\"],\n    listbox: [\"listbox\", open && \"expanded\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuUtilityClass));\n}\nvar Menu = React33.forwardRef(function Menu2(props, forwardedRef) {\n  var _slots$root, _slots$listbox;\n  const {\n    actions,\n    anchor: anchorProp,\n    children,\n    onItemsChange,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);\n  const {\n    contextValue,\n    getListboxProps,\n    dispatch,\n    open,\n    triggerElement\n  } = useMenu({\n    onItemsChange\n  });\n  const anchor = anchorProp != null ? anchorProp : triggerElement;\n  React33.useImperativeHandle(actions, () => ({\n    dispatch,\n    resetHighlight: () => dispatch({\n      type: ListActionTypes.resetHighlight,\n      event: null\n    })\n  }), [dispatch]);\n  const ownerState = _extends({}, props, {\n    open\n  });\n  const classes = useUtilityClasses6(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      role: void 0\n    },\n    className: classes.root,\n    ownerState\n  });\n  const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : \"ul\";\n  const listboxProps = useSlotProps({\n    elementType: Listbox,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    className: classes.listbox,\n    ownerState\n  });\n  if (open === true && anchor == null) {\n    return (0, import_jsx_runtime18.jsx)(Root, _extends({}, rootProps, {\n      children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {\n        children: (0, import_jsx_runtime18.jsx)(MenuProvider, {\n          value: contextValue,\n          children\n        })\n      }))\n    }));\n  }\n  return (0, import_jsx_runtime18.jsx)(Popper, _extends({}, rootProps, {\n    open,\n    anchorEl: anchor,\n    slots: {\n      root: Root\n    },\n    children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {\n      children: (0, import_jsx_runtime18.jsx)(MenuProvider, {\n        value: contextValue,\n        children\n      })\n    }))\n  }));\n});\ntrue ? Menu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref with imperative actions that can be performed on the menu.\n   */\n  actions: refType_default,\n  /**\n   * The element based on which the menu is positioned.\n   */\n  anchor: import_prop_types12.default.oneOfType([HTMLElementType, import_prop_types12.default.object, import_prop_types12.default.func]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types12.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types12.default.string,\n  /**\n   * Function called when the items displayed in the menu change.\n   */\n  onItemsChange: import_prop_types12.default.func,\n  /**\n   * The props used for each slot inside the Menu.\n   * @default {}\n   */\n  slotProps: import_prop_types12.default.shape({\n    listbox: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object]),\n    root: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Menu.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types12.default.shape({\n    listbox: import_prop_types12.default.elementType,\n    root: import_prop_types12.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/MenuButton/MenuButton.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React35 = __toESM(require_react());\nvar import_prop_types13 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/useMenuButton/useMenuButton.js\ninit_extends();\nvar React34 = __toESM(require_react());\ninit_esm();\nfunction useMenuButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React34.useContext(DropdownContext);\n  if (menuContext === null) {\n    throw new Error(\"useMenuButton: no menu context available.\");\n  }\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n  const createHandleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n  const createHandleKeyDown = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === \"ArrowDown\" || event.key === \"ArrowUp\") {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n  const getOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleClick(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);\n    return _extends({\n      \"aria-haspopup\": \"menu\",\n      \"aria-expanded\": state.open,\n      \"aria-controls\": popupId\n    }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {\n      tabIndex: 0,\n      // this is needed to make the button focused after click in Safari\n      ref: handleRef\n    });\n  };\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/MenuButton/MenuButton.js\ninit_composeClasses();\n\n// node_modules/@mui/base/MenuButton/menuButtonClasses.js\nfunction getMenuButtonUtilityClass(slot) {\n  return generateUtilityClass(\"MuiMenuButton\", slot);\n}\nvar menuButtonClasses = generateUtilityClasses(\"MuiMenuButton\", [\"root\", \"active\", \"disabled\", \"expanded\"]);\n\n// node_modules/@mui/base/MenuButton/MenuButton.js\nvar import_jsx_runtime19 = __toESM(require_jsx_runtime());\nvar _excluded9 = [\"children\", \"disabled\", \"label\", \"slots\", \"slotProps\", \"focusableWhenDisabled\"];\nvar useUtilityClasses7 = (ownerState) => {\n  const {\n    active,\n    disabled,\n    open\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", active && \"active\", open && \"expanded\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuButtonUtilityClass));\n};\nvar MenuButton = React35.forwardRef(function MenuButton2(props, forwardedRef) {\n  const {\n    children,\n    disabled = false,\n    slots = {},\n    slotProps = {},\n    focusableWhenDisabled = false\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);\n  const {\n    getRootProps,\n    open,\n    active\n  } = useMenuButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: forwardedRef\n  });\n  const ownerState = _extends({}, props, {\n    open,\n    active,\n    disabled,\n    focusableWhenDisabled\n  });\n  const classes = useUtilityClasses7(ownerState);\n  const Root = slots.root || \"button\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef,\n      type: \"button\"\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime19.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n});\ntrue ? MenuButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types13.default.node,\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types13.default.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types13.default.bool,\n  /**\n   * If `true`, allows a disabled button to receive focus.\n   * @default false\n   */\n  focusableWhenDisabled: import_prop_types13.default.bool,\n  /**\n   * Label of the button\n   */\n  label: import_prop_types13.default.string,\n  /**\n   * The components used for each slot inside the MenuButton.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slotProps: import_prop_types13.default.shape({\n    root: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object])\n  }),\n  /**\n   * The props used for each slot inside the MenuButton.\n   * @default {}\n   */\n  slots: import_prop_types13.default.shape({\n    root: import_prop_types13.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/MenuItem/MenuItem.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React38 = __toESM(require_react());\nvar import_prop_types14 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/MenuItem/menuItemClasses.js\nfunction getMenuItemUtilityClass(slot) {\n  return generateUtilityClass(\"MuiMenuItem\", slot);\n}\nvar menuItemClasses = generateUtilityClasses(\"MuiMenuItem\", [\"root\", \"disabled\", \"focusVisible\"]);\n\n// node_modules/@mui/base/useMenuItem/useMenuItem.js\ninit_extends();\nvar React36 = __toESM(require_react());\ninit_esm();\nfunction idGenerator(existingKeys) {\n  return `menu-item-${existingKeys.size}`;\n}\nvar FALLBACK_MENU_CONTEXT2 = {\n  dispatch: () => {\n  },\n  popupId: \"\",\n  registerPopup: () => {\n  },\n  registerTrigger: () => {\n  },\n  state: {\n    open: true\n  },\n  triggerElement: null\n};\nfunction useMenuItem(params) {\n  var _React$useContext;\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React36.useRef(null);\n  const itemMetadata = React36.useMemo(() => ({\n    disabled,\n    id: id != null ? id : \"\",\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    dispatch\n  } = (_React$useContext = React36.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT2;\n  const {\n    getRootProps: getListRootProps,\n    highlighted\n  } = useListItem({\n    item: id\n  });\n  const {\n    index: index2,\n    totalItemCount\n  } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(buttonRefHandler, externalRef, itemRef);\n  React36.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n  const createHandleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.close,\n      event\n    });\n  };\n  const getOwnHandlers = (otherHandlers = {}) => _extends({}, otherHandlers, {\n    onClick: createHandleClick(otherHandlers)\n  });\n  function getRootProps(externalProps = {}) {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));\n    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {\n      id,\n      ref: handleRef,\n      role: \"menuitem\"\n    });\n  }\n  if (id === void 0) {\n    return {\n      getRootProps,\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index: index2,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/useMenuItem/useMenuItemContextStabilizer.js\nvar React37 = __toESM(require_react());\ninit_esm();\nfunction useMenuItemContextStabilizer(id) {\n  const listContext = React37.useContext(ListContext);\n  if (!listContext) {\n    throw new Error(\"MenuItem: ListContext was not found.\");\n  }\n  const itemId = useId(id);\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  let itemState;\n  if (itemId != null) {\n    itemState = getItemState(itemId);\n  } else {\n    itemState = {\n      focusable: true,\n      highlighted: false,\n      selected: false\n    };\n  }\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = itemState;\n  const localGetItemState = React37.useCallback((itemValue) => {\n    if (itemValue !== itemId) {\n      throw new Error([\"Base UI MenuItem: Tried to access the state of another MenuItem.\", `itemValue: ${itemValue} | id: ${itemId}`, \"This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization.\"].join(\"/n\"));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, itemId]);\n  const localContextValue = React37.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue,\n    id: itemId\n  };\n}\n\n// node_modules/@mui/base/MenuItem/MenuItem.js\ninit_composeClasses();\nvar import_jsx_runtime20 = __toESM(require_jsx_runtime());\nvar _excluded10 = [\"children\", \"disabled\", \"label\", \"id\", \"slotProps\", \"slots\"];\nfunction useUtilityClasses8(ownerState) {\n  const {\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focusVisible && \"focusVisible\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\nvar InnerMenuItem = React38.memo(React38.forwardRef(function MenuItem(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    disabled: disabledProp = false,\n    label,\n    id,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);\n  const {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted\n  } = useMenuItem({\n    id,\n    disabled: disabledProp,\n    rootRef: forwardedRef,\n    label\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    focusVisible,\n    highlighted\n  });\n  const classes = useUtilityClasses8(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"li\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return (0, import_jsx_runtime20.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n}));\nvar MenuItem2 = React38.forwardRef(function MenuItem3(props, ref) {\n  const {\n    id: idProp\n  } = props;\n  const {\n    contextValue,\n    id\n  } = useMenuItemContextStabilizer(idProp);\n  return (0, import_jsx_runtime20.jsx)(ListContext.Provider, {\n    value: contextValue,\n    children: (0, import_jsx_runtime20.jsx)(InnerMenuItem, _extends({}, props, {\n      id,\n      ref\n    }))\n  });\n});\ntrue ? MenuItem2.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types14.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types14.default.string,\n  /**\n   * If `true`, the menu item will be disabled.\n   * @default false\n   */\n  disabled: import_prop_types14.default.bool,\n  /**\n   * A text representation of the menu item's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: import_prop_types14.default.string,\n  /**\n   * @ignore\n   */\n  onClick: import_prop_types14.default.func,\n  /**\n   * The props used for each slot inside the MenuItem.\n   * @default {}\n   */\n  slotProps: import_prop_types14.default.shape({\n    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])\n  }),\n  /**\n   * The components used for each slot inside the MenuItem.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types14.default.shape({\n    root: import_prop_types14.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Modal/Modal.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React39 = __toESM(require_react());\nvar import_prop_types15 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Modal/modalClasses.js\nfunction getModalUtilityClass(slot) {\n  return generateUtilityClass(\"MuiModal\", slot);\n}\nvar modalClasses = generateUtilityClasses(\"MuiModal\", [\"root\", \"hidden\", \"backdrop\"]);\n\n// node_modules/@mui/base/Modal/Modal.js\nvar import_jsx_runtime21 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime22 = __toESM(require_jsx_runtime());\nvar _excluded11 = [\"children\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"onBackdropClick\", \"onClose\", \"onKeyDown\", \"open\", \"onTransitionEnter\", \"onTransitionExited\", \"slotProps\", \"slots\"];\nvar useUtilityClasses9 = (ownerState) => {\n  const {\n    open,\n    exited\n  } = ownerState;\n  const slots = {\n    root: [\"root\", !open && exited && \"hidden\"],\n    backdrop: [\"backdrop\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));\n};\nvar Modal = React39.forwardRef(function Modal2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    onBackdropClick,\n    open,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);\n  const propsWithDefaults = _extends({}, props, {\n    closeAfterTransition,\n    disableAutoFocus,\n    disableEnforceFocus,\n    disableEscapeKeyDown,\n    disablePortal,\n    disableRestoreFocus,\n    disableScrollLock,\n    hideBackdrop,\n    keepMounted\n  });\n  const {\n    getRootProps,\n    getBackdropProps,\n    getTransitionProps,\n    portalRef,\n    isTopModal,\n    exited,\n    hasTransition\n  } = useModal(_extends({}, propsWithDefaults, {\n    rootRef: forwardedRef\n  }));\n  const ownerState = _extends({}, propsWithDefaults, {\n    exited,\n    hasTransition\n  });\n  const classes = useUtilityClasses9(ownerState);\n  const childProps = {};\n  if (children.props.tabIndex === void 0) {\n    childProps.tabIndex = \"-1\";\n  }\n  if (hasTransition) {\n    const {\n      onEnter,\n      onExited\n    } = getTransitionProps();\n    childProps.onEnter = onEnter;\n    childProps.onExited = onExited;\n  }\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    getSlotProps: getRootProps,\n    className: classes.root,\n    ownerState\n  });\n  const BackdropComponent = slots.backdrop;\n  const backdropProps = useSlotProps({\n    elementType: BackdropComponent,\n    externalSlotProps: slotProps.backdrop,\n    getSlotProps: (otherHandlers) => {\n      return getBackdropProps(_extends({}, otherHandlers, {\n        onClick: (e) => {\n          if (onBackdropClick) {\n            onBackdropClick(e);\n          }\n          if (otherHandlers != null && otherHandlers.onClick) {\n            otherHandlers.onClick(e);\n          }\n        }\n      }));\n    },\n    className: classes.backdrop,\n    ownerState\n  });\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n  return (0, import_jsx_runtime21.jsx)(Portal, {\n    ref: portalRef,\n    container,\n    disablePortal,\n    children: (0, import_jsx_runtime22.jsxs)(Root, _extends({}, rootProps, {\n      children: [!hideBackdrop && BackdropComponent ? (0, import_jsx_runtime21.jsx)(BackdropComponent, _extends({}, backdropProps)) : null, (0, import_jsx_runtime21.jsx)(FocusTrap, {\n        disableEnforceFocus,\n        disableAutoFocus,\n        disableRestoreFocus,\n        isEnabled: isTopModal,\n        open,\n        children: React39.cloneElement(children, childProps)\n      })]\n    }))\n  });\n});\ntrue ? Modal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef_default.isRequired,\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition: import_prop_types15.default.bool,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: import_prop_types15.default.oneOfType([HTMLElementType, import_prop_types15.default.func]),\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: import_prop_types15.default.bool,\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: import_prop_types15.default.bool,\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown: import_prop_types15.default.bool,\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: import_prop_types15.default.bool,\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus: import_prop_types15.default.bool,\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock: import_prop_types15.default.bool,\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop: import_prop_types15.default.bool,\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted: import_prop_types15.default.bool,\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick: import_prop_types15.default.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: import_prop_types15.default.func,\n  /**\n   * A function called when a transition enters.\n   */\n  onTransitionEnter: import_prop_types15.default.func,\n  /**\n   * A function called when a transition has exited.\n   */\n  onTransitionExited: import_prop_types15.default.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: import_prop_types15.default.bool.isRequired,\n  /**\n   * The props used for each slot inside the Modal.\n   * @default {}\n   */\n  slotProps: import_prop_types15.default.shape({\n    backdrop: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object]),\n    root: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Modal.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types15.default.shape({\n    backdrop: import_prop_types15.default.elementType,\n    root: import_prop_types15.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Unstable_NumberInput/NumberInput.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React41 = __toESM(require_react());\nvar import_prop_types16 = __toESM(require_prop_types());\n\n// node_modules/@mui/base/Unstable_NumberInput/numberInputClasses.js\nfunction getNumberInputUtilityClass(slot) {\n  return generateUtilityClass(\"MuiNumberInput\", slot);\n}\nvar numberInputClasses = generateUtilityClasses(\"MuiNumberInput\", [\"root\", \"formControl\", \"focused\", \"disabled\", \"readOnly\", \"error\", \"input\", \"incrementButton\", \"decrementButton\", \"adornedStart\", \"adornedEnd\"]);\n\n// node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js\ninit_extends();\ninit_esm();\nvar React40 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/unstable_useNumberInput/utils.js\nfunction simpleClamp(val, min3 = Number.MIN_SAFE_INTEGER, max3 = Number.MAX_SAFE_INTEGER) {\n  return Math.max(min3, Math.min(val, max3));\n}\nfunction clamp2(val, min3 = Number.MIN_SAFE_INTEGER, max3 = Number.MAX_SAFE_INTEGER, stepProp = NaN) {\n  if (Number.isNaN(stepProp)) {\n    return simpleClamp(val, min3, max3);\n  }\n  const step = stepProp || 1;\n  const remainder = val % step;\n  const positivity = Math.sign(remainder);\n  if (Math.abs(remainder) > step / 2) {\n    return simpleClamp(val + positivity * (step - Math.abs(remainder)), min3, max3);\n  }\n  return simpleClamp(val - positivity * Math.abs(remainder), min3, max3);\n}\nfunction isNumber(val) {\n  return typeof val === \"number\" && !Number.isNaN(val) && Number.isFinite(val);\n}\n\n// node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js\nvar STEP_KEYS = [\"ArrowUp\", \"ArrowDown\", \"PageUp\", \"PageDown\"];\nvar SUPPORTED_KEYS = [...STEP_KEYS, \"Home\", \"End\"];\nfunction parseInput(v) {\n  return v ? String(v.trim()) : String(v);\n}\nfunction useNumberInput(parameters) {\n  const {\n    min: min3,\n    max: max3,\n    step,\n    shiftMultiplier = 10,\n    defaultValue: defaultValueProp,\n    disabled: disabledProp = false,\n    error: errorProp = false,\n    onBlur,\n    onInputChange,\n    onFocus,\n    onChange,\n    required: requiredProp = false,\n    readOnly: readOnlyProp = false,\n    value: valueProp,\n    inputRef: inputRefProp,\n    inputId: inputIdProp\n  } = parameters;\n  const formControlContext = useFormControlContext();\n  const {\n    current: isControlled\n  } = React40.useRef(valueProp != null);\n  const handleInputRefWarning = React40.useCallback((instance) => {\n    if (true) {\n      if (instance && instance.nodeName !== \"INPUT\" && !instance.focus) {\n        console.error([\"MUI: You have provided a `slots.input` to the input component\", \"that does not correctly handle the `ref` prop.\", \"Make sure the `ref` prop is called with a HTMLInputElement.\"].join(\"\\n\"));\n      }\n    }\n  }, []);\n  const inputRef = React40.useRef(null);\n  const handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  const inputId = useId(inputIdProp);\n  const [focused, setFocused] = React40.useState(false);\n  const [value, setValue] = useControlled({\n    controlled: valueProp,\n    default: defaultValueProp,\n    name: \"NumberInput\"\n  });\n  const [dirtyValue, setDirtyValue] = React40.useState(value ? String(value) : void 0);\n  React40.useEffect(() => {\n    if (!formControlContext && disabledProp && focused) {\n      setFocused(false);\n      onBlur == null || onBlur();\n    }\n  }, [formControlContext, disabledProp, focused, onBlur]);\n  const handleFocus = (otherHandlers) => (event) => {\n    var _otherHandlers$onFocu;\n    (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (formControlContext && formControlContext.onFocus) {\n      var _formControlContext$o;\n      formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);\n    }\n    setFocused(true);\n  };\n  const handleValueChange = () => (event, val) => {\n    let newValue;\n    if (val === void 0) {\n      newValue = val;\n      setDirtyValue(\"\");\n    } else {\n      newValue = clamp2(val, min3, max3, step);\n      setDirtyValue(String(newValue));\n    }\n    setValue(newValue);\n    if (isNumber(newValue)) {\n      onChange == null || onChange(event, newValue);\n    } else {\n      onChange == null || onChange(event, void 0);\n    }\n  };\n  const handleInputChange = (otherHandlers) => (event) => {\n    var _formControlContext$o2, _otherHandlers$onInpu;\n    if (!isControlled && event.target === null) {\n      throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \\`slots.input\\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));\n    }\n    formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);\n    (_otherHandlers$onInpu = otherHandlers.onInputChange) == null || _otherHandlers$onInpu.call(otherHandlers, event);\n    const val = parseInput(event.currentTarget.value);\n    if (val === \"\" || val === \"-\") {\n      setDirtyValue(val);\n      setValue(void 0);\n    }\n    if (val.match(/^-?\\d+?$/)) {\n      setDirtyValue(val);\n      setValue(parseInt(val, 10));\n    }\n  };\n  const handleBlur2 = (otherHandlers) => (event) => {\n    var _otherHandlers$onBlur;\n    const val = parseInput(event.currentTarget.value);\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (val === \"\" || val === \"-\") {\n      handleValueChange()(event, void 0);\n    } else {\n      handleValueChange()(event, parseInt(val, 10));\n    }\n    if (formControlContext && formControlContext.onBlur) {\n      formControlContext.onBlur();\n    }\n    setFocused(false);\n  };\n  const handleClick = (otherHandlers) => (event) => {\n    var _otherHandlers$onClic;\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n  };\n  const handleStep = (direction) => (event) => {\n    let newValue;\n    if (isNumber(value)) {\n      const multiplier = event.shiftKey || event.key === \"PageUp\" || event.key === \"PageDown\" ? shiftMultiplier : 1;\n      newValue = {\n        up: value + (step != null ? step : 1) * multiplier,\n        down: value - (step != null ? step : 1) * multiplier\n      }[direction];\n    } else {\n      newValue = {\n        up: min3 != null ? min3 : 0,\n        down: max3 != null ? max3 : 0\n      }[direction];\n    }\n    handleValueChange()(event, newValue);\n  };\n  const handleKeyDown2 = (otherHandlers) => (event) => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (SUPPORTED_KEYS.includes(event.key)) {\n      event.preventDefault();\n    }\n    if (STEP_KEYS.includes(event.key)) {\n      const direction = {\n        ArrowUp: \"up\",\n        ArrowDown: \"down\",\n        PageUp: \"up\",\n        PageDown: \"down\"\n      }[event.key];\n      handleStep(direction)(event);\n    }\n    if (event.key === \"Home\" && isNumber(max3)) {\n      handleValueChange()(event, max3);\n    }\n    if (event.key === \"End\" && isNumber(min3)) {\n      handleValueChange()(event, min3);\n    }\n  };\n  const getRootProps = (externalProps = {}) => {\n    const propsEventHandlers = extractEventHandlers(parameters, [\"onBlur\", \"onInputChange\", \"onFocus\", \"onChange\"]);\n    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n    return _extends({}, externalProps, externalEventHandlers, {\n      onClick: handleClick(externalEventHandlers)\n    });\n  };\n  const getInputProps = (externalProps = {}) => {\n    var _ref;\n    const externalEventHandlers = _extends({\n      onBlur,\n      onFocus\n    }, extractEventHandlers(externalProps, [\"onInputChange\"]));\n    const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {\n      onFocus: handleFocus(externalEventHandlers),\n      onChange: handleInputChange(_extends({}, externalEventHandlers, {\n        onInputChange\n      })),\n      onBlur: handleBlur2(externalEventHandlers),\n      onKeyDown: handleKeyDown2(externalEventHandlers)\n    });\n    const displayValue = (_ref = focused ? dirtyValue : value) != null ? _ref : \"\";\n    return _extends({}, mergedEventHandlers, {\n      type: \"text\",\n      id: inputId,\n      \"aria-invalid\": errorProp || void 0,\n      defaultValue: void 0,\n      ref: handleInputRef,\n      value: displayValue,\n      \"aria-valuenow\": displayValue,\n      \"aria-valuetext\": String(displayValue),\n      \"aria-valuemin\": min3,\n      \"aria-valuemax\": max3,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      spellCheck: \"false\",\n      required: requiredProp,\n      readOnly: readOnlyProp,\n      \"aria-disabled\": disabledProp,\n      disabled: disabledProp\n    });\n  };\n  const handleStepperButtonMouseDown = (event) => {\n    event.preventDefault();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  const stepperButtonCommonProps = {\n    \"aria-controls\": inputId,\n    tabIndex: -1\n  };\n  const isIncrementDisabled = disabledProp || (isNumber(value) ? value >= (max3 != null ? max3 : Number.MAX_SAFE_INTEGER) : false);\n  const getIncrementButtonProps = (externalProps = {}) => {\n    return _extends({}, externalProps, stepperButtonCommonProps, {\n      disabled: isIncrementDisabled,\n      \"aria-disabled\": isIncrementDisabled,\n      onMouseDown: handleStepperButtonMouseDown,\n      onClick: handleStep(\"up\")\n    });\n  };\n  const isDecrementDisabled = disabledProp || (isNumber(value) ? value <= (min3 != null ? min3 : Number.MIN_SAFE_INTEGER) : false);\n  const getDecrementButtonProps = (externalProps = {}) => {\n    return _extends({}, externalProps, stepperButtonCommonProps, {\n      disabled: isDecrementDisabled,\n      \"aria-disabled\": isDecrementDisabled,\n      onMouseDown: handleStepperButtonMouseDown,\n      onClick: handleStep(\"down\")\n    });\n  };\n  return {\n    disabled: disabledProp,\n    error: errorProp,\n    focused,\n    formControlContext,\n    getInputProps,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getRootProps,\n    required: requiredProp,\n    value: focused ? dirtyValue : value,\n    isIncrementDisabled,\n    isDecrementDisabled,\n    inputValue: dirtyValue\n  };\n}\n\n// node_modules/@mui/base/Unstable_NumberInput/NumberInput.js\ninit_composeClasses();\nvar import_jsx_runtime23 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime24 = __toESM(require_jsx_runtime());\nvar _excluded12 = [\"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"id\", \"max\", \"min\", \"onBlur\", \"onInputChange\", \"onFocus\", \"onChange\", \"placeholder\", \"required\", \"readOnly\", \"shiftMultiplier\", \"startAdornment\", \"step\", \"value\", \"slotProps\", \"slots\"];\nvar useUtilityClasses10 = (ownerState) => {\n  const {\n    disabled,\n    error,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled,\n    startAdornment,\n    endAdornment\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", error && \"error\", focused && \"focused\", readOnly && \"readOnly\", Boolean(formControlContext) && \"formControl\", Boolean(startAdornment) && \"adornedStart\", Boolean(endAdornment) && \"adornedEnd\"],\n    input: [\"input\", disabled && \"disabled\", readOnly && \"readOnly\"],\n    incrementButton: [\"incrementButton\", isIncrementDisabled && \"disabled\"],\n    decrementButton: [\"decrementButton\", isDecrementDisabled && \"disabled\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getNumberInputUtilityClass));\n};\nvar NumberInput = React41.forwardRef(function NumberInput2(props, forwardedRef) {\n  var _slots$root, _slots$input, _slots$incrementButto, _slots$decrementButto;\n  const {\n    className,\n    defaultValue,\n    disabled,\n    endAdornment,\n    error,\n    id,\n    max: max3,\n    min: min3,\n    onBlur,\n    onInputChange,\n    onFocus,\n    onChange,\n    placeholder,\n    required,\n    readOnly = false,\n    shiftMultiplier,\n    startAdornment,\n    step,\n    value,\n    slotProps = {},\n    slots = {}\n  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded12);\n  const {\n    getRootProps,\n    getInputProps,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    focused,\n    error: errorState,\n    disabled: disabledState,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  } = useNumberInput({\n    min: min3,\n    max: max3,\n    step,\n    shiftMultiplier,\n    defaultValue,\n    disabled,\n    error,\n    onFocus,\n    onInputChange,\n    onBlur,\n    onChange,\n    required,\n    readOnly,\n    value,\n    inputId: id\n  });\n  const ownerState = _extends({}, props, {\n    disabled: disabledState,\n    error: errorState,\n    focused,\n    readOnly,\n    formControlContext,\n    isIncrementDisabled,\n    isDecrementDisabled\n  });\n  const classes = useUtilityClasses10(ownerState);\n  const propsForwardedToInputSlot = {\n    placeholder\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: rest,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Input3 = (_slots$input = slots.input) != null ? _slots$input : \"input\";\n  const inputProps = useSlotProps({\n    elementType: Input3,\n    getSlotProps: (otherHandlers) => getInputProps(_extends({}, otherHandlers, propsForwardedToInputSlot)),\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const IncrementButton = (_slots$incrementButto = slots.incrementButton) != null ? _slots$incrementButto : \"button\";\n  const incrementButtonProps = useSlotProps({\n    elementType: IncrementButton,\n    getSlotProps: getIncrementButtonProps,\n    externalSlotProps: slotProps.incrementButton,\n    ownerState,\n    className: classes.incrementButton\n  });\n  const DecrementButton = (_slots$decrementButto = slots.decrementButton) != null ? _slots$decrementButto : \"button\";\n  const decrementButtonProps = useSlotProps({\n    elementType: DecrementButton,\n    getSlotProps: getDecrementButtonProps,\n    externalSlotProps: slotProps.decrementButton,\n    ownerState,\n    className: classes.decrementButton\n  });\n  return (0, import_jsx_runtime24.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime23.jsx)(DecrementButton, _extends({}, decrementButtonProps)), (0, import_jsx_runtime23.jsx)(IncrementButton, _extends({}, incrementButtonProps)), startAdornment, (0, import_jsx_runtime23.jsx)(Input3, _extends({}, inputProps)), endAdornment]\n  }));\n});\ntrue ? NumberInput.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types16.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types16.default.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types16.default.any,\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled: import_prop_types16.default.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endAdornment: import_prop_types16.default.node,\n  /**\n   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.\n   */\n  error: import_prop_types16.default.bool,\n  /**\n   * The id of the `input` element.\n   */\n  id: import_prop_types16.default.string,\n  /**\n   * The maximum value.\n   */\n  max: import_prop_types16.default.number,\n  /**\n   * The minimum value.\n   */\n  min: import_prop_types16.default.number,\n  /**\n   * @ignore\n   */\n  onBlur: import_prop_types16.default.func,\n  /**\n   * Callback fired after the value is clamped and changes - when the `input` is blurred or when\n   * the stepper buttons are triggered.\n   * Called with `undefined` when the value is unset.\n   *\n   * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback\n   * @param {number|undefined} value The new value of the component\n   */\n  onChange: import_prop_types16.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: import_prop_types16.default.func,\n  /**\n   * Callback fired when the `input` value changes after each keypress, before clamping is applied.\n   * Note that `event.target.value` may contain values that fall outside of `min` and `max` or\n   * are otherwise \"invalid\".\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   */\n  onInputChange: import_prop_types16.default.func,\n  /**\n   * @ignore\n   */\n  placeholder: import_prop_types16.default.string,\n  /**\n   * If `true`, the `input` element becomes read-only. The stepper buttons remain active,\n   * with the addition that they are now keyboard focusable.\n   * @default false\n   */\n  readOnly: import_prop_types16.default.bool,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: import_prop_types16.default.bool,\n  /**\n   * Multiplier applied to `step` if the shift key is held while incrementing\n   * or decrementing the value. Defaults to `10`.\n   */\n  shiftMultiplier: import_prop_types16.default.number,\n  /**\n   * The props used for each slot inside the NumberInput.\n   * @default {}\n   */\n  slotProps: import_prop_types16.default.shape({\n    decrementButton: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),\n    incrementButton: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),\n    input: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),\n    root: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object])\n  }),\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types16.default.shape({\n    decrementButton: import_prop_types16.default.elementType,\n    incrementButton: import_prop_types16.default.elementType,\n    input: import_prop_types16.default.elementType,\n    root: import_prop_types16.default.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startAdornment: import_prop_types16.default.node,\n  /**\n   * The amount that the value changes on each increment or decrement.\n   */\n  step: import_prop_types16.default.number,\n  /**\n   * The current value. Use when the component is controlled.\n   */\n  value: import_prop_types16.default.any\n} : void 0;\n\n// node_modules/@mui/base/OptionGroup/OptionGroup.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React42 = __toESM(require_react());\nvar import_prop_types17 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/OptionGroup/optionGroupClasses.js\nfunction getOptionGroupUtilityClass(slot) {\n  return generateUtilityClass(\"MuiOptionGroup\", slot);\n}\nvar optionGroupClasses = generateUtilityClasses(\"MuiOptionGroup\", [\"root\", \"disabled\", \"label\", \"list\"]);\n\n// node_modules/@mui/base/OptionGroup/OptionGroup.js\nvar import_jsx_runtime25 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime26 = __toESM(require_jsx_runtime());\nvar _excluded13 = [\"disabled\", \"slotProps\", \"slots\"];\nfunction useUtilityClasses11(disabled) {\n  const slots = {\n    root: [\"root\", disabled && \"disabled\"],\n    label: [\"label\"],\n    list: [\"list\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionGroupUtilityClass));\n}\nvar OptionGroup = React42.forwardRef(function OptionGroup2(props, forwardedRef) {\n  const {\n    disabled = false,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);\n  const Root = (slots == null ? void 0 : slots.root) || \"li\";\n  const Label = (slots == null ? void 0 : slots.label) || \"span\";\n  const List = (slots == null ? void 0 : slots.list) || \"ul\";\n  const classes = useUtilityClasses11(disabled);\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState: props,\n    className: classes.root\n  });\n  const labelProps = useSlotProps({\n    elementType: Label,\n    externalSlotProps: slotProps.label,\n    ownerState: props,\n    className: classes.label\n  });\n  const listProps = useSlotProps({\n    elementType: List,\n    externalSlotProps: slotProps.list,\n    ownerState: props,\n    className: classes.list\n  });\n  return (0, import_jsx_runtime26.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime25.jsx)(Label, _extends({}, labelProps, {\n      children: props.label\n    })), (0, import_jsx_runtime25.jsx)(List, _extends({}, listProps, {\n      children: props.children\n    }))]\n  }));\n});\ntrue ? OptionGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types17.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types17.default.string,\n  /**\n   * If `true` all the options in the group will be disabled.\n   * @default false\n   */\n  disabled: import_prop_types17.default.bool,\n  /**\n   * The human-readable description of the group.\n   */\n  label: import_prop_types17.default.node,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: import_prop_types17.default.shape({\n    label: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object]),\n    list: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object]),\n    root: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object])\n  }),\n  /**\n   * The components used for each slot inside the OptionGroup.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types17.default.shape({\n    label: import_prop_types17.default.elementType,\n    list: import_prop_types17.default.elementType,\n    root: import_prop_types17.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Option/Option.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React45 = __toESM(require_react());\nvar import_prop_types18 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Option/optionClasses.js\nfunction getOptionUtilityClass(slot) {\n  return generateUtilityClass(\"MuiOption\", slot);\n}\nvar optionClasses = generateUtilityClasses(\"MuiOption\", [\"root\", \"disabled\", \"selected\", \"highlighted\"]);\n\n// node_modules/@mui/base/useOption/useOption.js\ninit_extends();\nvar React43 = __toESM(require_react());\ninit_esm();\nfunction useOption(params) {\n  const {\n    value,\n    label,\n    disabled,\n    rootRef: optionRefParam,\n    id: idParam\n  } = params;\n  const {\n    getRootProps: getListItemProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const id = useId(idParam);\n  const optionRef = React43.useRef(null);\n  const selectOption = React43.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const {\n    index: index2\n  } = useCompoundItem(value, selectOption);\n  const handleRef = useForkRef(optionRefParam, optionRef);\n  return {\n    getRootProps: (externalProps = {}) => {\n      const externalEventHandlers = extractEventHandlers(externalProps);\n      return _extends({}, externalProps, getListItemProps(externalEventHandlers), {\n        id,\n        ref: handleRef,\n        role: \"option\",\n        \"aria-selected\": selected\n      });\n    },\n    highlighted,\n    index: index2,\n    selected,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/useOption/useOptionContextStabilizer.js\nvar React44 = __toESM(require_react());\nfunction useOptionContextStabilizer(value) {\n  const listContext = React44.useContext(ListContext);\n  if (!listContext) {\n    throw new Error(\"Option: ListContext was not found.\");\n  }\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(value);\n  const localGetItemState = React44.useCallback((itemValue) => {\n    if (itemValue !== value) {\n      throw new Error([\"Base UI Option: Tried to access the state of another Option.\", \"This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.\"].join(\"/n\"));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, value]);\n  const localContextValue = React44.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue\n  };\n}\n\n// node_modules/@mui/base/Option/Option.js\nvar import_jsx_runtime27 = __toESM(require_jsx_runtime());\nvar _excluded14 = [\"children\", \"disabled\", \"label\", \"slotProps\", \"slots\", \"value\"];\nfunction useUtilityClasses12(ownerState) {\n  const {\n    disabled,\n    highlighted,\n    selected\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", highlighted && \"highlighted\", selected && \"selected\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getOptionUtilityClass));\n}\nvar InnerOption = React45.memo(React45.forwardRef(function Option(props, forwardedRef) {\n  var _slots$root, _optionRef$current;\n  const {\n    children,\n    disabled = false,\n    label,\n    slotProps = {},\n    slots = {},\n    value\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"li\";\n  const optionRef = React45.useRef(null);\n  const combinedRef = useForkRef(optionRef, forwardedRef);\n  const computedLabel = label != null ? label : typeof children === \"string\" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;\n  const {\n    getRootProps,\n    selected,\n    highlighted,\n    index: index2\n  } = useOption({\n    disabled,\n    label: computedLabel,\n    rootRef: combinedRef,\n    value\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    highlighted,\n    index: index2,\n    selected\n  });\n  const classes = useUtilityClasses12(ownerState);\n  const rootProps = useSlotProps({\n    getSlotProps: getRootProps,\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return (0, import_jsx_runtime27.jsx)(Root, _extends({}, rootProps, {\n    children\n  }));\n}));\nvar Option2 = React45.forwardRef(function Option3(props, ref) {\n  const {\n    value\n  } = props;\n  const {\n    contextValue\n  } = useOptionContextStabilizer(value);\n  return (0, import_jsx_runtime27.jsx)(ListContext.Provider, {\n    value: contextValue,\n    children: (0, import_jsx_runtime27.jsx)(InnerOption, _extends({}, props, {\n      ref\n    }))\n  });\n});\ntrue ? Option2.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: import_prop_types18.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types18.default.string,\n  /**\n   * If `true`, the option will be disabled.\n   * @default false\n   */\n  disabled: import_prop_types18.default.bool,\n  /**\n   * A text representation of the option's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: import_prop_types18.default.string,\n  /**\n   * The props used for each slot inside the Option.\n   * @default {}\n   */\n  slotProps: import_prop_types18.default.shape({\n    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Option.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types18.default.shape({\n    root: import_prop_types18.default.elementType\n  }),\n  /**\n   * The value of the option.\n   */\n  value: import_prop_types18.default.any.isRequired\n} : void 0;\n\n// node_modules/@mui/base/Unstable_Popup/Popup.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React47 = __toESM(require_react());\nvar import_prop_types19 = __toESM(require_prop_types());\n\n// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\nvar sides = [\"top\", \"right\", \"bottom\", \"left\"];\nvar alignments = [\"start\", \"end\"];\nvar placements2 = sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nvar min2 = Math.min;\nvar max2 = Math.max;\nvar round2 = Math.round;\nvar floor = Math.floor;\nvar createCoords = (v) => ({\n  x: v,\n  y: v\n});\nvar oppositeSideMap = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n};\nvar oppositeAlignmentMap = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction evaluate(value, param) {\n  return typeof value === \"function\" ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n  return placement.split(\"-\")[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction getAxisLength(axis) {\n  return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction getSideAxis(placement) {\n  return [\"top\", \"bottom\"].includes(getSide(placement)) ? \"y\" : \"x\";\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === \"x\" ? alignment === (rtl ? \"end\" : \"start\") ? \"right\" : \"left\" : alignment === \"start\" ? \"bottom\" : \"top\";\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement2(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement2(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement2(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = [\"left\", \"right\"];\n  const rl = [\"right\", \"left\"];\n  const tb = [\"top\", \"bottom\"];\n  const bt = [\"bottom\", \"top\"];\n  switch (side) {\n    case \"top\":\n    case \"bottom\":\n      if (rtl)\n        return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case \"left\":\n    case \"right\":\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === \"start\", rtl);\n  if (alignment) {\n    list = list.map((side) => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement2(placement) {\n  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== \"number\" ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect2(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n// node_modules/@floating-ui/core/dist/floating-ui.core.mjs\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference: reference2,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === \"y\";\n  const commonX = reference2.x + reference2.width / 2 - floating.width / 2;\n  const commonY = reference2.y + reference2.height / 2 - floating.height / 2;\n  const commonAlign = reference2[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case \"top\":\n      coords = {\n        x: commonX,\n        y: reference2.y - floating.height\n      };\n      break;\n    case \"bottom\":\n      coords = {\n        x: commonX,\n        y: reference2.y + reference2.height\n      };\n      break;\n    case \"right\":\n      coords = {\n        x: reference2.x + reference2.width,\n        y: commonY\n      };\n      break;\n    case \"left\":\n      coords = {\n        x: reference2.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference2.x,\n        y: reference2.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case \"start\":\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case \"end\":\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\nvar computePosition = async (reference2, floating, config) => {\n  const {\n    placement = \"bottom\",\n    strategy = \"absolute\",\n    middleware = [],\n    platform: platform2\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));\n  let rects = await platform2.getElementRects({\n    reference: reference2,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn: fn2\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn2({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform: platform2,\n      elements: {\n        reference: reference2,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === \"object\") {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform2.getElementRects({\n            reference: reference2,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\nasync function detectOverflow2(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform: platform2,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = \"clippingAncestors\",\n    rootBoundary = \"viewport\",\n    elementContext = \"floating\",\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === \"floating\" ? \"reference\" : \"floating\";\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect2(await platform2.getClippingRect({\n    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === \"floating\" ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));\n  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect2(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\nvar flip2 = function(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: \"flip\",\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform: platform2,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = \"bestFit\",\n        fallbackAxisSideDirection = \"none\",\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement2(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== \"none\") {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements3 = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow2(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides2 = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n      if (!overflows.every((side2) => side2 <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements3[nextIndex];\n        if (nextPlacement) {\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case \"bestFit\": {\n              var _overflowsData$map$so;\n              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n              if (placement2) {\n                resetPlacement = placement2;\n              }\n              break;\n            }\n            case \"initialPlacement\":\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform: platform2,\n    elements\n  } = state;\n  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === \"y\";\n  const mainAxisMulti = [\"left\", \"top\"].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === \"number\" ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === \"number\") {\n    crossAxis = alignment === \"end\" ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\nvar offset2 = function(options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: \"offset\",\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n// node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs\nfunction getNodeName2(node) {\n  if (isNode(node)) {\n    return (node.nodeName || \"\").toLowerCase();\n  }\n  return \"#document\";\n}\nfunction getWindow2(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement2(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow2(value).Node;\n}\nfunction isElement2(value) {\n  return value instanceof Element || value instanceof getWindow2(value).Element;\n}\nfunction isHTMLElement3(value) {\n  return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;\n}\nfunction isShadowRoot2(value) {\n  if (typeof ShadowRoot === \"undefined\") {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle2(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && ![\"inline\", \"contents\"].includes(display);\n}\nfunction isTableElement2(element) {\n  return [\"table\", \"td\", \"th\"].includes(getNodeName2(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle2(element);\n  return css.transform !== \"none\" || css.perspective !== \"none\" || (css.containerType ? css.containerType !== \"normal\" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== \"none\" : false) || !webkit && (css.filter ? css.filter !== \"none\" : false) || [\"transform\", \"perspective\", \"filter\"].some((value) => (css.willChange || \"\").includes(value)) || [\"paint\", \"layout\", \"strict\", \"content\"].some((value) => (css.contain || \"\").includes(value));\n}\nfunction getContainingBlock2(element) {\n  let currentNode = getParentNode2(element);\n  while (isHTMLElement3(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode2(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === \"undefined\" || !CSS.supports)\n    return false;\n  return CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction isLastTraversableNode(node) {\n  return [\"html\", \"body\", \"#document\"].includes(getNodeName2(node));\n}\nfunction getComputedStyle2(element) {\n  return getWindow2(element).getComputedStyle(element);\n}\nfunction getNodeScroll2(element) {\n  if (isElement2(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode2(node) {\n  if (getNodeName2(node) === \"html\") {\n    return node;\n  }\n  const result = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot2(node) && node.host || // Fallback.\n    getDocumentElement2(node)\n  );\n  return isShadowRoot2(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode2(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement3(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow2(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n\n// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\nfunction getCssDimensions(element) {\n  const css = getComputedStyle2(element);\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement3(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\nfunction unwrapElement(element) {\n  return !isElement2(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement3(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round2(rect.width) : rect.width) / width;\n  let y = ($ ? round2(rect.height) : rect.height) / height;\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\nvar noOffsets = createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow2(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {\n    return false;\n  }\n  return isFixed;\n}\nfunction getBoundingClientRect2(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement2(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow2(domElement);\n    const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow2(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle2(currentIFrame);\n      const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left2;\n      y += top2;\n      currentIFrame = getWindow2(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect2({\n    width,\n    height,\n    x,\n    y\n  });\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement3(offsetParent);\n  const documentElement = getDocumentElement2(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== \"fixed\") {\n    if (getNodeName2(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll2(offsetParent);\n    }\n    if (isHTMLElement3(offsetParent)) {\n      const offsetRect = getBoundingClientRect2(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\nfunction getWindowScrollBarX2(element) {\n  return getBoundingClientRect2(getDocumentElement2(element)).left + getNodeScroll2(element).scrollLeft;\n}\nfunction getDocumentRect2(element) {\n  const html = getDocumentElement2(element);\n  const scroll = getNodeScroll2(element);\n  const body = element.ownerDocument.body;\n  const width = max2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX2(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle2(body).direction === \"rtl\") {\n    x += max2(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getViewportRect2(element, strategy) {\n  const win = getWindow2(element);\n  const html = getDocumentElement2(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === \"fixed\") {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getInnerBoundingClientRect2(element, strategy) {\n  const clientRect = getBoundingClientRect2(element, true, strategy === \"fixed\");\n  const top2 = clientRect.top + element.clientTop;\n  const left2 = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement3(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left2 * scale.x;\n  const y = top2 * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === \"viewport\") {\n    rect = getViewportRect2(element, strategy);\n  } else if (clippingAncestor === \"document\") {\n    rect = getDocumentRect2(getDocumentElement2(element));\n  } else if (isElement2(clippingAncestor)) {\n    rect = getInnerBoundingClientRect2(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect2(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode2(element);\n  if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle2(parentNode).position === \"fixed\" || hasFixedPositionAncestor(parentNode, stopNode);\n}\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter((el) => isElement2(el) && getNodeName2(el) !== \"body\");\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle2(element).position === \"fixed\";\n  let currentNode = elementIsFixed ? getParentNode2(element) : element;\n  while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle2(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === \"fixed\") {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\"absolute\", \"fixed\"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      result = result.filter((ancestor) => ancestor !== currentNode);\n    } else {\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode2(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\nfunction getClippingRect2(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === \"clippingAncestors\" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max2(rect.top, accRect.top);\n    accRect.right = min2(rect.right, accRect.right);\n    accRect.bottom = min2(rect.bottom, accRect.bottom);\n    accRect.left = max2(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement3(offsetParent);\n  const documentElement = getDocumentElement2(offsetParent);\n  const isFixed = strategy === \"fixed\";\n  const rect = getBoundingClientRect2(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName2(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll2(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect2(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX2(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\nfunction getTrueOffsetParent2(element, polyfill) {\n  if (!isHTMLElement3(element) || getComputedStyle2(element).position === \"fixed\") {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\nfunction getOffsetParent2(element, polyfill) {\n  const window2 = getWindow2(element);\n  if (!isHTMLElement3(element)) {\n    return window2;\n  }\n  let offsetParent = getTrueOffsetParent2(element, polyfill);\n  while (offsetParent && isTableElement2(offsetParent) && getComputedStyle2(offsetParent).position === \"static\") {\n    offsetParent = getTrueOffsetParent2(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName2(offsetParent) === \"html\" || getNodeName2(offsetParent) === \"body\" && getComputedStyle2(offsetParent).position === \"static\" && !isContainingBlock(offsetParent))) {\n    return window2;\n  }\n  return offsetParent || getContainingBlock2(element) || window2;\n}\nvar getElementRects = async function(_ref) {\n  let {\n    reference: reference2,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent2;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference2, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...await getDimensionsFn(floating)\n    }\n  };\n};\nfunction isRTL(element) {\n  return getComputedStyle2(element).direction === \"rtl\";\n}\nvar platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement: getDocumentElement2,\n  getClippingRect: getClippingRect2,\n  getOffsetParent: getOffsetParent2,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement: isElement2,\n  isRTL\n};\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement2(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left: left2,\n      top: top2,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top2);\n    const insetRight = floor(root.clientWidth - (left2 + width));\n    const insetBottom = floor(root.clientHeight - (top2 + height));\n    const insetLeft = floor(left2);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max2(0, min2(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\nfunction autoUpdate(reference2, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === \"function\",\n    layoutShift = typeof IntersectionObserver === \"function\",\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference2);\n  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach((ancestor) => {\n    ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener(\"resize\", update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver((_ref) => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect2(reference2) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect2(reference2);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach((ancestor) => {\n      ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n      ancestorResize && ancestor.removeEventListener(\"resize\", update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\nvar computePosition2 = (reference2, floating, options) => {\n  const cache = /* @__PURE__ */ new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition(reference2, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\n// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\nvar React46 = __toESM(require_react(), 1);\nvar import_react = __toESM(require_react(), 1);\nvar ReactDOM3 = __toESM(require_react_dom(), 1);\nvar index = typeof document !== \"undefined\" ? import_react.useLayoutEffect : import_react.useEffect;\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === \"function\" && a.toString() === b.toString()) {\n    return true;\n  }\n  let length, i, keys;\n  if (a && b && typeof a == \"object\") {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length)\n        return false;\n      for (i = length; i-- !== 0; ) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0; ) {\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i];\n      if (key === \"_owner\" && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\nfunction getDPR(element) {\n  if (typeof window === \"undefined\") {\n    return 1;\n  }\n  const win = element.ownerDocument.defaultView || window;\n  return win.devicePixelRatio || 1;\n}\nfunction roundByDPR(element, value) {\n  const dpr = getDPR(element);\n  return Math.round(value * dpr) / dpr;\n}\nfunction useLatestRef(value) {\n  const ref = React46.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = \"bottom\",\n    strategy = \"absolute\",\n    middleware = [],\n    platform: platform2,\n    elements: {\n      reference: externalReference,\n      floating: externalFloating\n    } = {},\n    transform = true,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React46.useState({\n    x: 0,\n    y: 0,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React46.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const [_reference, _setReference] = React46.useState(null);\n  const [_floating, _setFloating] = React46.useState(null);\n  const setReference = React46.useCallback((node) => {\n    if (node != referenceRef.current) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, [_setReference]);\n  const setFloating = React46.useCallback((node) => {\n    if (node !== floatingRef.current) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, [_setFloating]);\n  const referenceEl = externalReference || _reference;\n  const floatingEl = externalFloating || _floating;\n  const referenceRef = React46.useRef(null);\n  const floatingRef = React46.useRef(null);\n  const dataRef = React46.useRef(data);\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform2);\n  const update = React46.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {\n      const fullData = {\n        ...data2,\n        isPositioned: true\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM3.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData((data2) => ({\n        ...data2,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React46.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (referenceEl)\n      referenceRef.current = referenceEl;\n    if (floatingEl)\n      floatingRef.current = floatingEl;\n    if (referenceEl && floatingEl) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n      } else {\n        update();\n      }\n    }\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);\n  const refs = React46.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React46.useMemo(() => ({\n    reference: referenceEl,\n    floating: floatingEl\n  }), [referenceEl, floatingEl]);\n  const floatingStyles = React46.useMemo(() => {\n    const initialStyles = {\n      position: strategy,\n      left: 0,\n      top: 0\n    };\n    if (!elements.floating) {\n      return initialStyles;\n    }\n    const x = roundByDPR(elements.floating, data.x);\n    const y = roundByDPR(elements.floating, data.y);\n    if (transform) {\n      return {\n        ...initialStyles,\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\n        ...getDPR(elements.floating) >= 1.5 && {\n          willChange: \"transform\"\n        }\n      };\n    }\n    return {\n      position: strategy,\n      left: x,\n      top: y\n    };\n  }, [strategy, transform, elements.floating, data.x, data.y]);\n  return React46.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    floatingStyles\n  }), [data, update, refs, elements, floatingStyles]);\n}\n\n// node_modules/@mui/base/Unstable_Popup/Popup.js\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Unstable_Popup/popupClasses.js\nfunction getPopupUtilityClass(slot) {\n  return generateUtilityClass(\"MuiPopup\", slot);\n}\nvar popupClasses = generateUtilityClasses(\"MuiPopup\", [\"root\", \"open\"]);\n\n// node_modules/@mui/base/Unstable_Popup/Popup.js\nvar import_jsx_runtime28 = __toESM(require_jsx_runtime());\nvar _excluded15 = [\"anchor\", \"children\", \"container\", \"disablePortal\", \"keepMounted\", \"middleware\", \"offset\", \"open\", \"placement\", \"slotProps\", \"slots\", \"strategy\", \"withTransition\"];\nfunction useUtilityClasses13(ownerState) {\n  const {\n    open\n  } = ownerState;\n  const slots = {\n    root: [\"root\", open && \"open\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getPopupUtilityClass));\n}\nfunction resolveAnchor(anchor) {\n  return typeof anchor === \"function\" ? anchor() : anchor;\n}\nvar Popup = React47.forwardRef(function Popup2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    anchor: anchorProp,\n    children,\n    container,\n    disablePortal = false,\n    keepMounted = false,\n    middleware,\n    offset: offsetProp = 0,\n    open = false,\n    placement = \"bottom\",\n    slotProps = {},\n    slots = {},\n    strategy = \"absolute\",\n    withTransition = false\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);\n  const {\n    refs,\n    elements,\n    floatingStyles,\n    update,\n    placement: finalPlacement\n  } = useFloating({\n    elements: {\n      reference: resolveAnchor(anchorProp)\n    },\n    open,\n    middleware: middleware != null ? middleware : [offset2(offsetProp != null ? offsetProp : 0), flip2()],\n    placement,\n    strategy,\n    whileElementsMounted: !keepMounted ? autoUpdate : void 0\n  });\n  const handleRef = useForkRef(refs.setFloating, forwardedRef);\n  const [exited, setExited] = React47.useState(true);\n  const handleEntering = () => {\n    setExited(false);\n  };\n  const handleExited = () => {\n    setExited(true);\n  };\n  useEnhancedEffect_default(() => {\n    if (keepMounted && open && elements.reference && elements.floating) {\n      const cleanup = autoUpdate(elements.reference, elements.floating, update);\n      return cleanup;\n    }\n    return void 0;\n  }, [keepMounted, open, elements, update]);\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    keepMounted,\n    offset: offset2,\n    open,\n    placement,\n    finalPlacement,\n    strategy,\n    withTransition\n  });\n  const display = !open && keepMounted && (!withTransition || exited) ? \"none\" : void 0;\n  const classes = useUtilityClasses13(ownerState);\n  const Root = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root,\n    additionalProps: {\n      ref: handleRef,\n      role: \"tooltip\",\n      style: _extends({}, floatingStyles, {\n        display\n      })\n    }\n  });\n  const shouldRender = open || keepMounted || withTransition && !exited;\n  if (!shouldRender) {\n    return null;\n  }\n  const childProps = {\n    placement: finalPlacement,\n    requestOpen: open,\n    onExited: handleExited,\n    onEnter: handleEntering\n  };\n  return (0, import_jsx_runtime28.jsx)(Portal, {\n    disablePortal,\n    container,\n    children: (0, import_jsx_runtime28.jsx)(Root, _extends({}, rootProps, {\n      children: typeof children === \"function\" ? children(childProps) : children\n    }))\n  });\n});\ntrue ? Popup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),\n   * or a function that returns either.\n   * It's used to set the position of the popup.\n   */\n  anchor: import_prop_types19.default.oneOfType([HTMLElementType, import_prop_types19.default.object, import_prop_types19.default.func]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types19.default.oneOfType([import_prop_types19.default.node, import_prop_types19.default.func]),\n  /**\n   * An HTML element or function that returns one. The container will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object, so it's `document.body` in these cases.\n   */\n  container: import_prop_types19.default.oneOfType([HTMLElementType, import_prop_types19.default.func]),\n  /**\n   * If `true`, the popup will be rendered where it is defined, without the use of portals.\n   * @default false\n   */\n  disablePortal: import_prop_types19.default.bool,\n  /**\n   * If `true`, the popup will exist in the DOM even if it's closed.\n   * Its visibility will be controlled by the `display` CSS property.\n   *\n   * Otherwise, a closed popup will be removed from the DOM.\n   *\n   * @default false\n   */\n  keepMounted: import_prop_types19.default.bool,\n  /**\n   * Collection of Floating UI middleware to use when positioning the popup.\n   * If not provided, the [`offset`](https://floating-ui.com/docs/offset)\n   * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.\n   *\n   * @see https://floating-ui.com/docs/computePosition#middleware\n   */\n  middleware: import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf([false]), import_prop_types19.default.shape({\n    fn: import_prop_types19.default.func.isRequired,\n    name: import_prop_types19.default.string.isRequired,\n    options: import_prop_types19.default.any\n  })])),\n  /**\n   * Distance between a popup and the trigger element.\n   * This prop is ignored when custom `middleware` is provided.\n   *\n   * @default 0\n   * @see https://floating-ui.com/docs/offset\n   */\n  offset: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.number, import_prop_types19.default.shape({\n    alignmentAxis: import_prop_types19.default.number,\n    crossAxis: import_prop_types19.default.number,\n    mainAxis: import_prop_types19.default.number\n  })]),\n  /**\n   * If `true`, the popup is visible.\n   *\n   * @default false\n   */\n  open: import_prop_types19.default.bool,\n  /**\n   * Determines where to place the popup relative to the trigger element.\n   *\n   * @default 'bottom'\n   * @see https://floating-ui.com/docs/computePosition#placement\n   */\n  placement: import_prop_types19.default.oneOf([\"bottom-end\", \"bottom-start\", \"bottom\", \"left-end\", \"left-start\", \"left\", \"right-end\", \"right-start\", \"right\", \"top-end\", \"top-start\", \"top\"]),\n  /**\n   * The props used for each slot inside the Popup.\n   *\n   * @default {}\n   */\n  slotProps: import_prop_types19.default.shape({\n    root: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Popup.\n   * Either a string to use a HTML element or a component.\n   *\n   * @default {}\n   */\n  slots: import_prop_types19.default.shape({\n    root: import_prop_types19.default.elementType\n  }),\n  /**\n   * The type of CSS position property to use (absolute or fixed).\n   *\n   * @default 'absolute'\n   * @see https://floating-ui.com/docs/computePosition#strategy\n   */\n  strategy: import_prop_types19.default.oneOf([\"absolute\", \"fixed\"]),\n  /**\n   * If `true`, the popup will not disappear immediately when it needs to be closed\n   * but wait until the exit transition has finished.\n   * In such a case, a function form of `children` must be used and `onExited`\n   * callback function must be called when the transition or animation finish.\n   *\n   * @default false\n   */\n  withTransition: import_prop_types19.default.bool\n} : void 0;\n\n// node_modules/@mui/base/Select/Select.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React50 = __toESM(require_react());\nvar import_prop_types20 = __toESM(require_prop_types());\ninit_esm();\n\n// node_modules/@mui/base/useSelect/useSelect.js\ninit_extends();\nvar React48 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/useSelect/useSelect.types.js\nvar SelectActionTypes = {\n  buttonClick: \"buttonClick\",\n  browserAutoFill: \"browserAutoFill\"\n};\n\n// node_modules/@mui/base/useSelect/defaultOptionStringifier.js\nvar defaultOptionStringifier = (option) => {\n  const {\n    label,\n    value\n  } = option;\n  if (typeof label === \"string\") {\n    return label;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  return String(option);\n};\n\n// node_modules/@mui/base/useSelect/selectReducer.js\ninit_extends();\nfunction selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n  if (action.type === SelectActionTypes.buttonClick) {\n    var _state$selectedValues;\n    const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, \"start\", action.context);\n    return _extends({}, state, {\n      open: !open,\n      highlightedValue: !open ? itemToHighlight : null\n    });\n  }\n  if (action.type === SelectActionTypes.browserAutoFill) {\n    return handleItemSelection(action.item, state, action.context);\n  }\n  const newState = listReducer(state, action);\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (state.open) {\n        if (action.event.key === \"Escape\") {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n        if (selectionMode === \"single\" && (action.event.key === \"Enter\" || action.event.key === \" \")) {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n      } else {\n        if (action.event.key === \"Enter\" || action.event.key === \" \" || action.event.key === \"ArrowDown\") {\n          var _state$selectedValues2;\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, \"start\", action.context)\n          });\n        }\n        if (action.event.key === \"ArrowUp\") {\n          var _state$selectedValues3;\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, \"end\", action.context)\n          });\n        }\n      }\n      break;\n    case ListActionTypes.itemClick:\n      if (selectionMode === \"single\") {\n        return _extends({}, newState, {\n          open: false\n        });\n      }\n      break;\n    case ListActionTypes.blur:\n      return _extends({}, newState, {\n        open: false\n      });\n    default:\n      return newState;\n  }\n  return newState;\n}\n\n// node_modules/@mui/base/useSelect/useSelect.js\nvar visuallyHiddenStyle = {\n  clip: \"rect(1px, 1px, 1px, 1px)\",\n  clipPath: \"inset(50%)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  overflow: \"hidden\",\n  padding: 0,\n  position: \"absolute\",\n  left: \"50%\",\n  bottom: 0\n  // to display the native browser validation error at the bottom of the Select.\n};\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return \"\";\n    }\n    return JSON.stringify(selectedOption.map((o) => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return \"\";\n  }\n  if (typeof selectedOption.value === \"string\" || typeof selectedOption.value === \"number\") {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp\n  } = props;\n  const buttonRef = React48.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React48.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === void 0 && defaultValueProp === void 0) {\n    defaultValue = [];\n  } else if (defaultValueProp !== void 0) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React48.useMemo(() => {\n    if (valueProp !== void 0) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return void 0;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React48.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index2) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: React48.createRef(),\n        id: `${listboxId}_${index2}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React48.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React48.useCallback((valueToGet) => {\n    if (areOptionsEqual !== void 0) {\n      const similarValue = optionValues.find((optionValue) => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React48.useCallback((valueToCheck) => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React48.useCallback((valueToCheck) => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return \"\";\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React48.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React48.useCallback((itemValue) => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React48.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React48.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React48.useCallback((event, field, fieldValue) => {\n    if (field === \"open\") {\n      onOpenChange == null || onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== \"blur\") {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React48.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? \"multiple\" : \"single\",\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonMouseDown = (externalEventHandlers) => (event) => {\n    var _externalEventHandler;\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onMouseDown) == null || _externalEventHandler.call(externalEventHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect_default(() => {\n    if (highlightedOption != null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React48.useCallback((optionValue) => getOptionByValue(optionValue), [getOptionByValue]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      onMouseDown: createHandleButtonMouseDown(otherHandlers),\n      ref: mergedListRootRef,\n      role: \"combobox\",\n      \"aria-expanded\": open,\n      \"aria-controls\": listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const getListboxProps = (externalProps = {}) => {\n    return _extends({}, externalProps, {\n      id: listboxId,\n      role: \"listbox\",\n      \"aria-multiselectable\": multiple ? \"true\" : void 0,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault\n      // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n  React48.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React48.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n  const createHandleHiddenInputChange = (externalEventHandlers) => (event) => {\n    var _externalEventHandler2;\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n    if (event.target.value === \"\") {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== void 0) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      \"aria-hidden\": true,\n      required: required ? true : void 0,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\n// node_modules/@mui/base/useSelect/SelectProvider.js\nvar React49 = __toESM(require_react());\nvar import_jsx_runtime29 = __toESM(require_jsx_runtime());\nfunction SelectProvider(props) {\n  const {\n    value,\n    children\n  } = props;\n  const {\n    dispatch,\n    getItemIndex,\n    getItemState,\n    registerItem,\n    totalSubitemCount\n  } = value;\n  const listContextValue = React49.useMemo(() => ({\n    dispatch,\n    getItemState,\n    getItemIndex\n  }), [dispatch, getItemIndex, getItemState]);\n  const compoundComponentContextValue = React49.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  return (0, import_jsx_runtime29.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime29.jsx)(ListContext.Provider, {\n      value: listContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/Select/Select.js\ninit_composeClasses();\n\n// node_modules/@mui/base/Select/selectClasses.js\nfunction getSelectUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSelect\", slot);\n}\nvar selectClasses = generateUtilityClasses(\"MuiSelect\", [\"root\", \"button\", \"listbox\", \"popper\", \"active\", \"expanded\", \"disabled\", \"focusVisible\"]);\n\n// node_modules/@mui/base/Select/Select.js\nvar import_jsx_runtime30 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime31 = __toESM(require_jsx_runtime());\nvar _span;\nvar _excluded16 = [\"areOptionsEqual\", \"autoComplete\", \"autoFocus\", \"children\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"getSerializedValue\", \"listboxId\", \"listboxOpen\", \"multiple\", \"name\", \"required\", \"onChange\", \"onListboxOpenChange\", \"getOptionAsString\", \"renderValue\", \"placeholder\", \"slotProps\", \"slots\", \"value\"];\nfunction defaultRenderValue(selectedOptions) {\n  var _selectedOptions$labe;\n  if (Array.isArray(selectedOptions)) {\n    return (0, import_jsx_runtime30.jsx)(React50.Fragment, {\n      children: selectedOptions.map((o) => o.label).join(\", \")\n    });\n  }\n  return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : null;\n}\nfunction useUtilityClasses14(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", focusVisible && \"focusVisible\", active && \"active\", open && \"expanded\"],\n    listbox: [\"listbox\", disabled && \"disabled\"],\n    popper: [\"popper\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSelectUtilityClass));\n}\nvar Select = React50.forwardRef(function Select2(props, forwardedRef) {\n  var _slots$root, _slots$listbox, _slots$popper, _ref, _renderValue;\n  const {\n    areOptionsEqual,\n    autoComplete,\n    autoFocus,\n    children,\n    defaultValue,\n    defaultListboxOpen = false,\n    disabled: disabledProp,\n    getSerializedValue,\n    listboxId,\n    listboxOpen: listboxOpenProp,\n    multiple = false,\n    name,\n    required = false,\n    onChange,\n    onListboxOpenChange,\n    getOptionAsString = defaultOptionStringifier,\n    renderValue: renderValueProp,\n    placeholder,\n    slotProps = {},\n    slots = {},\n    value: valueProp\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;\n  const [buttonDefined, setButtonDefined] = React50.useState(false);\n  const buttonRef = React50.useRef(null);\n  const listboxRef = React50.useRef(null);\n  const Button3 = (_slots$root = slots.root) != null ? _slots$root : \"button\";\n  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : \"ul\";\n  const PopperComponent = (_slots$popper = slots.popper) != null ? _slots$popper : Popper;\n  const handleButtonRefChange = React50.useCallback((element) => {\n    setButtonDefined(element != null);\n  }, []);\n  const handleButtonRef = useForkRef(forwardedRef, buttonRef, handleButtonRefChange);\n  React50.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    contextValue,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getHiddenInputProps,\n    getOptionMetadata,\n    value,\n    open\n  } = useSelect({\n    name,\n    required,\n    getSerializedValue,\n    areOptionsEqual,\n    buttonRef: handleButtonRef,\n    defaultOpen: defaultListboxOpen,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId,\n    multiple,\n    open: listboxOpenProp,\n    onChange,\n    onOpenChange: onListboxOpenChange,\n    getOptionAsString,\n    value: valueProp\n  });\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open,\n    multiple,\n    renderValue,\n    value\n  });\n  const classes = useUtilityClasses14(ownerState);\n  const buttonProps = useSlotProps({\n    elementType: Button3,\n    getSlotProps: getButtonProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  const listboxProps = useSlotProps({\n    elementType: ListboxRoot,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    additionalProps: {\n      ref: listboxRef\n    },\n    ownerState,\n    className: classes.listbox\n  });\n  const popperProps = useSlotProps({\n    elementType: PopperComponent,\n    externalSlotProps: slotProps.popper,\n    additionalProps: {\n      anchorEl: buttonRef.current,\n      keepMounted: true,\n      open,\n      placement: \"bottom-start\",\n      role: void 0\n    },\n    ownerState,\n    className: classes.popper\n  });\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;\n  }\n  return (0, import_jsx_runtime31.jsxs)(React50.Fragment, {\n    children: [(0, import_jsx_runtime30.jsx)(Button3, _extends({}, buttonProps, {\n      children: (_ref = (_renderValue = renderValue(selectedOptionsMetadata)) != null ? _renderValue : placeholder) != null ? _ref : (\n        // fall back to a zero-width space to prevent layout shift\n        // from https://github.com/mui/material-ui/pull/24563\n        _span || (_span = (0, import_jsx_runtime30.jsx)(\"span\", {\n          className: \"notranslate\",\n          children: \"​\"\n        }))\n      )\n    })), buttonDefined && (0, import_jsx_runtime30.jsx)(PopperComponent, _extends({}, popperProps, {\n      children: (0, import_jsx_runtime30.jsx)(ListboxRoot, _extends({}, listboxProps, {\n        children: (0, import_jsx_runtime30.jsx)(SelectProvider, {\n          value: contextValue,\n          children\n        })\n      }))\n    })), (0, import_jsx_runtime30.jsx)(\"input\", _extends({}, getHiddenInputProps(), {\n      autoComplete\n    }))]\n  });\n});\ntrue ? Select.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A function used to determine if two options' values are equal.\n   * By default, reference equality is used.\n   *\n   * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).\n   * Therefore, it's recommented to use the default reference equality comparison whenever possible.\n   */\n  areOptionsEqual: import_prop_types20.default.func,\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: import_prop_types20.default.string,\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: import_prop_types20.default.bool,\n  /**\n   * @ignore\n   */\n  children: import_prop_types20.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types20.default.string,\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: import_prop_types20.default.bool,\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types20.default.any,\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: import_prop_types20.default.bool,\n  /**\n   * A function used to convert the option label to a string.\n   * It's useful when labels are elements and need to be converted to plain text\n   * to enable navigation using character keys on a keyboard.\n   *\n   * @default defaultOptionStringifier\n   */\n  getOptionAsString: import_prop_types20.default.func,\n  /**\n   * A function to convert the currently selected value to a string.\n   * Used to set a value of a hidden input associated with the select,\n   * so that the selected value can be posted with a form.\n   */\n  getSerializedValue: import_prop_types20.default.func,\n  /**\n   * `id` attribute of the listbox element.\n   */\n  listboxId: import_prop_types20.default.string,\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: import_prop_types20.default.bool,\n  /**\n   * If `true`, selecting multiple values is allowed.\n   * This affects the type of the `value`, `defaultValue`, and `onChange` props.\n   *\n   * @default false\n   */\n  multiple: import_prop_types20.default.bool,\n  /**\n   * Name of the element. For example used by the server to identify the fields in form submits.\n   * If the name is provided, the component will render a hidden input element that can be submitted to a server.\n   */\n  name: import_prop_types20.default.string,\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: import_prop_types20.default.func,\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: import_prop_types20.default.func,\n  /**\n   * Text to show when there is no selected value.\n   */\n  placeholder: import_prop_types20.default.node,\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: import_prop_types20.default.func,\n  /**\n   * If `true`, the Select cannot be empty when submitting form.\n   * @default false\n   */\n  required: import_prop_types20.default.bool,\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  slotProps: import_prop_types20.default.shape({\n    listbox: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object]),\n    popper: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object]),\n    root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types20.default.shape({\n    listbox: import_prop_types20.default.elementType,\n    popper: import_prop_types20.default.elementType,\n    root: import_prop_types20.default.elementType\n  }),\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: import_prop_types20.default.any\n} : void 0;\n\n// node_modules/@mui/base/Slider/Slider.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React51 = __toESM(require_react());\nvar import_prop_types21 = __toESM(require_prop_types());\ninit_clsx();\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Slider/sliderClasses.js\nfunction getSliderUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSlider\", slot);\n}\nvar sliderClasses = generateUtilityClasses(\"MuiSlider\", [\"root\", \"active\", \"focusVisible\", \"disabled\", \"dragging\", \"marked\", \"vertical\", \"trackInverted\", \"trackFalse\", \"rail\", \"track\", \"mark\", \"markActive\", \"markLabel\", \"markLabelActive\", \"thumb\"]);\n\n// node_modules/@mui/base/Slider/Slider.js\nvar import_jsx_runtime32 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime33 = __toESM(require_jsx_runtime());\nvar _excluded17 = [\"aria-label\", \"aria-valuetext\", \"aria-labelledby\", \"className\", \"disableSwap\", \"disabled\", \"getAriaLabel\", \"getAriaValueText\", \"marks\", \"max\", \"min\", \"name\", \"onChange\", \"onChangeCommitted\", \"orientation\", \"scale\", \"step\", \"tabIndex\", \"track\", \"value\", \"valueLabelFormat\", \"isRtl\", \"defaultValue\", \"slotProps\", \"slots\"];\nfunction Identity2(x) {\n  return x;\n}\nvar useUtilityClasses15 = (ownerState) => {\n  const {\n    disabled,\n    dragging,\n    marked,\n    orientation,\n    track\n  } = ownerState;\n  const slots = {\n    root: [\"root\", disabled && \"disabled\", dragging && \"dragging\", marked && \"marked\", orientation === \"vertical\" && \"vertical\", track === \"inverted\" && \"trackInverted\", track === false && \"trackFalse\"],\n    rail: [\"rail\"],\n    track: [\"track\"],\n    mark: [\"mark\"],\n    markActive: [\"markActive\"],\n    markLabel: [\"markLabel\"],\n    markLabelActive: [\"markLabelActive\"],\n    valueLabel: [\"valueLabel\"],\n    thumb: [\"thumb\", disabled && \"disabled\"],\n    active: [\"active\"],\n    disabled: [\"disabled\"],\n    focusVisible: [\"focusVisible\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSliderUtilityClass));\n};\nvar Slider = React51.forwardRef(function Slider2(props, forwardedRef) {\n  var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;\n  const {\n    \"aria-label\": ariaLabel,\n    \"aria-valuetext\": ariaValuetext,\n    \"aria-labelledby\": ariaLabelledby,\n    className,\n    disableSwap = false,\n    disabled = false,\n    getAriaLabel,\n    getAriaValueText,\n    marks: marksProp = false,\n    max: max3 = 100,\n    min: min3 = 0,\n    orientation = \"horizontal\",\n    scale = Identity2,\n    step = 1,\n    track = \"normal\",\n    valueLabelFormat = Identity2,\n    isRtl = false,\n    defaultValue,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);\n  const partialOwnerState = _extends({}, props, {\n    marks: marksProp,\n    disabled,\n    disableSwap,\n    isRtl,\n    defaultValue,\n    max: max3,\n    min: min3,\n    orientation,\n    scale,\n    step,\n    track,\n    valueLabelFormat\n  });\n  const {\n    axisProps: axisProps2,\n    getRootProps,\n    getHiddenInputProps,\n    getThumbProps,\n    active,\n    axis,\n    range,\n    focusedThumbIndex,\n    dragging,\n    marks,\n    values,\n    trackOffset,\n    trackLeap,\n    getThumbStyle\n  } = useSlider(_extends({}, partialOwnerState, {\n    rootRef: forwardedRef\n  }));\n  const ownerState = _extends({}, partialOwnerState, {\n    marked: marks.length > 0 && marks.some((mark) => mark.label),\n    dragging,\n    focusedThumbIndex,\n    activeThumbIndex: active\n  });\n  const classes = useUtilityClasses15(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"span\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : \"span\";\n  const railProps = useSlotProps({\n    elementType: Rail,\n    externalSlotProps: slotProps.rail,\n    ownerState,\n    className: classes.rail\n  });\n  const Track = (_slots$track = slots.track) != null ? _slots$track : \"span\";\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    additionalProps: {\n      style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))\n    },\n    ownerState,\n    className: classes.track\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : \"span\";\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    getSlotProps: getThumbProps,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    skipResolvingSlotProps: true\n  });\n  const ValueLabel = slots.valueLabel;\n  const valueLabelProps = useSlotProps({\n    elementType: ValueLabel,\n    externalSlotProps: slotProps.valueLabel,\n    ownerState\n  });\n  const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : \"span\";\n  const markProps = useSlotProps({\n    elementType: Mark,\n    externalSlotProps: slotProps.mark,\n    ownerState,\n    className: classes.mark\n  });\n  const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : \"span\";\n  const markLabelProps = useSlotProps({\n    elementType: MarkLabel,\n    externalSlotProps: slotProps.markLabel,\n    ownerState\n  });\n  const Input3 = slots.input || \"input\";\n  const inputProps = useSlotProps({\n    elementType: Input3,\n    getSlotProps: getHiddenInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState\n  });\n  return (0, import_jsx_runtime33.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime32.jsx)(Rail, _extends({}, railProps)), (0, import_jsx_runtime32.jsx)(Track, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min3 && mark.value <= max3).map((mark, index2) => {\n      const percent = valueToPercent(mark.value, min3, max3);\n      const style = axisProps2[axis].offset(percent);\n      let markActive;\n      if (track === false) {\n        markActive = values.indexOf(mark.value) !== -1;\n      } else {\n        markActive = track === \"normal\" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === \"inverted\" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);\n      }\n      return (0, import_jsx_runtime33.jsxs)(React51.Fragment, {\n        children: [(0, import_jsx_runtime32.jsx)(Mark, _extends({\n          \"data-index\": index2\n        }, markProps, !isHostComponent(Mark) && {\n          markActive\n        }, {\n          style: _extends({}, style, markProps.style),\n          className: clsx_default(markProps.className, markActive && classes.markActive)\n        })), mark.label != null ? (0, import_jsx_runtime32.jsx)(MarkLabel, _extends({\n          \"aria-hidden\": true,\n          \"data-index\": index2\n        }, markLabelProps, !isHostComponent(MarkLabel) && {\n          markLabelActive: markActive\n        }, {\n          style: _extends({}, style, markLabelProps.style),\n          className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),\n          children: mark.label\n        })) : null]\n      }, index2);\n    }), values.map((value, index2) => {\n      const percent = valueToPercent(value, min3, max3);\n      const style = axisProps2[axis].offset(percent);\n      const resolvedSlotProps = resolveComponentProps(slotProps.thumb, ownerState, {\n        index: index2,\n        focused: focusedThumbIndex === index2,\n        active: active === index2\n      });\n      return (0, import_jsx_runtime33.jsxs)(Thumb, _extends({\n        \"data-index\": index2\n      }, thumbProps, resolvedSlotProps, {\n        className: clsx_default(classes.thumb, thumbProps.className, resolvedSlotProps == null ? void 0 : resolvedSlotProps.className, active === index2 && classes.active, focusedThumbIndex === index2 && classes.focusVisible),\n        style: _extends({}, style, getThumbStyle(index2), thumbProps.style, resolvedSlotProps == null ? void 0 : resolvedSlotProps.style),\n        children: [(0, import_jsx_runtime32.jsx)(Input3, _extends({\n          \"data-index\": index2,\n          \"aria-label\": getAriaLabel ? getAriaLabel(index2) : ariaLabel,\n          \"aria-valuenow\": scale(value),\n          \"aria-labelledby\": ariaLabelledby,\n          \"aria-valuetext\": getAriaValueText ? getAriaValueText(scale(value), index2) : ariaValuetext,\n          value: values[index2]\n        }, inputProps)), ValueLabel ? (0, import_jsx_runtime32.jsx)(ValueLabel, _extends({}, !isHostComponent(ValueLabel) && {\n          valueLabelFormat,\n          index: index2,\n          disabled\n        }, valueLabelProps, {\n          children: typeof valueLabelFormat === \"function\" ? valueLabelFormat(scale(value), index2) : valueLabelFormat\n        })) : null]\n      }), index2);\n    })]\n  }));\n});\ntrue ? Slider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The label of the slider.\n   */\n  \"aria-label\": chainPropTypes(import_prop_types21.default.string, (props) => {\n    const range = Array.isArray(props.value || props.defaultValue);\n    if (range && props[\"aria-label\"] != null) {\n      return new Error(\"MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.\");\n    }\n    return null;\n  }),\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  \"aria-labelledby\": import_prop_types21.default.string,\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  \"aria-valuetext\": chainPropTypes(import_prop_types21.default.string, (props) => {\n    const range = Array.isArray(props.value || props.defaultValue);\n    if (range && props[\"aria-valuetext\"] != null) {\n      return new Error(\"MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.\");\n    }\n    return null;\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.number), import_prop_types21.default.number]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types21.default.bool,\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap: import_prop_types21.default.bool,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: import_prop_types21.default.func,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: import_prop_types21.default.func,\n  /**\n   * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).\n   * @default false\n   */\n  isRtl: import_prop_types21.default.bool,\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.shape({\n    label: import_prop_types21.default.node,\n    value: import_prop_types21.default.number.isRequired\n  })), import_prop_types21.default.bool]),\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: import_prop_types21.default.number,\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: import_prop_types21.default.number,\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: import_prop_types21.default.string,\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {Event} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange: import_prop_types21.default.func,\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: import_prop_types21.default.func,\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: import_prop_types21.default.oneOf([\"horizontal\", \"vertical\"]),\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @param {any} x\n   * @returns {any}\n   * @default function Identity(x) {\n   *   return x;\n   * }\n   */\n  scale: import_prop_types21.default.func,\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  slotProps: import_prop_types21.default.shape({\n    input: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    mark: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    markLabel: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    rail: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    thumb: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    track: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),\n    valueLabel: import_prop_types21.default.oneOfType([import_prop_types21.default.any, import_prop_types21.default.func])\n  }),\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types21.default.shape({\n    input: import_prop_types21.default.elementType,\n    mark: import_prop_types21.default.elementType,\n    markLabel: import_prop_types21.default.elementType,\n    rail: import_prop_types21.default.elementType,\n    root: import_prop_types21.default.elementType,\n    thumb: import_prop_types21.default.elementType,\n    track: import_prop_types21.default.elementType,\n    valueLabel: import_prop_types21.default.elementType\n  }),\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: import_prop_types21.default.number,\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex: import_prop_types21.default.number,\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: import_prop_types21.default.oneOf([\"inverted\", \"normal\", false]),\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.number), import_prop_types21.default.number]),\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @param {any} x\n   * @returns {any}\n   * @default function Identity(x) {\n   *   return x;\n   * }\n   */\n  valueLabelFormat: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.string])\n} : void 0;\n\n// node_modules/@mui/base/Snackbar/Snackbar.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React52 = __toESM(require_react());\nvar import_prop_types22 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Snackbar/snackbarClasses.js\nfunction getSnackbarUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSnackbar\", slot);\n}\nvar snackbarClasses = generateUtilityClasses(\"MuiSnackbar\", [\"root\"]);\n\n// node_modules/@mui/base/Snackbar/Snackbar.js\nvar import_jsx_runtime34 = __toESM(require_jsx_runtime());\nvar _excluded18 = [\"autoHideDuration\", \"children\", \"disableWindowBlurListener\", \"exited\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"slotProps\", \"slots\"];\nvar useUtilityClasses16 = () => {\n  const slots = {\n    root: [\"root\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\nvar Snackbar = React52.forwardRef(function Snackbar2(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onClose,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);\n  const classes = useUtilityClasses16();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar(_extends({}, props, {\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  }));\n  const ownerState = props;\n  const Root = slots.root || \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  });\n  delete clickAwayListenerProps.ownerState;\n  if (!open && exited) {\n    return null;\n  }\n  return (0, import_jsx_runtime34.jsx)(ClickAwayListener, _extends({}, clickAwayListenerProps, {\n    children: (0, import_jsx_runtime34.jsx)(Root, _extends({}, rootProps, {\n      children\n    }))\n  }));\n});\ntrue ? Snackbar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: import_prop_types22.default.number,\n  /**\n   * @ignore\n   */\n  children: import_prop_types22.default.node,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: import_prop_types22.default.bool,\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: import_prop_types22.default.bool,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: import_prop_types22.default.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: import_prop_types22.default.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: import_prop_types22.default.number,\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: import_prop_types22.default.shape({\n    clickAwayListener: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.shape({\n      children: import_prop_types22.default.element.isRequired,\n      disableReactTree: import_prop_types22.default.bool,\n      mouseEvent: import_prop_types22.default.oneOf([\"onClick\", \"onMouseDown\", \"onMouseUp\", \"onPointerDown\", \"onPointerUp\", false]),\n      onClickAway: import_prop_types22.default.func,\n      touchEvent: import_prop_types22.default.oneOf([\"onTouchEnd\", \"onTouchStart\", false])\n    })]),\n    root: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types22.default.shape({\n    root: import_prop_types22.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Switch/Switch.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React54 = __toESM(require_react());\nvar import_prop_types23 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/useSwitch/useSwitch.js\ninit_extends();\nvar React53 = __toESM(require_react());\ninit_esm();\nfunction useSwitch(props) {\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    disabled,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly,\n    required\n  } = props;\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: \"Switch\",\n    state: \"checked\"\n  });\n  const createHandleInputChange = (otherProps) => (event) => {\n    var _otherProps$onChange;\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n    setCheckedState(event.target.checked);\n    onChange == null || onChange(event);\n    (_otherProps$onChange = otherProps.onChange) == null || _otherProps$onChange.call(otherProps, event);\n  };\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React53.useState(false);\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  React53.useEffect(() => {\n    isFocusVisibleRef.current = focusVisible;\n  }, [focusVisible, isFocusVisibleRef]);\n  const inputRef = React53.useRef(null);\n  const createHandleFocus = (otherProps) => (event) => {\n    var _otherProps$onFocus;\n    if (!inputRef.current) {\n      inputRef.current = event.currentTarget;\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n      onFocusVisible == null || onFocusVisible(event);\n    }\n    onFocus == null || onFocus(event);\n    (_otherProps$onFocus = otherProps.onFocus) == null || _otherProps$onFocus.call(otherProps, event);\n  };\n  const createHandleBlur = (otherProps) => (event) => {\n    var _otherProps$onBlur;\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    onBlur == null || onBlur(event);\n    (_otherProps$onBlur = otherProps.onBlur) == null || _otherProps$onBlur.call(otherProps, event);\n  };\n  const handleInputRef = useForkRef(focusVisibleRef, inputRef);\n  const getInputProps = (otherProps = {}) => _extends({\n    checked: checkedProp,\n    defaultChecked,\n    disabled,\n    readOnly,\n    ref: handleInputRef,\n    required,\n    type: \"checkbox\"\n  }, otherProps, {\n    onChange: createHandleInputChange(otherProps),\n    onFocus: createHandleFocus(otherProps),\n    onBlur: createHandleBlur(otherProps)\n  });\n  return {\n    checked,\n    disabled: Boolean(disabled),\n    focusVisible,\n    getInputProps,\n    inputRef: handleInputRef,\n    readOnly: Boolean(readOnly)\n  };\n}\n\n// node_modules/@mui/base/Switch/switchClasses.js\nfunction getSwitchUtilityClass(slot) {\n  return generateUtilityClass(\"MuiSwitch\", slot);\n}\nvar switchClasses = generateUtilityClasses(\"MuiSwitch\", [\"root\", \"input\", \"track\", \"thumb\", \"checked\", \"disabled\", \"focusVisible\", \"readOnly\"]);\n\n// node_modules/@mui/base/Switch/Switch.js\nvar import_jsx_runtime35 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime36 = __toESM(require_jsx_runtime());\nvar _excluded19 = [\"checked\", \"defaultChecked\", \"disabled\", \"onBlur\", \"onChange\", \"onFocus\", \"onFocusVisible\", \"readOnly\", \"required\", \"slotProps\", \"slots\"];\nvar useUtilityClasses17 = (ownerState) => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = ownerState;\n  const slots = {\n    root: [\"root\", checked && \"checked\", disabled && \"disabled\", focusVisible && \"focusVisible\", readOnly && \"readOnly\"],\n    thumb: [\"thumb\"],\n    input: [\"input\"],\n    track: [\"track\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\nvar Switch = React54.forwardRef(function Switch2(props, forwardedRef) {\n  var _slots$root, _slots$thumb, _slots$input, _slots$track;\n  const {\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(props);\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  });\n  const classes = useUtilityClasses17(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"span\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : \"span\";\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    className: classes.thumb\n  });\n  const Input3 = (_slots$input = slots.input) != null ? _slots$input : \"input\";\n  const inputProps = useSlotProps({\n    elementType: Input3,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : \"span\";\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState,\n    className: classes.track\n  });\n  return (0, import_jsx_runtime36.jsxs)(Root, _extends({}, rootProps, {\n    children: [(0, import_jsx_runtime35.jsx)(Track, _extends({}, trackProps)), (0, import_jsx_runtime35.jsx)(Thumb, _extends({}, thumbProps)), (0, import_jsx_runtime35.jsx)(Input3, _extends({}, inputProps))]\n  }));\n});\ntrue ? Switch.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: import_prop_types23.default.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: import_prop_types23.default.string,\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: import_prop_types23.default.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: import_prop_types23.default.bool,\n  /**\n   * @ignore\n   */\n  onBlur: import_prop_types23.default.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: import_prop_types23.default.func,\n  /**\n   * @ignore\n   */\n  onFocus: import_prop_types23.default.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: import_prop_types23.default.func,\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: import_prop_types23.default.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: import_prop_types23.default.bool,\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  slotProps: import_prop_types23.default.shape({\n    input: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),\n    root: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),\n    thumb: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),\n    track: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types23.default.shape({\n    input: import_prop_types23.default.elementType,\n    root: import_prop_types23.default.elementType,\n    thumb: import_prop_types23.default.elementType,\n    track: import_prop_types23.default.oneOfType([import_prop_types23.default.elementType, import_prop_types23.default.oneOf([null])])\n  })\n} : void 0;\n\n// node_modules/@mui/base/TablePagination/TablePagination.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React56 = __toESM(require_react());\nvar import_prop_types24 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/TablePagination/TablePaginationActions.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React55 = __toESM(require_react());\nvar import_jsx_runtime37 = __toESM(require_jsx_runtime());\nvar import_jsx_runtime38 = __toESM(require_jsx_runtime());\nvar _excluded20 = [\"count\", \"getItemAriaLabel\", \"onPageChange\", \"page\", \"rowsPerPage\", \"showFirstButton\", \"showLastButton\", \"direction\", \"ownerState\", \"slotProps\", \"slots\"];\nvar _span2;\nvar _span22;\nvar _span3;\nvar _span4;\nfunction LastPageIconDefault() {\n  return _span2 || (_span2 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"⇾|\"\n  }));\n}\nfunction FirstPageIconDefault() {\n  return _span22 || (_span22 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"|⇽\"\n  }));\n}\nfunction NextPageIconDefault() {\n  return _span3 || (_span3 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"⇾\"\n  }));\n}\nfunction BackPageIconDefault() {\n  return _span4 || (_span4 = (0, import_jsx_runtime37.jsx)(\"span\", {\n    children: \"⇽\"\n  }));\n}\nfunction defaultGetAriaLabel(type) {\n  return `Go to ${type} page`;\n}\nvar TablePaginationActions = React55.forwardRef(function TablePaginationActions2(props, forwardedRef) {\n  var _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;\n  const {\n    count,\n    getItemAriaLabel = defaultGetAriaLabel,\n    onPageChange,\n    page,\n    rowsPerPage,\n    showFirstButton = false,\n    showLastButton = false,\n    direction,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);\n  const ownerState = props;\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState\n  });\n  const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : \"button\";\n  const firstButtonProps = useSlotProps({\n    elementType: FirstButton,\n    externalSlotProps: slotProps.firstButton,\n    additionalProps: {\n      onClick: handleFirstPageButtonClick,\n      disabled: page === 0,\n      \"aria-label\": getItemAriaLabel(\"first\", page),\n      title: getItemAriaLabel(\"first\", page)\n    },\n    ownerState\n  });\n  const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : \"button\";\n  const lastButtonProps = useSlotProps({\n    elementType: LastButton,\n    externalSlotProps: slotProps.lastButton,\n    additionalProps: {\n      onClick: handleLastPageButtonClick,\n      disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n      \"aria-label\": getItemAriaLabel(\"last\", page),\n      title: getItemAriaLabel(\"last\", page)\n    },\n    ownerState\n  });\n  const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : \"button\";\n  const nextButtonProps = useSlotProps({\n    elementType: NextButton,\n    externalSlotProps: slotProps.nextButton,\n    additionalProps: {\n      onClick: handleNextButtonClick,\n      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,\n      \"aria-label\": getItemAriaLabel(\"next\", page),\n      title: getItemAriaLabel(\"next\", page)\n    },\n    ownerState\n  });\n  const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : \"button\";\n  const backButtonProps = useSlotProps({\n    elementType: BackButton,\n    externalSlotProps: slotProps.backButton,\n    additionalProps: {\n      onClick: handleBackButtonClick,\n      disabled: page === 0,\n      \"aria-label\": getItemAriaLabel(\"previous\", page),\n      title: getItemAriaLabel(\"previous\", page)\n    },\n    ownerState\n  });\n  const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;\n  const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;\n  const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;\n  const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;\n  return (0, import_jsx_runtime38.jsxs)(Root, _extends({}, rootProps, {\n    children: [showFirstButton && (0, import_jsx_runtime37.jsx)(FirstButton, _extends({}, firstButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(LastPageIcon, {}) : (0, import_jsx_runtime37.jsx)(FirstPageIcon, {})\n    })), (0, import_jsx_runtime37.jsx)(BackButton, _extends({}, backButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(NextPageIcon, {}) : (0, import_jsx_runtime37.jsx)(BackPageIcon, {})\n    })), (0, import_jsx_runtime37.jsx)(NextButton, _extends({}, nextButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(BackPageIcon, {}) : (0, import_jsx_runtime37.jsx)(NextPageIcon, {})\n    })), showLastButton && (0, import_jsx_runtime37.jsx)(LastButton, _extends({}, lastButtonProps, {\n      children: direction === \"rtl\" ? (0, import_jsx_runtime37.jsx)(FirstPageIcon, {}) : (0, import_jsx_runtime37.jsx)(LastPageIcon, {})\n    }))]\n  }));\n});\n\n// node_modules/@mui/base/TablePagination/tablePaginationClasses.js\nfunction getTablePaginationUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTablePagination\", slot);\n}\nvar tablePaginationClasses = generateUtilityClasses(\"MuiTablePagination\", [\"root\", \"toolbar\", \"spacer\", \"selectLabel\", \"selectRoot\", \"select\", \"selectIcon\", \"input\", \"menuItem\", \"displayedRows\", \"actions\"]);\n\n// node_modules/@mui/base/TablePagination/TablePagination.js\nvar import_jsx_runtime39 = __toESM(require_jsx_runtime());\nvar import_react2 = __toESM(require_react());\nvar import_jsx_runtime40 = __toESM(require_jsx_runtime());\nvar _excluded21 = [\"colSpan\", \"count\", \"getItemAriaLabel\", \"labelDisplayedRows\", \"labelId\", \"labelRowsPerPage\", \"onPageChange\", \"onRowsPerPageChange\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"selectId\", \"slotProps\", \"slots\"];\nfunction defaultLabelDisplayedRows({\n  from,\n  to,\n  count\n}) {\n  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n}\nfunction defaultGetAriaLabel2(type) {\n  return `Go to ${type} page`;\n}\nvar useUtilityClasses18 = () => {\n  const slots = {\n    root: [\"root\"],\n    toolbar: [\"toolbar\"],\n    spacer: [\"spacer\"],\n    selectLabel: [\"selectLabel\"],\n    select: [\"select\"],\n    input: [\"input\"],\n    selectIcon: [\"selectIcon\"],\n    menuItem: [\"menuItem\"],\n    displayedRows: [\"displayedRows\"],\n    actions: [\"actions\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTablePaginationUtilityClass));\n};\nvar TablePagination = React56.forwardRef(function TablePagination2(props, forwardedRef) {\n  var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;\n  const {\n    colSpan: colSpanProp,\n    count,\n    getItemAriaLabel = defaultGetAriaLabel2,\n    labelDisplayedRows = defaultLabelDisplayedRows,\n    labelId: labelIdProp,\n    labelRowsPerPage = \"Rows per page:\",\n    onPageChange,\n    onRowsPerPageChange,\n    page,\n    rowsPerPage,\n    rowsPerPageOptions = [10, 25, 50, 100],\n    selectId: selectIdProp,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);\n  const ownerState = props;\n  const classes = useUtilityClasses18();\n  let colSpan;\n  const Root = (_slots$root = slots.root) != null ? _slots$root : \"td\";\n  if (Root === \"td\" || !isHostComponent(Root)) {\n    colSpan = colSpanProp || 1e3;\n  }\n  const getLabelDisplayedRowsTo = () => {\n    if (count === -1) {\n      return (page + 1) * rowsPerPage;\n    }\n    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);\n  };\n  const selectId = useId(selectIdProp);\n  const labelId = useId(labelIdProp);\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      colSpan,\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Select3 = (_slots$select = slots.select) != null ? _slots$select : \"select\";\n  const selectProps = useSlotProps({\n    elementType: Select3,\n    externalSlotProps: slotProps.select,\n    additionalProps: {\n      value: rowsPerPage,\n      id: selectId,\n      onChange: (event) => onRowsPerPageChange && onRowsPerPageChange(event),\n      \"aria-label\": rowsPerPage.toString(),\n      \"aria-labelledby\": [labelId, selectId].filter(Boolean).join(\" \") || void 0\n    },\n    ownerState,\n    className: classes.select\n  });\n  const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActions;\n  const actionsProps = useSlotProps({\n    elementType: Actions,\n    externalSlotProps: slotProps.actions,\n    additionalProps: {\n      page,\n      rowsPerPage,\n      count,\n      onPageChange,\n      getItemAriaLabel\n    },\n    ownerState,\n    className: classes.actions\n  });\n  const MenuItem4 = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : \"option\";\n  const menuItemProps = useSlotProps({\n    elementType: MenuItem4,\n    externalSlotProps: slotProps.menuItem,\n    additionalProps: {\n      value: void 0\n    },\n    ownerState,\n    className: classes.menuItem\n  });\n  const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : \"p\";\n  const selectLabelProps = useSlotProps({\n    elementType: SelectLabel,\n    externalSlotProps: slotProps.selectLabel,\n    additionalProps: {\n      id: labelId\n    },\n    ownerState,\n    className: classes.selectLabel\n  });\n  const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : \"p\";\n  const displayedRowsProps = useSlotProps({\n    elementType: DisplayedRows,\n    externalSlotProps: slotProps.displayedRows,\n    ownerState,\n    className: classes.displayedRows\n  });\n  const Toolbar = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : \"div\";\n  const toolbarProps = useSlotProps({\n    elementType: Toolbar,\n    externalSlotProps: slotProps.toolbar,\n    ownerState,\n    className: classes.toolbar\n  });\n  const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : \"div\";\n  const spacerProps = useSlotProps({\n    elementType: Spacer,\n    externalSlotProps: slotProps.spacer,\n    ownerState,\n    className: classes.spacer\n  });\n  return (0, import_jsx_runtime39.jsx)(Root, _extends({}, rootProps, {\n    children: (0, import_jsx_runtime40.jsxs)(Toolbar, _extends({}, toolbarProps, {\n      children: [(0, import_jsx_runtime39.jsx)(Spacer, _extends({}, spacerProps)), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime39.jsx)(SelectLabel, _extends({}, selectLabelProps, {\n        children: labelRowsPerPage\n      })), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime39.jsx)(Select3, _extends({}, selectProps, {\n        children: rowsPerPageOptions.map((rowsPerPageOption) => (0, import_react2.createElement)(MenuItem4, _extends({}, menuItemProps, {\n          key: typeof rowsPerPageOption !== \"number\" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,\n          value: typeof rowsPerPageOption !== \"number\" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption\n        }), typeof rowsPerPageOption !== \"number\" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))\n      })), (0, import_jsx_runtime39.jsx)(DisplayedRows, _extends({}, displayedRowsProps, {\n        children: labelDisplayedRows({\n          from: count === 0 ? 0 : page * rowsPerPage + 1,\n          to: getLabelDisplayedRowsTo(),\n          count: count === -1 ? -1 : count,\n          page\n        })\n      })), (0, import_jsx_runtime39.jsx)(Actions, _extends({}, actionsProps))]\n    }))\n  }));\n});\ntrue ? TablePagination.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  colSpan: import_prop_types24.default.number,\n  /**\n   * The total number of rows.\n   *\n   * To enable server side pagination for an unknown number of items, provide -1.\n   */\n  count: import_prop_types24.default.number.isRequired,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n   * @returns {string}\n   * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {\n   *   return `Go to ${type} page`;\n   * }\n   */\n  getItemAriaLabel: import_prop_types24.default.func,\n  /**\n   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n   * object.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {\n   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n   * }\n   */\n  labelDisplayedRows: import_prop_types24.default.func,\n  /**\n   * Id of the label element within the pagination.\n   */\n  labelId: import_prop_types24.default.string,\n  /**\n   * Customize the rows per page label.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Rows per page:'\n   */\n  labelRowsPerPage: import_prop_types24.default.node,\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: import_prop_types24.default.func.isRequired,\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n   */\n  onRowsPerPageChange: import_prop_types24.default.func,\n  /**\n   * The zero-based index of the current page.\n   */\n  page: chainPropTypes(integerPropType_default.isRequired, (props) => {\n    const {\n      count,\n      page,\n      rowsPerPage\n    } = props;\n    if (count === -1) {\n      return null;\n    }\n    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n    if (page < 0 || page > newLastPage) {\n      return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);\n    }\n    return null;\n  }),\n  /**\n   * The number of rows per page.\n   *\n   * Set -1 to display all the rows.\n   */\n  rowsPerPage: integerPropType_default.isRequired,\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   * Use -1 for the value with a custom label to show all the rows.\n   * @default [10, 25, 50, 100]\n   */\n  rowsPerPageOptions: import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.shape({\n    label: import_prop_types24.default.string.isRequired,\n    value: import_prop_types24.default.number.isRequired\n  })]).isRequired),\n  /**\n   * Id of the select element within the pagination.\n   */\n  selectId: import_prop_types24.default.string,\n  /**\n   * The props used for each slot inside the TablePagination.\n   * @default {}\n   */\n  slotProps: import_prop_types24.default.shape({\n    actions: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    displayedRows: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    menuItem: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    root: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    select: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    selectLabel: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    spacer: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),\n    toolbar: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object])\n  }),\n  /**\n   * The components used for each slot inside the TablePagination.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types24.default.shape({\n    actions: import_prop_types24.default.elementType,\n    displayedRows: import_prop_types24.default.elementType,\n    menuItem: import_prop_types24.default.elementType,\n    root: import_prop_types24.default.elementType,\n    select: import_prop_types24.default.elementType,\n    selectLabel: import_prop_types24.default.elementType,\n    spacer: import_prop_types24.default.elementType,\n    toolbar: import_prop_types24.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/TabPanel/TabPanel.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React62 = __toESM(require_react());\nvar import_prop_types26 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/TabPanel/tabPanelClasses.js\nfunction getTabPanelUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTabPanel\", slot);\n}\nvar tabPanelClasses = generateUtilityClasses(\"MuiTabPanel\", [\"root\", \"hidden\"]);\n\n// node_modules/@mui/base/useTabPanel/useTabPanel.js\ninit_extends();\nvar React61 = __toESM(require_react());\ninit_esm();\n\n// node_modules/@mui/base/Tabs/Tabs.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React60 = __toESM(require_react());\nvar import_prop_types25 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/Tabs/tabsClasses.js\nfunction getTabsUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTabs\", slot);\n}\nvar tabsClasses = generateUtilityClasses(\"MuiTabs\", [\"root\", \"horizontal\", \"vertical\"]);\n\n// node_modules/@mui/base/useTabs/useTabs.js\ninit_extends();\nvar React57 = __toESM(require_react());\ninit_esm();\nfunction useTabs(parameters) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    selectionFollowsFocus = false\n  } = parameters;\n  const [value, setValue] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: \"Tabs\",\n    state: \"value\"\n  });\n  const onSelected = React57.useCallback((event, newValue) => {\n    setValue(newValue);\n    onChange == null || onChange(event, newValue);\n  }, [onChange, setValue]);\n  const {\n    subitems: tabPanels,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const tabIdLookup = React57.useRef(() => void 0);\n  const getTabPanelId = React57.useCallback((tabValue) => {\n    var _tabPanels$get;\n    return (_tabPanels$get = tabPanels.get(tabValue)) == null ? void 0 : _tabPanels$get.id;\n  }, [tabPanels]);\n  const getTabId = React57.useCallback((tabPanelId) => {\n    return tabIdLookup.current(tabPanelId);\n  }, []);\n  const registerTabIdLookup = React57.useCallback((lookupFunction) => {\n    tabIdLookup.current = lookupFunction;\n  }, []);\n  return {\n    contextValue: _extends({\n      direction,\n      getTabId,\n      getTabPanelId,\n      onSelected,\n      orientation,\n      registerTabIdLookup,\n      selectionFollowsFocus,\n      value\n    }, compoundComponentContextValue)\n  };\n}\n\n// node_modules/@mui/base/useTabs/TabsProvider.js\nvar React59 = __toESM(require_react());\n\n// node_modules/@mui/base/Tabs/TabsContext.js\nvar React58 = __toESM(require_react());\nvar TabsContext = React58.createContext(null);\nif (true) {\n  TabsContext.displayName = \"TabsContext\";\n}\nfunction useTabsContext() {\n  const context = React58.useContext(TabsContext);\n  if (context == null) {\n    throw new Error(\"No TabsContext provided\");\n  }\n  return context;\n}\n\n// node_modules/@mui/base/useTabs/TabsProvider.js\nvar import_jsx_runtime41 = __toESM(require_jsx_runtime());\nfunction TabsProvider(props) {\n  const {\n    value: valueProp,\n    children\n  } = props;\n  const {\n    direction,\n    getItemIndex,\n    onSelected,\n    orientation,\n    registerItem,\n    registerTabIdLookup,\n    selectionFollowsFocus,\n    totalSubitemCount,\n    value,\n    getTabId,\n    getTabPanelId\n  } = valueProp;\n  const compoundComponentContextValue = React59.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  const tabsContextValue = React59.useMemo(() => ({\n    direction,\n    getTabId,\n    getTabPanelId,\n    onSelected,\n    orientation,\n    registerTabIdLookup,\n    selectionFollowsFocus,\n    value\n  }), [direction, getTabId, getTabPanelId, onSelected, orientation, registerTabIdLookup, selectionFollowsFocus, value]);\n  return (0, import_jsx_runtime41.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime41.jsx)(TabsContext.Provider, {\n      value: tabsContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/Tabs/Tabs.js\nvar import_jsx_runtime42 = __toESM(require_jsx_runtime());\nvar _excluded23 = [\"children\", \"value\", \"defaultValue\", \"orientation\", \"direction\", \"onChange\", \"selectionFollowsFocus\", \"slotProps\", \"slots\"];\nvar useUtilityClasses19 = (ownerState) => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: [\"root\", orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsUtilityClass));\n};\nvar Tabs = React60.forwardRef(function Tabs2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);\n  const ownerState = _extends({}, props, {\n    orientation,\n    direction\n  });\n  const {\n    contextValue\n  } = useTabs(ownerState);\n  const classes = useUtilityClasses19(ownerState);\n  const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const tabsRootProps = useSlotProps({\n    elementType: TabsRoot,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime42.jsx)(TabsRoot, _extends({}, tabsRootProps, {\n    children: (0, import_jsx_runtime42.jsx)(TabsProvider, {\n      value: contextValue,\n      children\n    })\n  }));\n});\ntrue ? Tabs.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types25.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types25.default.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string]),\n  /**\n   * The direction of the text.\n   * @default 'ltr'\n   */\n  direction: import_prop_types25.default.oneOf([\"ltr\", \"rtl\"]),\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: import_prop_types25.default.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: import_prop_types25.default.oneOf([\"horizontal\", \"vertical\"]),\n  /**\n   * If `true` the selected tab changes on focus. Otherwise it only\n   * changes on activation.\n   */\n  selectionFollowsFocus: import_prop_types25.default.bool,\n  /**\n   * The props used for each slot inside the Tabs.\n   * @default {}\n   */\n  slotProps: import_prop_types25.default.shape({\n    root: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Tabs.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types25.default.shape({\n    root: import_prop_types25.default.elementType\n  }),\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this prop to `null`.\n   */\n  value: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string])\n} : void 0;\n\n// node_modules/@mui/base/useTabPanel/useTabPanel.js\nfunction tabPanelValueGenerator(otherTabPanelValues) {\n  return otherTabPanelValues.size;\n}\nfunction useTabPanel(parameters) {\n  const {\n    value: valueParam,\n    id: idParam,\n    rootRef: externalRef\n  } = parameters;\n  const context = useTabsContext();\n  if (context === null) {\n    throw new Error(\"No TabContext provided\");\n  }\n  const {\n    value: selectedTabValue,\n    getTabId\n  } = context;\n  const id = useId(idParam);\n  const ref = React61.useRef(null);\n  const handleRef = useForkRef(ref, externalRef);\n  const metadata = React61.useMemo(() => ({\n    id,\n    ref\n  }), [id]);\n  const {\n    id: value\n  } = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata);\n  const hidden = value !== selectedTabValue;\n  const correspondingTabId = value !== void 0 ? getTabId(value) : void 0;\n  const getRootProps = (externalProps = {}) => {\n    return _extends({\n      \"aria-labelledby\": correspondingTabId != null ? correspondingTabId : void 0,\n      hidden,\n      id: id != null ? id : void 0\n    }, externalProps, {\n      ref: handleRef\n    });\n  };\n  return {\n    hidden,\n    getRootProps,\n    rootRef: handleRef\n  };\n}\n\n// node_modules/@mui/base/TabPanel/TabPanel.js\nvar import_jsx_runtime43 = __toESM(require_jsx_runtime());\nvar _excluded24 = [\"children\", \"value\", \"slotProps\", \"slots\"];\nvar useUtilityClasses20 = (ownerState) => {\n  const {\n    hidden\n  } = ownerState;\n  const slots = {\n    root: [\"root\", hidden && \"hidden\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));\n};\nvar TabPanel = React62.forwardRef(function TabPanel2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);\n  const {\n    hidden,\n    getRootProps\n  } = useTabPanel(props);\n  const ownerState = _extends({}, props, {\n    hidden\n  });\n  const classes = useUtilityClasses20(ownerState);\n  const TabPanelRoot = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const tabPanelRootProps = useSlotProps({\n    elementType: TabPanelRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: \"tabpanel\",\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime43.jsx)(TabPanelRoot, _extends({}, tabPanelRootProps, {\n    children: !hidden && children\n  }));\n});\ntrue ? TabPanel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types26.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types26.default.string,\n  /**\n   * The props used for each slot inside the TabPanel.\n   * @default {}\n   */\n  slotProps: import_prop_types26.default.shape({\n    root: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object])\n  }),\n  /**\n   * The components used for each slot inside the TabPanel.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types26.default.shape({\n    root: import_prop_types26.default.elementType\n  }),\n  /**\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n   * If not provided, it will fall back to the index of the panel.\n   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\n   */\n  value: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string])\n} : void 0;\n\n// node_modules/@mui/base/TabsList/TabsList.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React65 = __toESM(require_react());\nvar import_prop_types27 = __toESM(require_prop_types());\ninit_composeClasses();\n\n// node_modules/@mui/base/TabsList/tabsListClasses.js\nfunction getTabsListUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTabsList\", slot);\n}\nvar tabsListClasses = generateUtilityClasses(\"MuiTabsList\", [\"root\", \"horizontal\", \"vertical\"]);\n\n// node_modules/@mui/base/useTabsList/useTabsList.js\ninit_extends();\nvar React63 = __toESM(require_react());\n\n// node_modules/@mui/base/useTabsList/useTabsList.types.js\nvar TabsListActionTypes = {\n  valueChange: \"valueChange\"\n};\n\n// node_modules/@mui/base/useTabsList/tabsListReducer.js\ninit_extends();\nfunction tabsListReducer(state, action) {\n  if (action.type === TabsListActionTypes.valueChange) {\n    return _extends({}, state, {\n      highlightedValue: action.value\n    });\n  }\n  const newState = listReducer(state, action);\n  const {\n    context: {\n      selectionFollowsFocus\n    }\n  } = action;\n  if (action.type === ListActionTypes.itemsChange) {\n    if (newState.selectedValues.length > 0) {\n      return _extends({}, newState, {\n        highlightedValue: newState.selectedValues[0]\n      });\n    }\n    moveHighlight(null, \"reset\", action.context);\n  }\n  if (selectionFollowsFocus && newState.highlightedValue != null) {\n    return _extends({}, newState, {\n      selectedValues: [newState.highlightedValue]\n    });\n  }\n  return newState;\n}\n\n// node_modules/@mui/base/useTabsList/useTabsList.js\nfunction useTabsList(parameters) {\n  var _selectedValues$;\n  const {\n    rootRef: externalRef\n  } = parameters;\n  const {\n    direction = \"ltr\",\n    onSelected,\n    orientation = \"horizontal\",\n    value,\n    registerTabIdLookup,\n    selectionFollowsFocus\n  } = useTabsContext();\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const tabIdLookup = React63.useCallback((tabValue) => {\n    var _subitems$get;\n    return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;\n  }, [subitems]);\n  registerTabIdLookup(tabIdLookup);\n  const subitemKeys = React63.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getTabElement = React63.useCallback((tabValue) => {\n    var _subitems$get$ref$cur, _subitems$get2;\n    if (tabValue == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const isRtl = direction === \"rtl\";\n  let listOrientation;\n  if (orientation === \"vertical\") {\n    listOrientation = \"vertical\";\n  } else {\n    listOrientation = isRtl ? \"horizontal-rtl\" : \"horizontal-ltr\";\n  }\n  const handleChange = React63.useCallback((event, newValue) => {\n    var _newValue$;\n    onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);\n  }, [onSelected]);\n  const controlledProps = React63.useMemo(() => {\n    if (value === void 0) {\n      return {};\n    }\n    return value != null ? {\n      selectedValues: [value]\n    } : {\n      selectedValues: []\n    };\n  }, [value]);\n  const isItemDisabled = React63.useCallback((item) => {\n    var _subitems$get$disable, _subitems$get3;\n    return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;\n  }, [subitems]);\n  const {\n    contextValue: listContextValue,\n    dispatch,\n    getRootProps: getListboxRootProps,\n    state: {\n      highlightedValue,\n      selectedValues\n    },\n    rootRef: mergedRootRef\n  } = useList({\n    controlledProps,\n    disabledItemsFocusable: !selectionFollowsFocus,\n    focusManagement: \"DOM\",\n    getItemDomElement: getTabElement,\n    isItemDisabled,\n    items: subitemKeys,\n    rootRef: externalRef,\n    onChange: handleChange,\n    orientation: listOrientation,\n    reducerActionContext: React63.useMemo(() => ({\n      selectionFollowsFocus: selectionFollowsFocus || false\n    }), [selectionFollowsFocus]),\n    selectionMode: \"single\",\n    stateReducer: tabsListReducer\n  });\n  React63.useEffect(() => {\n    if (value === void 0) {\n      return;\n    }\n    if (value != null) {\n      dispatch({\n        type: TabsListActionTypes.valueChange,\n        value\n      });\n    }\n  }, [dispatch, value]);\n  const getRootProps = (externalProps = {}) => {\n    return _extends({}, externalProps, getListboxRootProps(externalProps), {\n      \"aria-orientation\": orientation === \"vertical\" ? \"vertical\" : void 0,\n      role: \"tablist\"\n    });\n  };\n  const contextValue = React63.useMemo(() => _extends({}, compoundComponentContextValue, listContextValue), [compoundComponentContextValue, listContextValue]);\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    highlightedValue,\n    isRtl,\n    orientation,\n    rootRef: mergedRootRef,\n    selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null\n  };\n}\n\n// node_modules/@mui/base/useTabsList/TabsListProvider.js\nvar React64 = __toESM(require_react());\nvar import_jsx_runtime44 = __toESM(require_jsx_runtime());\nfunction TabsListProvider(props) {\n  const {\n    value,\n    children\n  } = props;\n  const {\n    dispatch,\n    getItemIndex,\n    getItemState,\n    registerItem,\n    totalSubitemCount\n  } = value;\n  const listContextValue = React64.useMemo(() => ({\n    dispatch,\n    getItemState,\n    getItemIndex\n  }), [dispatch, getItemIndex, getItemState]);\n  const compoundComponentContextValue = React64.useMemo(() => ({\n    getItemIndex,\n    registerItem,\n    totalSubitemCount\n  }), [registerItem, getItemIndex, totalSubitemCount]);\n  return (0, import_jsx_runtime44.jsx)(CompoundComponentContext.Provider, {\n    value: compoundComponentContextValue,\n    children: (0, import_jsx_runtime44.jsx)(ListContext.Provider, {\n      value: listContextValue,\n      children\n    })\n  });\n}\n\n// node_modules/@mui/base/TabsList/TabsList.js\nvar import_jsx_runtime45 = __toESM(require_jsx_runtime());\nvar _excluded25 = [\"children\", \"slotProps\", \"slots\"];\nvar useUtilityClasses21 = (ownerState) => {\n  const {\n    orientation\n  } = ownerState;\n  const slots = {\n    root: [\"root\", orientation]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabsListUtilityClass));\n};\nvar TabsList = React65.forwardRef(function TabsList2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    slotProps = {},\n    slots = {}\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);\n  const {\n    isRtl,\n    orientation,\n    getRootProps,\n    contextValue\n  } = useTabsList({\n    rootRef: forwardedRef\n  });\n  const ownerState = _extends({}, props, {\n    isRtl,\n    orientation\n  });\n  const classes = useUtilityClasses21(ownerState);\n  const TabsListRoot = (_slots$root = slots.root) != null ? _slots$root : \"div\";\n  const tabsListRootProps = useSlotProps({\n    elementType: TabsListRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime45.jsx)(TabsListProvider, {\n    value: contextValue,\n    children: (0, import_jsx_runtime45.jsx)(TabsListRoot, _extends({}, tabsListRootProps, {\n      children\n    }))\n  });\n});\ntrue ? TabsList.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: import_prop_types27.default.node,\n  /**\n   * @ignore\n   */\n  className: import_prop_types27.default.string,\n  /**\n   * The props used for each slot inside the TabsList.\n   * @default {}\n   */\n  slotProps: import_prop_types27.default.shape({\n    root: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object])\n  }),\n  /**\n   * The components used for each slot inside the TabsList.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types27.default.shape({\n    root: import_prop_types27.default.elementType\n  })\n} : void 0;\n\n// node_modules/@mui/base/Tab/Tab.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar React67 = __toESM(require_react());\nvar import_prop_types28 = __toESM(require_prop_types());\ninit_esm();\ninit_composeClasses();\n\n// node_modules/@mui/base/Tab/tabClasses.js\nfunction getTabUtilityClass(slot) {\n  return generateUtilityClass(\"MuiTab\", slot);\n}\nvar tabClasses = generateUtilityClasses(\"MuiTab\", [\"root\", \"selected\", \"disabled\"]);\n\n// node_modules/@mui/base/useTab/useTab.js\ninit_extends();\nvar React66 = __toESM(require_react());\ninit_esm();\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React66.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React66.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index: index2,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: \"button\"\n  });\n  const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  const tabPanelId = value !== void 0 ? getTabPanelId(value) : void 0;\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: \"tab\",\n      \"aria-controls\": tabPanelId,\n      \"aria-selected\": selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index: index2,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\n\n// node_modules/@mui/base/Tab/Tab.js\nvar import_jsx_runtime46 = __toESM(require_jsx_runtime());\nvar _excluded26 = [\"action\", \"children\", \"disabled\", \"onChange\", \"onClick\", \"onFocus\", \"slotProps\", \"slots\", \"value\"];\nvar useUtilityClasses22 = (ownerState) => {\n  const {\n    selected,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: [\"root\", selected && \"selected\", disabled && \"disabled\"]\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\nvar Tab = React67.forwardRef(function Tab2(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    disabled = false,\n    slotProps = {},\n    slots = {},\n    value\n  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);\n  const tabRef = React67.useRef();\n  const handleRef = useForkRef(tabRef, forwardedRef);\n  const {\n    active,\n    highlighted,\n    selected,\n    getRootProps\n  } = useTab(_extends({}, props, {\n    rootRef: handleRef,\n    value\n  }));\n  const ownerState = _extends({}, props, {\n    active,\n    disabled,\n    highlighted,\n    selected\n  });\n  const classes = useUtilityClasses22(ownerState);\n  const TabRoot = (_slots$root = slots.root) != null ? _slots$root : \"button\";\n  const tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return (0, import_jsx_runtime46.jsx)(TabRoot, _extends({}, tabRootProps, {\n    children\n  }));\n});\ntrue ? Tab.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.shape({\n    current: import_prop_types28.default.shape({\n      focusVisible: import_prop_types28.default.func.isRequired\n    })\n  })]),\n  /**\n   * @ignore\n   */\n  children: import_prop_types28.default.node,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: import_prop_types28.default.bool,\n  /**\n   * Callback invoked when new value is being set.\n   */\n  onChange: import_prop_types28.default.func,\n  /**\n   * The props used for each slot inside the Tab.\n   * @default {}\n   */\n  slotProps: import_prop_types28.default.shape({\n    root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])\n  }),\n  /**\n   * The components used for each slot inside the Tab.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: import_prop_types28.default.shape({\n    root: import_prop_types28.default.elementType\n  }),\n  /**\n   * You can provide your own value. Otherwise, it falls back to the child position index.\n   */\n  value: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string])\n} : void 0;\n\nexport {\n  isHostComponent,\n  appendOwnerState,\n  useSlotProps,\n  useBadge,\n  ClickAwayListener,\n  FocusTrap,\n  Portal,\n  Popper,\n  ModalManager,\n  useModal,\n  NoSsr,\n  valueToPercent,\n  useSlider,\n  useSnackbar,\n  TextareaAutosize,\n  createFilterOptions,\n  useAutocomplete\n};\n/*! Bundled license information:\n\n@mui/base/index.js:\n  (**\n   * @mui/base v5.0.0-beta.24\n   *\n   * @license MIT\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n//# sourceMappingURL=chunk-QK5I2FHH.js.map\n",
      "start": 1701867792290,
      "end": 1701867792293,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
