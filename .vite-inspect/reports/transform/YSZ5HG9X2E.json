{
  "resolvedId": "C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import Box from '@mui/material/Box';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport localeList from 'lib/i18n/locales/localeList.ts';\r\nimport React from 'react';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nimport Dropdown from '../Dropdown.tsx';\r\nimport DropdownContainer from './LanguageDropdown.styles.ts';\r\nimport useLanguageDropdown from './useLanguageDropdown.ts';\r\n\r\nconst Languages = localeList.map((lang) => {\r\n  return (\r\n    <MenuItem key={uuidv1()} value={lang.Code}>\r\n      {lang.Locale}\r\n    </MenuItem>\r\n  );\r\n});\r\n\r\n// const DropdownTitle = ({ value }: { value: unknown }) => {\r\n//   console.log('dropdown title prop', value);\r\n//   const selectedlang = localeList.find(\r\n//     (a) => a.Code === (value as string)\r\n//   )!.Locale;\r\n//   return (\r\n//     <TitleComponent>\r\n//       <Language />\r\n//       {selectedlang}\r\n//     </TitleComponent>\r\n//   );\r\n// };\r\n\r\nconst LanguageDropdown = () => {\r\n  // dunno why render 4 times on first load instead of 2\r\n  const langDropdown = useLanguageDropdown();\r\n  console.log('value', langDropdown.lang);\r\n  // console.log(\r\n  //   'valueText',\r\n  //   localeList.find((a) => a.Code === langDropdown.lang)!.Locale\r\n  // );\r\n  return (\r\n    <DropdownContainer>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n\r\n          '&:hover': {\r\n            color: `${'inherit'}`,\r\n          },\r\n        }}\r\n      >\r\n        <Dropdown\r\n          helperText=\"Language Dropdown\"\r\n          isDisableUnderline\r\n          isSelectionNone\r\n          label=\"languageDropdown\"\r\n          onSelect={(event: SelectChangeEvent<unknown>) =>\r\n            langDropdown.onChange(event.target.value)\r\n          }\r\n          value={\r\n            langDropdown.lang || localeList.find((a) => a.Code === 'en')!.Code\r\n          }\r\n          valueText={\r\n            localeList.find((a) => a.Code === langDropdown.lang)!.Locale\r\n          }\r\n          variant=\"standard\"\r\n        >\r\n          {Languages}\r\n        </Dropdown>\r\n      </Box>\r\n    </DropdownContainer>\r\n  );\r\n};\r\n\r\nexport default React.memo(LanguageDropdown);\r\n",
      "start": 1701766112648,
      "end": 1701766112648
    },
    {
      "name": "vite:css",
      "start": 1701766112648,
      "end": 1701766112648,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1701766112648,
      "end": 1701766112648,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1701766112648,
      "end": 1701766112648,
      "order": "normal"
    },
    {
      "name": "vite:react-swc",
      "result": "import * as RefreshRuntime from \"/@react-refresh\";\n\nif (!window.$RefreshReg$) throw new Error(\"React refresh preamble was not loaded. Something is wrong.\");\nconst prevRefreshReg = window.$RefreshReg$;\nconst prevRefreshSig = window.$RefreshSig$;\nwindow.$RefreshReg$ = RefreshRuntime.getRefreshReg(\"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\");\nwindow.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _s = $RefreshSig$();\nimport Box from '@mui/material/Box';\nimport MenuItem from '@mui/material/MenuItem';\nimport localeList from 'lib/i18n/locales/localeList.ts';\nimport React from 'react';\nimport { v1 as uuidv1 } from 'uuid';\nimport Dropdown from '../Dropdown.tsx';\nimport DropdownContainer from './LanguageDropdown.styles.ts';\nimport useLanguageDropdown from './useLanguageDropdown.ts';\nconst Languages = localeList.map(_c = (lang)=>{\n    return /*#__PURE__*/ _jsxDEV(MenuItem, {\n        value: lang.Code,\n        children: lang.Locale\n    }, uuidv1(), false, {\n        fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, this);\n});\n_c1 = Languages;\n// const DropdownTitle = ({ value }: { value: unknown }) => {\n//   console.log('dropdown title prop', value);\n//   const selectedlang = localeList.find(\n//     (a) => a.Code === (value as string)\n//   )!.Locale;\n//   return (\n//     <TitleComponent>\n//       <Language />\n//       {selectedlang}\n//     </TitleComponent>\n//   );\n// };\nconst LanguageDropdown = ()=>{\n    _s();\n    // dunno why render 4 times on first load instead of 2\n    const langDropdown = useLanguageDropdown();\n    console.log('value', langDropdown.lang);\n    // console.log(\n    //   'valueText',\n    //   localeList.find((a) => a.Code === langDropdown.lang)!.Locale\n    // );\n    return /*#__PURE__*/ _jsxDEV(DropdownContainer, {\n        children: /*#__PURE__*/ _jsxDEV(Box, {\n            sx: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                '&:hover': {\n                    color: `${'inherit'}`\n                }\n            },\n            children: /*#__PURE__*/ _jsxDEV(Dropdown, {\n                helperText: \"Language Dropdown\",\n                isDisableUnderline: true,\n                isSelectionNone: true,\n                label: \"languageDropdown\",\n                onSelect: (event)=>langDropdown.onChange(event.target.value),\n                value: langDropdown.lang || localeList.find((a)=>a.Code === 'en').Code,\n                valueText: localeList.find((a)=>a.Code === langDropdown.lang).Locale,\n                variant: \"standard\",\n                children: Languages\n            }, void 0, false, {\n                fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n                lineNumber: 54,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n            lineNumber: 43,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n        lineNumber: 42,\n        columnNumber: 5\n    }, this);\n};\n_s(LanguageDropdown, \"DfQYgQvbpuxXJk/G7bnq+G+XAc0=\", false, function() {\n    return [\n        useLanguageDropdown\n    ];\n});\n_c2 = LanguageDropdown;\nexport default /*#__PURE__*/ _c3 = React.memo(LanguageDropdown);\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Languages$localeList.map\");\n$RefreshReg$(_c1, \"Languages\");\n$RefreshReg$(_c2, \"LanguageDropdown\");\n$RefreshReg$(_c3, \"%default%\");\n\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;\nRefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {\n  RefreshRuntime.registerExportsForReactRefresh(\"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\", currentExports);\n  import.meta.hot.accept((nextExports) => {\n    if (!nextExports) return;\n    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);\n    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);\n  });\n});\n",
      "start": 1701766112648,
      "end": 1701766112699,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "LanguageDropdown.tsx"
        ],
        "sourcesContent": [
          "import Box from '@mui/material/Box';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport localeList from 'lib/i18n/locales/localeList.ts';\r\nimport React from 'react';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nimport Dropdown from '../Dropdown.tsx';\r\nimport DropdownContainer from './LanguageDropdown.styles.ts';\r\nimport useLanguageDropdown from './useLanguageDropdown.ts';\r\n\r\nconst Languages = localeList.map((lang) => {\r\n  return (\r\n    <MenuItem key={uuidv1()} value={lang.Code}>\r\n      {lang.Locale}\r\n    </MenuItem>\r\n  );\r\n});\r\n\r\n// const DropdownTitle = ({ value }: { value: unknown }) => {\r\n//   console.log('dropdown title prop', value);\r\n//   const selectedlang = localeList.find(\r\n//     (a) => a.Code === (value as string)\r\n//   )!.Locale;\r\n//   return (\r\n//     <TitleComponent>\r\n//       <Language />\r\n//       {selectedlang}\r\n//     </TitleComponent>\r\n//   );\r\n// };\r\n\r\nconst LanguageDropdown = () => {\r\n  // dunno why render 4 times on first load instead of 2\r\n  const langDropdown = useLanguageDropdown();\r\n  console.log('value', langDropdown.lang);\r\n  // console.log(\r\n  //   'valueText',\r\n  //   localeList.find((a) => a.Code === langDropdown.lang)!.Locale\r\n  // );\r\n  return (\r\n    <DropdownContainer>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n\r\n          '&:hover': {\r\n            color: `${'inherit'}`,\r\n          },\r\n        }}\r\n      >\r\n        <Dropdown\r\n          helperText=\"Language Dropdown\"\r\n          isDisableUnderline\r\n          isSelectionNone\r\n          label=\"languageDropdown\"\r\n          onSelect={(event: SelectChangeEvent<unknown>) =>\r\n            langDropdown.onChange(event.target.value)\r\n          }\r\n          value={\r\n            langDropdown.lang || localeList.find((a) => a.Code === 'en')!.Code\r\n          }\r\n          valueText={\r\n            localeList.find((a) => a.Code === langDropdown.lang)!.Locale\r\n          }\r\n          variant=\"standard\"\r\n        >\r\n          {Languages}\r\n        </Dropdown>\r\n      </Box>\r\n    </DropdownContainer>\r\n  );\r\n};\r\n\r\nexport default React.memo(LanguageDropdown);\r\n"
        ],
        "names": [
          "Box",
          "MenuItem",
          "localeList",
          "React",
          "v1",
          "uuidv1",
          "Dropdown",
          "DropdownContainer",
          "useLanguageDropdown",
          "Languages",
          "map",
          "lang",
          "value",
          "Code",
          "Locale",
          "LanguageDropdown",
          "langDropdown",
          "console",
          "log",
          "sx",
          "display",
          "justifyContent",
          "alignItems",
          "color",
          "helperText",
          "isDisableUnderline",
          "isSelectionNone",
          "label",
          "onSelect",
          "event",
          "onChange",
          "target",
          "find",
          "a",
          "valueText",
          "variant",
          "memo"
        ],
        "mappings": ";;;;;;;;;;AAAA,OAAOA,SAAS,oBAAoB;AACpC,OAAOC,cAAc,yBAAyB;AAE9C,OAAOC,gBAAgB,iCAAiC;AACxD,OAAOC,WAAW,QAAQ;AAC1B,SAASC,MAAMC,MAAM,QAAQ,OAAO;AAEpC,OAAOC,cAAc,kBAAkB;AACvC,OAAOC,uBAAuB,+BAA+B;AAC7D,OAAOC,yBAAyB,2BAA2B;AAE3D,MAAMC,YAAYP,WAAWQ,GAAG,MAAC,CAACC;IAChC,qBACE,QAACV;QAAwBW,OAAOD,KAAKE,IAAI;kBACtCF,KAAKG,MAAM;OADCT;;;;;AAInB;;AAEA,6DAA6D;AAC7D,+CAA+C;AAC/C,0CAA0C;AAC1C,0CAA0C;AAC1C,eAAe;AACf,aAAa;AACb,uBAAuB;AACvB,qBAAqB;AACrB,uBAAuB;AACvB,wBAAwB;AACxB,OAAO;AACP,KAAK;AAEL,MAAMU,mBAAmB;;IACvB,sDAAsD;IACtD,MAAMC,eAAeR;IACrBS,QAAQC,GAAG,CAAC,SAASF,aAAaL,IAAI;IACtC,eAAe;IACf,iBAAiB;IACjB,iEAAiE;IACjE,KAAK;IACL,qBACE,QAACJ;kBACC,cAAA,QAACP;YACCmB,IAAI;gBACFC,SAAS;gBACTC,gBAAgB;gBAChBC,YAAY;gBAEZ,WAAW;oBACTC,OAAO,CAAC,EAAE,UAAU,CAAC;gBACvB;YACF;sBAEA,cAAA,QAACjB;gBACCkB,YAAW;gBACXC,kBAAkB;gBAClBC,eAAe;gBACfC,OAAM;gBACNC,UAAU,CAACC,QACTb,aAAac,QAAQ,CAACD,MAAME,MAAM,CAACnB,KAAK;gBAE1CA,OACEI,aAAaL,IAAI,IAAIT,WAAW8B,IAAI,CAAC,CAACC,IAAMA,EAAEpB,IAAI,KAAK,MAAOA,IAAI;gBAEpEqB,WACEhC,WAAW8B,IAAI,CAAC,CAACC,IAAMA,EAAEpB,IAAI,KAAKG,aAAaL,IAAI,EAAGG,MAAM;gBAE9DqB,SAAQ;0BAEP1B;;;;;;;;;;;;;;;;AAKX;GA1CMM;;QAEiBP;;;MAFjBO;AA4CN,mCAAeZ,MAAMiC,IAAI,CAACrB,kBAAkB"
      }
    },
    {
      "name": "vite:define",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1701766112699,
      "end": 1701766112699,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/inputs/dropdown/language/LanguageDropdown.tsx\");import * as RefreshRuntime from \"/@react-refresh\";\n\nif (!window.$RefreshReg$) throw new Error(\"React refresh preamble was not loaded. Something is wrong.\");\nconst prevRefreshReg = window.$RefreshReg$;\nconst prevRefreshSig = window.$RefreshSig$;\nwindow.$RefreshReg$ = RefreshRuntime.getRefreshReg(\"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\");\nwindow.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;\n\nimport __vite__cjsImport1_react_jsxDevRuntime from \"/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=3c106fdb\"; const _jsxDEV = __vite__cjsImport1_react_jsxDevRuntime[\"jsxDEV\"];\nvar _s = $RefreshSig$();\nimport Box from \"/node_modules/.vite/deps/@mui_material_Box.js?v=3c106fdb\";\nimport MenuItem from \"/node_modules/.vite/deps/@mui_material_MenuItem.js?v=3c106fdb\";\nimport localeList from \"/src/lib/i18n/locales/localeList.ts\";\nimport __vite__cjsImport5_react from \"/node_modules/.vite/deps/react.js?v=3c106fdb\"; const React = __vite__cjsImport5_react.__esModule ? __vite__cjsImport5_react.default : __vite__cjsImport5_react;\nimport { v1 as uuidv1 } from \"/node_modules/.vite/deps/uuid.js?v=3c106fdb\";\nimport Dropdown from \"/src/components/inputs/dropdown/Dropdown.tsx\";\nimport DropdownContainer from \"/src/components/inputs/dropdown/language/LanguageDropdown.styles.ts\";\nimport useLanguageDropdown from \"/src/components/inputs/dropdown/language/useLanguageDropdown.ts\";\nconst Languages = localeList.map(_c = (lang)=>{\n    return /*#__PURE__*/ _jsxDEV(MenuItem, {\n        value: lang.Code,\n        children: lang.Locale\n    }, uuidv1(), false, {\n        fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, this);\n});\n_c1 = Languages;\n// const DropdownTitle = ({ value }: { value: unknown }) => {\n//   console.log('dropdown title prop', value);\n//   const selectedlang = localeList.find(\n//     (a) => a.Code === (value as string)\n//   )!.Locale;\n//   return (\n//     <TitleComponent>\n//       <Language />\n//       {selectedlang}\n//     </TitleComponent>\n//   );\n// };\nconst LanguageDropdown = ()=>{\n    _s();\n    // dunno why render 4 times on first load instead of 2\n    const langDropdown = useLanguageDropdown();\n    console.log('value', langDropdown.lang);\n    // console.log(\n    //   'valueText',\n    //   localeList.find((a) => a.Code === langDropdown.lang)!.Locale\n    // );\n    return /*#__PURE__*/ _jsxDEV(DropdownContainer, {\n        children: /*#__PURE__*/ _jsxDEV(Box, {\n            sx: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                '&:hover': {\n                    color: `${'inherit'}`\n                }\n            },\n            children: /*#__PURE__*/ _jsxDEV(Dropdown, {\n                helperText: \"Language Dropdown\",\n                isDisableUnderline: true,\n                isSelectionNone: true,\n                label: \"languageDropdown\",\n                onSelect: (event)=>langDropdown.onChange(event.target.value),\n                value: langDropdown.lang || localeList.find((a)=>a.Code === 'en').Code,\n                valueText: localeList.find((a)=>a.Code === langDropdown.lang).Locale,\n                variant: \"standard\",\n                children: Languages\n            }, void 0, false, {\n                fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n                lineNumber: 54,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n            lineNumber: 43,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\",\n        lineNumber: 42,\n        columnNumber: 5\n    }, this);\n};\n_s(LanguageDropdown, \"DfQYgQvbpuxXJk/G7bnq+G+XAc0=\", false, function() {\n    return [\n        useLanguageDropdown\n    ];\n});\n_c2 = LanguageDropdown;\nexport default /*#__PURE__*/ _c3 = React.memo(LanguageDropdown);\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Languages$localeList.map\");\n$RefreshReg$(_c1, \"Languages\");\n$RefreshReg$(_c2, \"LanguageDropdown\");\n$RefreshReg$(_c3, \"%default%\");\n\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;\nRefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {\n  RefreshRuntime.registerExportsForReactRefresh(\"C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/src/components/inputs/dropdown/language/LanguageDropdown.tsx\", currentExports);\n  import.meta.hot.accept((nextExports) => {\n    if (!nextExports) return;\n    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);\n    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);\n  });\n});\n",
      "start": 1701766112699,
      "end": 1701766112703,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
