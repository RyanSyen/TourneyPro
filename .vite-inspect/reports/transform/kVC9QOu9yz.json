{
  "resolvedId": "C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/node_modules/.vite/deps/i18next.js?v=c929456e",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "import \"./chunk-ROME4SDB.js\";\n\n// node_modules/i18next/dist/esm/i18next.js\nvar consoleLogger = {\n  type: \"logger\",\n  log(args) {\n    this.output(\"log\", args);\n  },\n  warn(args) {\n    this.output(\"warn\", args);\n  },\n  error(args) {\n    this.output(\"error\", args);\n  },\n  output(type, args) {\n    if (console && console[type])\n      console[type].apply(console, args);\n  }\n};\nvar Logger = class _Logger {\n  constructor(concreteLogger) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    this.init(concreteLogger, options);\n  }\n  init(concreteLogger) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    this.prefix = options.prefix || \"i18next:\";\n    this.logger = concreteLogger || consoleLogger;\n    this.options = options;\n    this.debug = options.debug;\n  }\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return this.forward(args, \"log\", \"\", true);\n  }\n  warn() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this.forward(args, \"warn\", \"\", true);\n  }\n  error() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return this.forward(args, \"error\", \"\");\n  }\n  deprecate() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return this.forward(args, \"warn\", \"WARNING DEPRECATED: \", true);\n  }\n  forward(args, lvl, prefix, debugOnly) {\n    if (debugOnly && !this.debug)\n      return null;\n    if (typeof args[0] === \"string\")\n      args[0] = `${prefix}${this.prefix} ${args[0]}`;\n    return this.logger[lvl](args);\n  }\n  create(moduleName) {\n    return new _Logger(this.logger, {\n      ...{\n        prefix: `${this.prefix}:${moduleName}:`\n      },\n      ...this.options\n    });\n  }\n  clone(options) {\n    options = options || this.options;\n    options.prefix = options.prefix || this.prefix;\n    return new _Logger(this.logger, options);\n  }\n};\nvar baseLogger = new Logger();\nvar EventEmitter = class {\n  constructor() {\n    this.observers = {};\n  }\n  on(events, listener) {\n    events.split(\" \").forEach((event) => {\n      this.observers[event] = this.observers[event] || [];\n      this.observers[event].push(listener);\n    });\n    return this;\n  }\n  off(event, listener) {\n    if (!this.observers[event])\n      return;\n    if (!listener) {\n      delete this.observers[event];\n      return;\n    }\n    this.observers[event] = this.observers[event].filter((l) => l !== listener);\n  }\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (this.observers[event]) {\n      const cloned = [].concat(this.observers[event]);\n      cloned.forEach((observer) => {\n        observer(...args);\n      });\n    }\n    if (this.observers[\"*\"]) {\n      const cloned = [].concat(this.observers[\"*\"]);\n      cloned.forEach((observer) => {\n        observer.apply(observer, [event, ...args]);\n      });\n    }\n  }\n};\nfunction defer() {\n  let res;\n  let rej;\n  const promise = new Promise((resolve, reject) => {\n    res = resolve;\n    rej = reject;\n  });\n  promise.resolve = res;\n  promise.reject = rej;\n  return promise;\n}\nfunction makeString(object) {\n  if (object == null)\n    return \"\";\n  return \"\" + object;\n}\nfunction copy(a, s, t2) {\n  a.forEach((m) => {\n    if (s[m])\n      t2[m] = s[m];\n  });\n}\nfunction getLastOfPath(object, path, Empty) {\n  function cleanKey(key) {\n    return key && key.indexOf(\"###\") > -1 ? key.replace(/###/g, \".\") : key;\n  }\n  function canNotTraverseDeeper() {\n    return !object || typeof object === \"string\";\n  }\n  const stack = typeof path !== \"string\" ? [].concat(path) : path.split(\".\");\n  while (stack.length > 1) {\n    if (canNotTraverseDeeper())\n      return {};\n    const key = cleanKey(stack.shift());\n    if (!object[key] && Empty)\n      object[key] = new Empty();\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      object = object[key];\n    } else {\n      object = {};\n    }\n  }\n  if (canNotTraverseDeeper())\n    return {};\n  return {\n    obj: object,\n    k: cleanKey(stack.shift())\n  };\n}\nfunction setPath(object, path, newValue) {\n  const {\n    obj,\n    k\n  } = getLastOfPath(object, path, Object);\n  obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n  const {\n    obj,\n    k\n  } = getLastOfPath(object, path, Object);\n  obj[k] = obj[k] || [];\n  if (concat)\n    obj[k] = obj[k].concat(newValue);\n  if (!concat)\n    obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n  const {\n    obj,\n    k\n  } = getLastOfPath(object, path);\n  if (!obj)\n    return void 0;\n  return obj[k];\n}\nfunction getPathWithDefaults(data, defaultData, key) {\n  const value = getPath(data, key);\n  if (value !== void 0) {\n    return value;\n  }\n  return getPath(defaultData, key);\n}\nfunction deepExtend(target, source, overwrite) {\n  for (const prop in source) {\n    if (prop !== \"__proto__\" && prop !== \"constructor\") {\n      if (prop in target) {\n        if (typeof target[prop] === \"string\" || target[prop] instanceof String || typeof source[prop] === \"string\" || source[prop] instanceof String) {\n          if (overwrite)\n            target[prop] = source[prop];\n        } else {\n          deepExtend(target[prop], source[prop], overwrite);\n        }\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n  }\n  return target;\n}\nfunction regexEscape(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nvar _entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\"\n};\nfunction escape(data) {\n  if (typeof data === \"string\") {\n    return data.replace(/[&<>\"'\\/]/g, (s) => _entityMap[s]);\n  }\n  return data;\n}\nvar chars = [\" \", \",\", \"?\", \"!\", \";\"];\nfunction looksLikeObjectPath(key, nsSeparator, keySeparator) {\n  nsSeparator = nsSeparator || \"\";\n  keySeparator = keySeparator || \"\";\n  const possibleChars = chars.filter((c) => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);\n  if (possibleChars.length === 0)\n    return true;\n  const r = new RegExp(`(${possibleChars.map((c) => c === \"?\" ? \"\\\\?\" : c).join(\"|\")})`);\n  let matched = !r.test(key);\n  if (!matched) {\n    const ki = key.indexOf(keySeparator);\n    if (ki > 0 && !r.test(key.substring(0, ki))) {\n      matched = true;\n    }\n  }\n  return matched;\n}\nfunction deepFind(obj, path) {\n  let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \".\";\n  if (!obj)\n    return void 0;\n  if (obj[path])\n    return obj[path];\n  const paths = path.split(keySeparator);\n  let current = obj;\n  for (let i = 0; i < paths.length; ++i) {\n    if (!current)\n      return void 0;\n    if (typeof current[paths[i]] === \"string\" && i + 1 < paths.length) {\n      return void 0;\n    }\n    if (current[paths[i]] === void 0) {\n      let j = 2;\n      let p = paths.slice(i, i + j).join(keySeparator);\n      let mix = current[p];\n      while (mix === void 0 && paths.length > i + j) {\n        j++;\n        p = paths.slice(i, i + j).join(keySeparator);\n        mix = current[p];\n      }\n      if (mix === void 0)\n        return void 0;\n      if (mix === null)\n        return null;\n      if (path.endsWith(p)) {\n        if (typeof mix === \"string\")\n          return mix;\n        if (p && typeof mix[p] === \"string\")\n          return mix[p];\n      }\n      const joinedPath = paths.slice(i + j).join(keySeparator);\n      if (joinedPath)\n        return deepFind(mix, joinedPath, keySeparator);\n      return void 0;\n    }\n    current = current[paths[i]];\n  }\n  return current;\n}\nfunction getCleanedCode(code) {\n  if (code && code.indexOf(\"_\") > 0)\n    return code.replace(\"_\", \"-\");\n  return code;\n}\nvar ResourceStore = class extends EventEmitter {\n  constructor(data) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n      ns: [\"translation\"],\n      defaultNS: \"translation\"\n    };\n    super();\n    this.data = data || {};\n    this.options = options;\n    if (this.options.keySeparator === void 0) {\n      this.options.keySeparator = \".\";\n    }\n    if (this.options.ignoreJSONStructure === void 0) {\n      this.options.ignoreJSONStructure = true;\n    }\n  }\n  addNamespaces(ns) {\n    if (this.options.ns.indexOf(ns) < 0) {\n      this.options.ns.push(ns);\n    }\n  }\n  removeNamespaces(ns) {\n    const index = this.options.ns.indexOf(ns);\n    if (index > -1) {\n      this.options.ns.splice(index, 1);\n    }\n  }\n  getResource(lng, ns, key) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    const ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;\n    let path = [lng, ns];\n    if (key && typeof key !== \"string\")\n      path = path.concat(key);\n    if (key && typeof key === \"string\")\n      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n    if (lng.indexOf(\".\") > -1) {\n      path = lng.split(\".\");\n    }\n    const result = getPath(this.data, path);\n    if (result || !ignoreJSONStructure || typeof key !== \"string\")\n      return result;\n    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);\n  }\n  addResource(lng, ns, key, value) {\n    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {\n      silent: false\n    };\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    let path = [lng, ns];\n    if (key)\n      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n    if (lng.indexOf(\".\") > -1) {\n      path = lng.split(\".\");\n      value = ns;\n      ns = path[1];\n    }\n    this.addNamespaces(ns);\n    setPath(this.data, path, value);\n    if (!options.silent)\n      this.emit(\"added\", lng, ns, key, value);\n  }\n  addResources(lng, ns, resources) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {\n      silent: false\n    };\n    for (const m in resources) {\n      if (typeof resources[m] === \"string\" || Object.prototype.toString.apply(resources[m]) === \"[object Array]\")\n        this.addResource(lng, ns, m, resources[m], {\n          silent: true\n        });\n    }\n    if (!options.silent)\n      this.emit(\"added\", lng, ns, resources);\n  }\n  addResourceBundle(lng, ns, resources, deep, overwrite) {\n    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {\n      silent: false\n    };\n    let path = [lng, ns];\n    if (lng.indexOf(\".\") > -1) {\n      path = lng.split(\".\");\n      deep = resources;\n      resources = ns;\n      ns = path[1];\n    }\n    this.addNamespaces(ns);\n    let pack = getPath(this.data, path) || {};\n    if (deep) {\n      deepExtend(pack, resources, overwrite);\n    } else {\n      pack = {\n        ...pack,\n        ...resources\n      };\n    }\n    setPath(this.data, path, pack);\n    if (!options.silent)\n      this.emit(\"added\", lng, ns, resources);\n  }\n  removeResourceBundle(lng, ns) {\n    if (this.hasResourceBundle(lng, ns)) {\n      delete this.data[lng][ns];\n    }\n    this.removeNamespaces(ns);\n    this.emit(\"removed\", lng, ns);\n  }\n  hasResourceBundle(lng, ns) {\n    return this.getResource(lng, ns) !== void 0;\n  }\n  getResourceBundle(lng, ns) {\n    if (!ns)\n      ns = this.options.defaultNS;\n    if (this.options.compatibilityAPI === \"v1\")\n      return {\n        ...{},\n        ...this.getResource(lng, ns)\n      };\n    return this.getResource(lng, ns);\n  }\n  getDataByLanguage(lng) {\n    return this.data[lng];\n  }\n  hasLanguageSomeTranslations(lng) {\n    const data = this.getDataByLanguage(lng);\n    const n = data && Object.keys(data) || [];\n    return !!n.find((v) => data[v] && Object.keys(data[v]).length > 0);\n  }\n  toJSON() {\n    return this.data;\n  }\n};\nvar postProcessor = {\n  processors: {},\n  addPostProcessor(module) {\n    this.processors[module.name] = module;\n  },\n  handle(processors, value, key, options, translator) {\n    processors.forEach((processor) => {\n      if (this.processors[processor])\n        value = this.processors[processor].process(value, key, options, translator);\n    });\n    return value;\n  }\n};\nvar checkedLoadedFor = {};\nvar Translator = class _Translator extends EventEmitter {\n  constructor(services) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    super();\n    copy([\"resourceStore\", \"languageUtils\", \"pluralResolver\", \"interpolator\", \"backendConnector\", \"i18nFormat\", \"utils\"], services, this);\n    this.options = options;\n    if (this.options.keySeparator === void 0) {\n      this.options.keySeparator = \".\";\n    }\n    this.logger = baseLogger.create(\"translator\");\n  }\n  changeLanguage(lng) {\n    if (lng)\n      this.language = lng;\n  }\n  exists(key) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n      interpolation: {}\n    };\n    if (key === void 0 || key === null) {\n      return false;\n    }\n    const resolved = this.resolve(key, options);\n    return resolved && resolved.res !== void 0;\n  }\n  extractFromKey(key, options) {\n    let nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;\n    if (nsSeparator === void 0)\n      nsSeparator = \":\";\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    let namespaces = options.ns || this.options.defaultNS || [];\n    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;\n    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);\n    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {\n      const m = key.match(this.interpolator.nestingRegexp);\n      if (m && m.length > 0) {\n        return {\n          key,\n          namespaces\n        };\n      }\n      const parts = key.split(nsSeparator);\n      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)\n        namespaces = parts.shift();\n      key = parts.join(keySeparator);\n    }\n    if (typeof namespaces === \"string\")\n      namespaces = [namespaces];\n    return {\n      key,\n      namespaces\n    };\n  }\n  translate(keys, options, lastKey) {\n    if (typeof options !== \"object\" && this.options.overloadTranslationOptionHandler) {\n      options = this.options.overloadTranslationOptionHandler(arguments);\n    }\n    if (typeof options === \"object\")\n      options = {\n        ...options\n      };\n    if (!options)\n      options = {};\n    if (keys === void 0 || keys === null)\n      return \"\";\n    if (!Array.isArray(keys))\n      keys = [String(keys)];\n    const returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    const {\n      key,\n      namespaces\n    } = this.extractFromKey(keys[keys.length - 1], options);\n    const namespace = namespaces[namespaces.length - 1];\n    const lng = options.lng || this.language;\n    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n    if (lng && lng.toLowerCase() === \"cimode\") {\n      if (appendNamespaceToCIMode) {\n        const nsSeparator = options.nsSeparator || this.options.nsSeparator;\n        if (returnDetails) {\n          return {\n            res: `${namespace}${nsSeparator}${key}`,\n            usedKey: key,\n            exactUsedKey: key,\n            usedLng: lng,\n            usedNS: namespace,\n            usedParams: this.getUsedParamsDetails(options)\n          };\n        }\n        return `${namespace}${nsSeparator}${key}`;\n      }\n      if (returnDetails) {\n        return {\n          res: key,\n          usedKey: key,\n          exactUsedKey: key,\n          usedLng: lng,\n          usedNS: namespace,\n          usedParams: this.getUsedParamsDetails(options)\n        };\n      }\n      return key;\n    }\n    const resolved = this.resolve(keys, options);\n    let res = resolved && resolved.res;\n    const resUsedKey = resolved && resolved.usedKey || key;\n    const resExactUsedKey = resolved && resolved.exactUsedKey || key;\n    const resType = Object.prototype.toString.apply(res);\n    const noObject = [\"[object Number]\", \"[object Function]\", \"[object RegExp]\"];\n    const joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;\n    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n    const handleAsObject = typeof res !== \"string\" && typeof res !== \"boolean\" && typeof res !== \"number\";\n    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === \"string\" && resType === \"[object Array]\")) {\n      if (!options.returnObjects && !this.options.returnObjects) {\n        if (!this.options.returnedObjectHandler) {\n          this.logger.warn(\"accessing an object - but returnObjects options is not enabled!\");\n        }\n        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {\n          ...options,\n          ns: namespaces\n        }) : `key '${key} (${this.language})' returned an object instead of string.`;\n        if (returnDetails) {\n          resolved.res = r;\n          resolved.usedParams = this.getUsedParamsDetails(options);\n          return resolved;\n        }\n        return r;\n      }\n      if (keySeparator) {\n        const resTypeIsArray = resType === \"[object Array]\";\n        const copy2 = resTypeIsArray ? [] : {};\n        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n        for (const m in res) {\n          if (Object.prototype.hasOwnProperty.call(res, m)) {\n            const deepKey = `${newKeyToUse}${keySeparator}${m}`;\n            copy2[m] = this.translate(deepKey, {\n              ...options,\n              ...{\n                joinArrays: false,\n                ns: namespaces\n              }\n            });\n            if (copy2[m] === deepKey)\n              copy2[m] = res[m];\n          }\n        }\n        res = copy2;\n      }\n    } else if (handleAsObjectInI18nFormat && typeof joinArrays === \"string\" && resType === \"[object Array]\") {\n      res = res.join(joinArrays);\n      if (res)\n        res = this.extendTranslation(res, keys, options, lastKey);\n    } else {\n      let usedDefault = false;\n      let usedKey = false;\n      const needsPluralHandling = options.count !== void 0 && typeof options.count !== \"string\";\n      const hasDefaultValue = _Translator.hasDefaultValue(options);\n      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : \"\";\n      const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {\n        ordinal: false\n      }) : \"\";\n      const defaultValue = options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;\n      if (!this.isValidLookup(res) && hasDefaultValue) {\n        usedDefault = true;\n        res = defaultValue;\n      }\n      if (!this.isValidLookup(res)) {\n        usedKey = true;\n        res = key;\n      }\n      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;\n      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;\n      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;\n      if (usedKey || usedDefault || updateMissing) {\n        this.logger.log(updateMissing ? \"updateKey\" : \"missingKey\", lng, namespace, key, updateMissing ? defaultValue : res);\n        if (keySeparator) {\n          const fk = this.resolve(key, {\n            ...options,\n            keySeparator: false\n          });\n          if (fk && fk.res)\n            this.logger.warn(\"Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.\");\n        }\n        let lngs = [];\n        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);\n        if (this.options.saveMissingTo === \"fallback\" && fallbackLngs && fallbackLngs[0]) {\n          for (let i = 0; i < fallbackLngs.length; i++) {\n            lngs.push(fallbackLngs[i]);\n          }\n        } else if (this.options.saveMissingTo === \"all\") {\n          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n        } else {\n          lngs.push(options.lng || this.language);\n        }\n        const send = (l, k, specificDefaultValue) => {\n          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;\n          if (this.options.missingKeyHandler) {\n            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);\n          } else if (this.backendConnector && this.backendConnector.saveMissing) {\n            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);\n          }\n          this.emit(\"missingKey\", l, namespace, k, res);\n        };\n        if (this.options.saveMissing) {\n          if (this.options.saveMissingPlurals && needsPluralHandling) {\n            lngs.forEach((language) => {\n              this.pluralResolver.getSuffixes(language, options).forEach((suffix) => {\n                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);\n              });\n            });\n          } else {\n            send(lngs, key, defaultValue);\n          }\n        }\n      }\n      res = this.extendTranslation(res, keys, options, resolved, lastKey);\n      if (usedKey && res === key && this.options.appendNamespaceToMissingKey)\n        res = `${namespace}:${key}`;\n      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {\n        if (this.options.compatibilityAPI !== \"v1\") {\n          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);\n        } else {\n          res = this.options.parseMissingKeyHandler(res);\n        }\n      }\n    }\n    if (returnDetails) {\n      resolved.res = res;\n      resolved.usedParams = this.getUsedParamsDetails(options);\n      return resolved;\n    }\n    return res;\n  }\n  extendTranslation(res, key, options, resolved, lastKey) {\n    var _this = this;\n    if (this.i18nFormat && this.i18nFormat.parse) {\n      res = this.i18nFormat.parse(res, {\n        ...this.options.interpolation.defaultVariables,\n        ...options\n      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {\n        resolved\n      });\n    } else if (!options.skipInterpolation) {\n      if (options.interpolation)\n        this.interpolator.init({\n          ...options,\n          ...{\n            interpolation: {\n              ...this.options.interpolation,\n              ...options.interpolation\n            }\n          }\n        });\n      const skipOnVariables = typeof res === \"string\" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);\n      let nestBef;\n      if (skipOnVariables) {\n        const nb = res.match(this.interpolator.nestingRegexp);\n        nestBef = nb && nb.length;\n      }\n      let data = options.replace && typeof options.replace !== \"string\" ? options.replace : options;\n      if (this.options.interpolation.defaultVariables)\n        data = {\n          ...this.options.interpolation.defaultVariables,\n          ...data\n        };\n      res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n      if (skipOnVariables) {\n        const na = res.match(this.interpolator.nestingRegexp);\n        const nestAft = na && na.length;\n        if (nestBef < nestAft)\n          options.nest = false;\n      }\n      if (!options.lng && this.options.compatibilityAPI !== \"v1\" && resolved && resolved.res)\n        options.lng = resolved.usedLng;\n      if (options.nest !== false)\n        res = this.interpolator.nest(res, function() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          if (lastKey && lastKey[0] === args[0] && !options.context) {\n            _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);\n            return null;\n          }\n          return _this.translate(...args, key);\n        }, options);\n      if (options.interpolation)\n        this.interpolator.reset();\n    }\n    const postProcess = options.postProcess || this.options.postProcess;\n    const postProcessorNames = typeof postProcess === \"string\" ? [postProcess] : postProcess;\n    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {\n      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {\n        i18nResolved: {\n          ...resolved,\n          usedParams: this.getUsedParamsDetails(options)\n        },\n        ...options\n      } : options, this);\n    }\n    return res;\n  }\n  resolve(keys) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let found;\n    let usedKey;\n    let exactUsedKey;\n    let usedLng;\n    let usedNS;\n    if (typeof keys === \"string\")\n      keys = [keys];\n    keys.forEach((k) => {\n      if (this.isValidLookup(found))\n        return;\n      const extracted = this.extractFromKey(k, options);\n      const key = extracted.key;\n      usedKey = key;\n      let namespaces = extracted.namespaces;\n      if (this.options.fallbackNS)\n        namespaces = namespaces.concat(this.options.fallbackNS);\n      const needsPluralHandling = options.count !== void 0 && typeof options.count !== \"string\";\n      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();\n      const needsContextHandling = options.context !== void 0 && (typeof options.context === \"string\" || typeof options.context === \"number\") && options.context !== \"\";\n      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);\n      namespaces.forEach((ns) => {\n        if (this.isValidLookup(found))\n          return;\n        usedNS = ns;\n        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {\n          checkedLoadedFor[`${codes[0]}-${ns}`] = true;\n          this.logger.warn(`key \"${usedKey}\" for languages \"${codes.join(\", \")}\" won't get resolved as namespace \"${usedNS}\" was not yet loaded`, \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n        }\n        codes.forEach((code) => {\n          if (this.isValidLookup(found))\n            return;\n          usedLng = code;\n          const finalKeys = [key];\n          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {\n            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n          } else {\n            let pluralSuffix;\n            if (needsPluralHandling)\n              pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);\n            const zeroSuffix = `${this.options.pluralSeparator}zero`;\n            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;\n            if (needsPluralHandling) {\n              finalKeys.push(key + pluralSuffix);\n              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {\n                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));\n              }\n              if (needsZeroSuffixLookup) {\n                finalKeys.push(key + zeroSuffix);\n              }\n            }\n            if (needsContextHandling) {\n              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;\n              finalKeys.push(contextKey);\n              if (needsPluralHandling) {\n                finalKeys.push(contextKey + pluralSuffix);\n                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {\n                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));\n                }\n                if (needsZeroSuffixLookup) {\n                  finalKeys.push(contextKey + zeroSuffix);\n                }\n              }\n            }\n          }\n          let possibleKey;\n          while (possibleKey = finalKeys.pop()) {\n            if (!this.isValidLookup(found)) {\n              exactUsedKey = possibleKey;\n              found = this.getResource(code, ns, possibleKey, options);\n            }\n          }\n        });\n      });\n    });\n    return {\n      res: found,\n      usedKey,\n      exactUsedKey,\n      usedLng,\n      usedNS\n    };\n  }\n  isValidLookup(res) {\n    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === \"\");\n  }\n  getResource(code, ns, key) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    if (this.i18nFormat && this.i18nFormat.getResource)\n      return this.i18nFormat.getResource(code, ns, key, options);\n    return this.resourceStore.getResource(code, ns, key, options);\n  }\n  getUsedParamsDetails() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const optionsKeys = [\"defaultValue\", \"ordinal\", \"context\", \"replace\", \"lng\", \"lngs\", \"fallbackLng\", \"ns\", \"keySeparator\", \"nsSeparator\", \"returnObjects\", \"returnDetails\", \"joinArrays\", \"postProcess\", \"interpolation\"];\n    const useOptionsReplaceForData = options.replace && typeof options.replace !== \"string\";\n    let data = useOptionsReplaceForData ? options.replace : options;\n    if (useOptionsReplaceForData && typeof options.count !== \"undefined\") {\n      data.count = options.count;\n    }\n    if (this.options.interpolation.defaultVariables) {\n      data = {\n        ...this.options.interpolation.defaultVariables,\n        ...data\n      };\n    }\n    if (!useOptionsReplaceForData) {\n      data = {\n        ...data\n      };\n      for (const key of optionsKeys) {\n        delete data[key];\n      }\n    }\n    return data;\n  }\n  static hasDefaultValue(options) {\n    const prefix = \"defaultValue\";\n    for (const option in options) {\n      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nvar LanguageUtil = class {\n  constructor(options) {\n    this.options = options;\n    this.supportedLngs = this.options.supportedLngs || false;\n    this.logger = baseLogger.create(\"languageUtils\");\n  }\n  getScriptPartFromCode(code) {\n    code = getCleanedCode(code);\n    if (!code || code.indexOf(\"-\") < 0)\n      return null;\n    const p = code.split(\"-\");\n    if (p.length === 2)\n      return null;\n    p.pop();\n    if (p[p.length - 1].toLowerCase() === \"x\")\n      return null;\n    return this.formatLanguageCode(p.join(\"-\"));\n  }\n  getLanguagePartFromCode(code) {\n    code = getCleanedCode(code);\n    if (!code || code.indexOf(\"-\") < 0)\n      return code;\n    const p = code.split(\"-\");\n    return this.formatLanguageCode(p[0]);\n  }\n  formatLanguageCode(code) {\n    if (typeof code === \"string\" && code.indexOf(\"-\") > -1) {\n      const specialCases = [\"hans\", \"hant\", \"latn\", \"cyrl\", \"cans\", \"mong\", \"arab\"];\n      let p = code.split(\"-\");\n      if (this.options.lowerCaseLng) {\n        p = p.map((part) => part.toLowerCase());\n      } else if (p.length === 2) {\n        p[0] = p[0].toLowerCase();\n        p[1] = p[1].toUpperCase();\n        if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n          p[1] = capitalize(p[1].toLowerCase());\n      } else if (p.length === 3) {\n        p[0] = p[0].toLowerCase();\n        if (p[1].length === 2)\n          p[1] = p[1].toUpperCase();\n        if (p[0] !== \"sgn\" && p[2].length === 2)\n          p[2] = p[2].toUpperCase();\n        if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n          p[1] = capitalize(p[1].toLowerCase());\n        if (specialCases.indexOf(p[2].toLowerCase()) > -1)\n          p[2] = capitalize(p[2].toLowerCase());\n      }\n      return p.join(\"-\");\n    }\n    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n  }\n  isSupportedCode(code) {\n    if (this.options.load === \"languageOnly\" || this.options.nonExplicitSupportedLngs) {\n      code = this.getLanguagePartFromCode(code);\n    }\n    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n  }\n  getBestMatchFromCodes(codes) {\n    if (!codes)\n      return null;\n    let found;\n    codes.forEach((code) => {\n      if (found)\n        return;\n      const cleanedLng = this.formatLanguageCode(code);\n      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng))\n        found = cleanedLng;\n    });\n    if (!found && this.options.supportedLngs) {\n      codes.forEach((code) => {\n        if (found)\n          return;\n        const lngOnly = this.getLanguagePartFromCode(code);\n        if (this.isSupportedCode(lngOnly))\n          return found = lngOnly;\n        found = this.options.supportedLngs.find((supportedLng) => {\n          if (supportedLng === lngOnly)\n            return supportedLng;\n          if (supportedLng.indexOf(\"-\") < 0 && lngOnly.indexOf(\"-\") < 0)\n            return;\n          if (supportedLng.indexOf(lngOnly) === 0)\n            return supportedLng;\n        });\n      });\n    }\n    if (!found)\n      found = this.getFallbackCodes(this.options.fallbackLng)[0];\n    return found;\n  }\n  getFallbackCodes(fallbacks, code) {\n    if (!fallbacks)\n      return [];\n    if (typeof fallbacks === \"function\")\n      fallbacks = fallbacks(code);\n    if (typeof fallbacks === \"string\")\n      fallbacks = [fallbacks];\n    if (Object.prototype.toString.apply(fallbacks) === \"[object Array]\")\n      return fallbacks;\n    if (!code)\n      return fallbacks.default || [];\n    let found = fallbacks[code];\n    if (!found)\n      found = fallbacks[this.getScriptPartFromCode(code)];\n    if (!found)\n      found = fallbacks[this.formatLanguageCode(code)];\n    if (!found)\n      found = fallbacks[this.getLanguagePartFromCode(code)];\n    if (!found)\n      found = fallbacks.default;\n    return found || [];\n  }\n  toResolveHierarchy(code, fallbackCode) {\n    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n    const codes = [];\n    const addCode = (c) => {\n      if (!c)\n        return;\n      if (this.isSupportedCode(c)) {\n        codes.push(c);\n      } else {\n        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);\n      }\n    };\n    if (typeof code === \"string\" && (code.indexOf(\"-\") > -1 || code.indexOf(\"_\") > -1)) {\n      if (this.options.load !== \"languageOnly\")\n        addCode(this.formatLanguageCode(code));\n      if (this.options.load !== \"languageOnly\" && this.options.load !== \"currentOnly\")\n        addCode(this.getScriptPartFromCode(code));\n      if (this.options.load !== \"currentOnly\")\n        addCode(this.getLanguagePartFromCode(code));\n    } else if (typeof code === \"string\") {\n      addCode(this.formatLanguageCode(code));\n    }\n    fallbackCodes.forEach((fc) => {\n      if (codes.indexOf(fc) < 0)\n        addCode(this.formatLanguageCode(fc));\n    });\n    return codes;\n  }\n};\nvar sets = [{\n  lngs: [\"ach\", \"ak\", \"am\", \"arn\", \"br\", \"fil\", \"gun\", \"ln\", \"mfe\", \"mg\", \"mi\", \"oc\", \"pt\", \"pt-BR\", \"tg\", \"tl\", \"ti\", \"tr\", \"uz\", \"wa\"],\n  nr: [1, 2],\n  fc: 1\n}, {\n  lngs: [\"af\", \"an\", \"ast\", \"az\", \"bg\", \"bn\", \"ca\", \"da\", \"de\", \"dev\", \"el\", \"en\", \"eo\", \"es\", \"et\", \"eu\", \"fi\", \"fo\", \"fur\", \"fy\", \"gl\", \"gu\", \"ha\", \"hi\", \"hu\", \"hy\", \"ia\", \"it\", \"kk\", \"kn\", \"ku\", \"lb\", \"mai\", \"ml\", \"mn\", \"mr\", \"nah\", \"nap\", \"nb\", \"ne\", \"nl\", \"nn\", \"no\", \"nso\", \"pa\", \"pap\", \"pms\", \"ps\", \"pt-PT\", \"rm\", \"sco\", \"se\", \"si\", \"so\", \"son\", \"sq\", \"sv\", \"sw\", \"ta\", \"te\", \"tk\", \"ur\", \"yo\"],\n  nr: [1, 2],\n  fc: 2\n}, {\n  lngs: [\"ay\", \"bo\", \"cgg\", \"fa\", \"ht\", \"id\", \"ja\", \"jbo\", \"ka\", \"km\", \"ko\", \"ky\", \"lo\", \"ms\", \"sah\", \"su\", \"th\", \"tt\", \"ug\", \"vi\", \"wo\", \"zh\"],\n  nr: [1],\n  fc: 3\n}, {\n  lngs: [\"be\", \"bs\", \"cnr\", \"dz\", \"hr\", \"ru\", \"sr\", \"uk\"],\n  nr: [1, 2, 5],\n  fc: 4\n}, {\n  lngs: [\"ar\"],\n  nr: [0, 1, 2, 3, 11, 100],\n  fc: 5\n}, {\n  lngs: [\"cs\", \"sk\"],\n  nr: [1, 2, 5],\n  fc: 6\n}, {\n  lngs: [\"csb\", \"pl\"],\n  nr: [1, 2, 5],\n  fc: 7\n}, {\n  lngs: [\"cy\"],\n  nr: [1, 2, 3, 8],\n  fc: 8\n}, {\n  lngs: [\"fr\"],\n  nr: [1, 2],\n  fc: 9\n}, {\n  lngs: [\"ga\"],\n  nr: [1, 2, 3, 7, 11],\n  fc: 10\n}, {\n  lngs: [\"gd\"],\n  nr: [1, 2, 3, 20],\n  fc: 11\n}, {\n  lngs: [\"is\"],\n  nr: [1, 2],\n  fc: 12\n}, {\n  lngs: [\"jv\"],\n  nr: [0, 1],\n  fc: 13\n}, {\n  lngs: [\"kw\"],\n  nr: [1, 2, 3, 4],\n  fc: 14\n}, {\n  lngs: [\"lt\"],\n  nr: [1, 2, 10],\n  fc: 15\n}, {\n  lngs: [\"lv\"],\n  nr: [1, 2, 0],\n  fc: 16\n}, {\n  lngs: [\"mk\"],\n  nr: [1, 2],\n  fc: 17\n}, {\n  lngs: [\"mnk\"],\n  nr: [0, 1, 2],\n  fc: 18\n}, {\n  lngs: [\"mt\"],\n  nr: [1, 2, 11, 20],\n  fc: 19\n}, {\n  lngs: [\"or\"],\n  nr: [2, 1],\n  fc: 2\n}, {\n  lngs: [\"ro\"],\n  nr: [1, 2, 20],\n  fc: 20\n}, {\n  lngs: [\"sl\"],\n  nr: [5, 1, 2, 3],\n  fc: 21\n}, {\n  lngs: [\"he\", \"iw\"],\n  nr: [1, 2, 20, 21],\n  fc: 22\n}];\nvar _rulesPluralsTypes = {\n  1: function(n) {\n    return Number(n > 1);\n  },\n  2: function(n) {\n    return Number(n != 1);\n  },\n  3: function(n) {\n    return 0;\n  },\n  4: function(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  5: function(n) {\n    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);\n  },\n  6: function(n) {\n    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n  },\n  7: function(n) {\n    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  8: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n  },\n  9: function(n) {\n    return Number(n >= 2);\n  },\n  10: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n  },\n  11: function(n) {\n    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);\n  },\n  12: function(n) {\n    return Number(n % 10 != 1 || n % 100 == 11);\n  },\n  13: function(n) {\n    return Number(n !== 0);\n  },\n  14: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n  },\n  15: function(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  16: function(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n  },\n  17: function(n) {\n    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);\n  },\n  18: function(n) {\n    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n  },\n  19: function(n) {\n    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);\n  },\n  20: function(n) {\n    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);\n  },\n  21: function(n) {\n    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);\n  },\n  22: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);\n  }\n};\nvar nonIntlVersions = [\"v1\", \"v2\", \"v3\"];\nvar intlVersions = [\"v4\"];\nvar suffixesOrder = {\n  zero: 0,\n  one: 1,\n  two: 2,\n  few: 3,\n  many: 4,\n  other: 5\n};\nfunction createRules() {\n  const rules = {};\n  sets.forEach((set) => {\n    set.lngs.forEach((l) => {\n      rules[l] = {\n        numbers: set.nr,\n        plurals: _rulesPluralsTypes[set.fc]\n      };\n    });\n  });\n  return rules;\n}\nvar PluralResolver = class {\n  constructor(languageUtils) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    this.languageUtils = languageUtils;\n    this.options = options;\n    this.logger = baseLogger.create(\"pluralResolver\");\n    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === \"undefined\" || !Intl.PluralRules)) {\n      this.options.compatibilityJSON = \"v3\";\n      this.logger.error(\"Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.\");\n    }\n    this.rules = createRules();\n  }\n  addRule(lng, obj) {\n    this.rules[lng] = obj;\n  }\n  getRule(code) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (this.shouldUseIntlApi()) {\n      try {\n        return new Intl.PluralRules(getCleanedCode(code), {\n          type: options.ordinal ? \"ordinal\" : \"cardinal\"\n        });\n      } catch {\n        return;\n      }\n    }\n    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n  }\n  needsPlural(code) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const rule = this.getRule(code, options);\n    if (this.shouldUseIntlApi()) {\n      return rule && rule.resolvedOptions().pluralCategories.length > 1;\n    }\n    return rule && rule.numbers.length > 1;\n  }\n  getPluralFormsOfKey(code, key) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return this.getSuffixes(code, options).map((suffix) => `${key}${suffix}`);\n  }\n  getSuffixes(code) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const rule = this.getRule(code, options);\n    if (!rule) {\n      return [];\n    }\n    if (this.shouldUseIntlApi()) {\n      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : \"\"}${pluralCategory}`);\n    }\n    return rule.numbers.map((number) => this.getSuffix(code, number, options));\n  }\n  getSuffix(code, count) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const rule = this.getRule(code, options);\n    if (rule) {\n      if (this.shouldUseIntlApi()) {\n        return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : \"\"}${rule.select(count)}`;\n      }\n      return this.getSuffixRetroCompatible(rule, count);\n    }\n    this.logger.warn(`no plural rule found for: ${code}`);\n    return \"\";\n  }\n  getSuffixRetroCompatible(rule, count) {\n    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n    let suffix = rule.numbers[idx];\n    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n      if (suffix === 2) {\n        suffix = \"plural\";\n      } else if (suffix === 1) {\n        suffix = \"\";\n      }\n    }\n    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();\n    if (this.options.compatibilityJSON === \"v1\") {\n      if (suffix === 1)\n        return \"\";\n      if (typeof suffix === \"number\")\n        return `_plural_${suffix.toString()}`;\n      return returnSuffix();\n    } else if (this.options.compatibilityJSON === \"v2\") {\n      return returnSuffix();\n    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n      return returnSuffix();\n    }\n    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n  }\n  shouldUseIntlApi() {\n    return !nonIntlVersions.includes(this.options.compatibilityJSON);\n  }\n};\nfunction deepFindWithDefaults(data, defaultData, key) {\n  let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \".\";\n  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n  let path = getPathWithDefaults(data, defaultData, key);\n  if (!path && ignoreJSONStructure && typeof key === \"string\") {\n    path = deepFind(data, key, keySeparator);\n    if (path === void 0)\n      path = deepFind(defaultData, key, keySeparator);\n  }\n  return path;\n}\nvar Interpolator = class {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    this.logger = baseLogger.create(\"interpolator\");\n    this.options = options;\n    this.format = options.interpolation && options.interpolation.format || ((value) => value);\n    this.init(options);\n  }\n  init() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    if (!options.interpolation)\n      options.interpolation = {\n        escapeValue: true\n      };\n    const iOpts = options.interpolation;\n    this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;\n    this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;\n    this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;\n    this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || \"{{\";\n    this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || \"}}\";\n    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n    this.unescapePrefix = iOpts.unescapeSuffix ? \"\" : iOpts.unescapePrefix || \"-\";\n    this.unescapeSuffix = this.unescapePrefix ? \"\" : iOpts.unescapeSuffix || \"\";\n    this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape(\"$t(\");\n    this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(\")\");\n    this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || \",\";\n    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;\n    this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;\n    this.resetRegExp();\n  }\n  reset() {\n    if (this.options)\n      this.init(this.options);\n  }\n  resetRegExp() {\n    const regexpStr = `${this.prefix}(.+?)${this.suffix}`;\n    this.regexp = new RegExp(regexpStr, \"g\");\n    const regexpUnescapeStr = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;\n    this.regexpUnescape = new RegExp(regexpUnescapeStr, \"g\");\n    const nestingRegexpStr = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;\n    this.nestingRegexp = new RegExp(nestingRegexpStr, \"g\");\n  }\n  interpolate(str, data, lng, options) {\n    let match;\n    let value;\n    let replaces;\n    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};\n    function regexSafe(val) {\n      return val.replace(/\\$/g, \"$$$$\");\n    }\n    const handleFormat = (key) => {\n      if (key.indexOf(this.formatSeparator) < 0) {\n        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);\n        return this.alwaysFormat ? this.format(path, void 0, lng, {\n          ...options,\n          ...data,\n          interpolationkey: key\n        }) : path;\n      }\n      const p = key.split(this.formatSeparator);\n      const k = p.shift().trim();\n      const f = p.join(this.formatSeparator).trim();\n      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {\n        ...options,\n        ...data,\n        interpolationkey: k\n      });\n    };\n    this.resetRegExp();\n    const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;\n    const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;\n    const todos = [{\n      regex: this.regexpUnescape,\n      safeValue: (val) => regexSafe(val)\n    }, {\n      regex: this.regexp,\n      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)\n    }];\n    todos.forEach((todo) => {\n      replaces = 0;\n      while (match = todo.regex.exec(str)) {\n        const matchedVar = match[1].trim();\n        value = handleFormat(matchedVar);\n        if (value === void 0) {\n          if (typeof missingInterpolationHandler === \"function\") {\n            const temp = missingInterpolationHandler(str, match, options);\n            value = typeof temp === \"string\" ? temp : \"\";\n          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {\n            value = \"\";\n          } else if (skipOnVariables) {\n            value = match[0];\n            continue;\n          } else {\n            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);\n            value = \"\";\n          }\n        } else if (typeof value !== \"string\" && !this.useRawValueToEscape) {\n          value = makeString(value);\n        }\n        const safeValue = todo.safeValue(value);\n        str = str.replace(match[0], safeValue);\n        if (skipOnVariables) {\n          todo.regex.lastIndex += value.length;\n          todo.regex.lastIndex -= match[0].length;\n        } else {\n          todo.regex.lastIndex = 0;\n        }\n        replaces++;\n        if (replaces >= this.maxReplaces) {\n          break;\n        }\n      }\n    });\n    return str;\n  }\n  nest(str, fc) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    let match;\n    let value;\n    let clonedOptions;\n    function handleHasOptions(key, inheritedOptions) {\n      const sep = this.nestingOptionsSeparator;\n      if (key.indexOf(sep) < 0)\n        return key;\n      const c = key.split(new RegExp(`${sep}[ ]*{`));\n      let optionsString = `{${c[1]}`;\n      key = c[0];\n      optionsString = this.interpolate(optionsString, clonedOptions);\n      const matchedSingleQuotes = optionsString.match(/'/g);\n      const matchedDoubleQuotes = optionsString.match(/\"/g);\n      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {\n        optionsString = optionsString.replace(/'/g, '\"');\n      }\n      try {\n        clonedOptions = JSON.parse(optionsString);\n        if (inheritedOptions)\n          clonedOptions = {\n            ...inheritedOptions,\n            ...clonedOptions\n          };\n      } catch (e) {\n        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);\n        return `${key}${sep}${optionsString}`;\n      }\n      delete clonedOptions.defaultValue;\n      return key;\n    }\n    while (match = this.nestingRegexp.exec(str)) {\n      let formatters = [];\n      clonedOptions = {\n        ...options\n      };\n      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== \"string\" ? clonedOptions.replace : clonedOptions;\n      clonedOptions.applyPostProcessor = false;\n      delete clonedOptions.defaultValue;\n      let doReduce = false;\n      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {\n        const r = match[1].split(this.formatSeparator).map((elem) => elem.trim());\n        match[1] = r.shift();\n        formatters = r;\n        doReduce = true;\n      }\n      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n      if (value && match[0] === str && typeof value !== \"string\")\n        return value;\n      if (typeof value !== \"string\")\n        value = makeString(value);\n      if (!value) {\n        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);\n        value = \"\";\n      }\n      if (doReduce) {\n        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {\n          ...options,\n          interpolationkey: match[1].trim()\n        }), value.trim());\n      }\n      str = str.replace(match[0], value);\n      this.regexp.lastIndex = 0;\n    }\n    return str;\n  }\n};\nfunction parseFormatStr(formatStr) {\n  let formatName = formatStr.toLowerCase().trim();\n  const formatOptions = {};\n  if (formatStr.indexOf(\"(\") > -1) {\n    const p = formatStr.split(\"(\");\n    formatName = p[0].toLowerCase().trim();\n    const optStr = p[1].substring(0, p[1].length - 1);\n    if (formatName === \"currency\" && optStr.indexOf(\":\") < 0) {\n      if (!formatOptions.currency)\n        formatOptions.currency = optStr.trim();\n    } else if (formatName === \"relativetime\" && optStr.indexOf(\":\") < 0) {\n      if (!formatOptions.range)\n        formatOptions.range = optStr.trim();\n    } else {\n      const opts = optStr.split(\";\");\n      opts.forEach((opt) => {\n        if (!opt)\n          return;\n        const [key, ...rest] = opt.split(\":\");\n        const val = rest.join(\":\").trim().replace(/^'+|'+$/g, \"\");\n        if (!formatOptions[key.trim()])\n          formatOptions[key.trim()] = val;\n        if (val === \"false\")\n          formatOptions[key.trim()] = false;\n        if (val === \"true\")\n          formatOptions[key.trim()] = true;\n        if (!isNaN(val))\n          formatOptions[key.trim()] = parseInt(val, 10);\n      });\n    }\n  }\n  return {\n    formatName,\n    formatOptions\n  };\n}\nfunction createCachedFormatter(fn) {\n  const cache = {};\n  return function invokeFormatter(val, lng, options) {\n    const key = lng + JSON.stringify(options);\n    let formatter = cache[key];\n    if (!formatter) {\n      formatter = fn(getCleanedCode(lng), options);\n      cache[key] = formatter;\n    }\n    return formatter(val);\n  };\n}\nvar Formatter = class {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    this.logger = baseLogger.create(\"formatter\");\n    this.options = options;\n    this.formats = {\n      number: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.NumberFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val);\n      }),\n      currency: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.NumberFormat(lng, {\n          ...opt,\n          style: \"currency\"\n        });\n        return (val) => formatter.format(val);\n      }),\n      datetime: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.DateTimeFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val);\n      }),\n      relativetime: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.RelativeTimeFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val, opt.range || \"day\");\n      }),\n      list: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.ListFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val);\n      })\n    };\n    this.init(options);\n  }\n  init(services) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n      interpolation: {}\n    };\n    const iOpts = options.interpolation;\n    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n  }\n  add(name, fc) {\n    this.formats[name.toLowerCase().trim()] = fc;\n  }\n  addCached(name, fc) {\n    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);\n  }\n  format(value, format, lng) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const formats = format.split(this.formatSeparator);\n    const result = formats.reduce((mem, f) => {\n      const {\n        formatName,\n        formatOptions\n      } = parseFormatStr(f);\n      if (this.formats[formatName]) {\n        let formatted = mem;\n        try {\n          const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};\n          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;\n          formatted = this.formats[formatName](mem, l, {\n            ...formatOptions,\n            ...options,\n            ...valOptions\n          });\n        } catch (error) {\n          this.logger.warn(error);\n        }\n        return formatted;\n      } else {\n        this.logger.warn(`there was no format function for ${formatName}`);\n      }\n      return mem;\n    }, value);\n    return result;\n  }\n};\nfunction removePending(q, name) {\n  if (q.pending[name] !== void 0) {\n    delete q.pending[name];\n    q.pendingCount--;\n  }\n}\nvar Connector = class extends EventEmitter {\n  constructor(backend, store, services) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    super();\n    this.backend = backend;\n    this.store = store;\n    this.services = services;\n    this.languageUtils = services.languageUtils;\n    this.options = options;\n    this.logger = baseLogger.create(\"backendConnector\");\n    this.waitingReads = [];\n    this.maxParallelReads = options.maxParallelReads || 10;\n    this.readingCalls = 0;\n    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;\n    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;\n    this.state = {};\n    this.queue = [];\n    if (this.backend && this.backend.init) {\n      this.backend.init(services, options.backend, options);\n    }\n  }\n  queueLoad(languages, namespaces, options, callback) {\n    const toLoad = {};\n    const pending = {};\n    const toLoadLanguages = {};\n    const toLoadNamespaces = {};\n    languages.forEach((lng) => {\n      let hasAllNamespaces = true;\n      namespaces.forEach((ns) => {\n        const name = `${lng}|${ns}`;\n        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {\n          this.state[name] = 2;\n        } else if (this.state[name] < 0)\n          ;\n        else if (this.state[name] === 1) {\n          if (pending[name] === void 0)\n            pending[name] = true;\n        } else {\n          this.state[name] = 1;\n          hasAllNamespaces = false;\n          if (pending[name] === void 0)\n            pending[name] = true;\n          if (toLoad[name] === void 0)\n            toLoad[name] = true;\n          if (toLoadNamespaces[ns] === void 0)\n            toLoadNamespaces[ns] = true;\n        }\n      });\n      if (!hasAllNamespaces)\n        toLoadLanguages[lng] = true;\n    });\n    if (Object.keys(toLoad).length || Object.keys(pending).length) {\n      this.queue.push({\n        pending,\n        pendingCount: Object.keys(pending).length,\n        loaded: {},\n        errors: [],\n        callback\n      });\n    }\n    return {\n      toLoad: Object.keys(toLoad),\n      pending: Object.keys(pending),\n      toLoadLanguages: Object.keys(toLoadLanguages),\n      toLoadNamespaces: Object.keys(toLoadNamespaces)\n    };\n  }\n  loaded(name, err, data) {\n    const s = name.split(\"|\");\n    const lng = s[0];\n    const ns = s[1];\n    if (err)\n      this.emit(\"failedLoading\", lng, ns, err);\n    if (data) {\n      this.store.addResourceBundle(lng, ns, data);\n    }\n    this.state[name] = err ? -1 : 2;\n    const loaded = {};\n    this.queue.forEach((q) => {\n      pushPath(q.loaded, [lng], ns);\n      removePending(q, name);\n      if (err)\n        q.errors.push(err);\n      if (q.pendingCount === 0 && !q.done) {\n        Object.keys(q.loaded).forEach((l) => {\n          if (!loaded[l])\n            loaded[l] = {};\n          const loadedKeys = q.loaded[l];\n          if (loadedKeys.length) {\n            loadedKeys.forEach((n) => {\n              if (loaded[l][n] === void 0)\n                loaded[l][n] = true;\n            });\n          }\n        });\n        q.done = true;\n        if (q.errors.length) {\n          q.callback(q.errors);\n        } else {\n          q.callback();\n        }\n      }\n    });\n    this.emit(\"loaded\", loaded);\n    this.queue = this.queue.filter((q) => !q.done);\n  }\n  read(lng, ns, fcName) {\n    let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;\n    let callback = arguments.length > 5 ? arguments[5] : void 0;\n    if (!lng.length)\n      return callback(null, {});\n    if (this.readingCalls >= this.maxParallelReads) {\n      this.waitingReads.push({\n        lng,\n        ns,\n        fcName,\n        tried,\n        wait,\n        callback\n      });\n      return;\n    }\n    this.readingCalls++;\n    const resolver = (err, data) => {\n      this.readingCalls--;\n      if (this.waitingReads.length > 0) {\n        const next = this.waitingReads.shift();\n        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);\n      }\n      if (err && data && tried < this.maxRetries) {\n        setTimeout(() => {\n          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);\n        }, wait);\n        return;\n      }\n      callback(err, data);\n    };\n    const fc = this.backend[fcName].bind(this.backend);\n    if (fc.length === 2) {\n      try {\n        const r = fc(lng, ns);\n        if (r && typeof r.then === \"function\") {\n          r.then((data) => resolver(null, data)).catch(resolver);\n        } else {\n          resolver(null, r);\n        }\n      } catch (err) {\n        resolver(err);\n      }\n      return;\n    }\n    return fc(lng, ns, resolver);\n  }\n  prepareLoading(languages, namespaces) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    let callback = arguments.length > 3 ? arguments[3] : void 0;\n    if (!this.backend) {\n      this.logger.warn(\"No backend was added via i18next.use. Will not load resources.\");\n      return callback && callback();\n    }\n    if (typeof languages === \"string\")\n      languages = this.languageUtils.toResolveHierarchy(languages);\n    if (typeof namespaces === \"string\")\n      namespaces = [namespaces];\n    const toLoad = this.queueLoad(languages, namespaces, options, callback);\n    if (!toLoad.toLoad.length) {\n      if (!toLoad.pending.length)\n        callback();\n      return null;\n    }\n    toLoad.toLoad.forEach((name) => {\n      this.loadOne(name);\n    });\n  }\n  load(languages, namespaces, callback) {\n    this.prepareLoading(languages, namespaces, {}, callback);\n  }\n  reload(languages, namespaces, callback) {\n    this.prepareLoading(languages, namespaces, {\n      reload: true\n    }, callback);\n  }\n  loadOne(name) {\n    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    const s = name.split(\"|\");\n    const lng = s[0];\n    const ns = s[1];\n    this.read(lng, ns, \"read\", void 0, void 0, (err, data) => {\n      if (err)\n        this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);\n      if (!err && data)\n        this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);\n      this.loaded(name, err, data);\n    });\n  }\n  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {\n    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};\n    let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {\n    };\n    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {\n      this.logger.warn(`did not save key \"${key}\" as the namespace \"${namespace}\" was not yet loaded`, \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n      return;\n    }\n    if (key === void 0 || key === null || key === \"\")\n      return;\n    if (this.backend && this.backend.create) {\n      const opts = {\n        ...options,\n        isUpdate\n      };\n      const fc = this.backend.create.bind(this.backend);\n      if (fc.length < 6) {\n        try {\n          let r;\n          if (fc.length === 5) {\n            r = fc(languages, namespace, key, fallbackValue, opts);\n          } else {\n            r = fc(languages, namespace, key, fallbackValue);\n          }\n          if (r && typeof r.then === \"function\") {\n            r.then((data) => clb(null, data)).catch(clb);\n          } else {\n            clb(null, r);\n          }\n        } catch (err) {\n          clb(err);\n        }\n      } else {\n        fc(languages, namespace, key, fallbackValue, clb, opts);\n      }\n    }\n    if (!languages || !languages[0])\n      return;\n    this.store.addResource(languages[0], namespace, key, fallbackValue);\n  }\n};\nfunction get() {\n  return {\n    debug: false,\n    initImmediate: true,\n    ns: [\"translation\"],\n    defaultNS: [\"translation\"],\n    fallbackLng: [\"dev\"],\n    fallbackNS: false,\n    supportedLngs: false,\n    nonExplicitSupportedLngs: false,\n    load: \"all\",\n    preload: false,\n    simplifyPluralSuffix: true,\n    keySeparator: \".\",\n    nsSeparator: \":\",\n    pluralSeparator: \"_\",\n    contextSeparator: \"_\",\n    partialBundledLanguages: false,\n    saveMissing: false,\n    updateMissing: false,\n    saveMissingTo: \"fallback\",\n    saveMissingPlurals: true,\n    missingKeyHandler: false,\n    missingInterpolationHandler: false,\n    postProcess: false,\n    postProcessPassResolved: false,\n    returnNull: false,\n    returnEmptyString: true,\n    returnObjects: false,\n    joinArrays: false,\n    returnedObjectHandler: false,\n    parseMissingKeyHandler: false,\n    appendNamespaceToMissingKey: false,\n    appendNamespaceToCIMode: false,\n    overloadTranslationOptionHandler: function handle(args) {\n      let ret = {};\n      if (typeof args[1] === \"object\")\n        ret = args[1];\n      if (typeof args[1] === \"string\")\n        ret.defaultValue = args[1];\n      if (typeof args[2] === \"string\")\n        ret.tDescription = args[2];\n      if (typeof args[2] === \"object\" || typeof args[3] === \"object\") {\n        const options = args[3] || args[2];\n        Object.keys(options).forEach((key) => {\n          ret[key] = options[key];\n        });\n      }\n      return ret;\n    },\n    interpolation: {\n      escapeValue: true,\n      format: (value, format, lng, options) => value,\n      prefix: \"{{\",\n      suffix: \"}}\",\n      formatSeparator: \",\",\n      unescapePrefix: \"-\",\n      nestingPrefix: \"$t(\",\n      nestingSuffix: \")\",\n      nestingOptionsSeparator: \",\",\n      maxReplaces: 1e3,\n      skipOnVariables: true\n    }\n  };\n}\nfunction transformOptions(options) {\n  if (typeof options.ns === \"string\")\n    options.ns = [options.ns];\n  if (typeof options.fallbackLng === \"string\")\n    options.fallbackLng = [options.fallbackLng];\n  if (typeof options.fallbackNS === \"string\")\n    options.fallbackNS = [options.fallbackNS];\n  if (options.supportedLngs && options.supportedLngs.indexOf(\"cimode\") < 0) {\n    options.supportedLngs = options.supportedLngs.concat([\"cimode\"]);\n  }\n  return options;\n}\nfunction noop() {\n}\nfunction bindMemberFunctions(inst) {\n  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));\n  mems.forEach((mem) => {\n    if (typeof inst[mem] === \"function\") {\n      inst[mem] = inst[mem].bind(inst);\n    }\n  });\n}\nvar I18n = class _I18n extends EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : void 0;\n    super();\n    this.options = transformOptions(options);\n    this.services = {};\n    this.logger = baseLogger;\n    this.modules = {\n      external: []\n    };\n    bindMemberFunctions(this);\n    if (callback && !this.isInitialized && !options.isClone) {\n      if (!this.options.initImmediate) {\n        this.init(options, callback);\n        return this;\n      }\n      setTimeout(() => {\n        this.init(options, callback);\n      }, 0);\n    }\n  }\n  init() {\n    var _this = this;\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : void 0;\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    if (!options.defaultNS && options.defaultNS !== false && options.ns) {\n      if (typeof options.ns === \"string\") {\n        options.defaultNS = options.ns;\n      } else if (options.ns.indexOf(\"translation\") < 0) {\n        options.defaultNS = options.ns[0];\n      }\n    }\n    const defOpts = get();\n    this.options = {\n      ...defOpts,\n      ...this.options,\n      ...transformOptions(options)\n    };\n    if (this.options.compatibilityAPI !== \"v1\") {\n      this.options.interpolation = {\n        ...defOpts.interpolation,\n        ...this.options.interpolation\n      };\n    }\n    if (options.keySeparator !== void 0) {\n      this.options.userDefinedKeySeparator = options.keySeparator;\n    }\n    if (options.nsSeparator !== void 0) {\n      this.options.userDefinedNsSeparator = options.nsSeparator;\n    }\n    function createClassOnDemand(ClassOrObject) {\n      if (!ClassOrObject)\n        return null;\n      if (typeof ClassOrObject === \"function\")\n        return new ClassOrObject();\n      return ClassOrObject;\n    }\n    if (!this.options.isClone) {\n      if (this.modules.logger) {\n        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n      } else {\n        baseLogger.init(null, this.options);\n      }\n      let formatter;\n      if (this.modules.formatter) {\n        formatter = this.modules.formatter;\n      } else if (typeof Intl !== \"undefined\") {\n        formatter = Formatter;\n      }\n      const lu = new LanguageUtil(this.options);\n      this.store = new ResourceStore(this.options.resources, this.options);\n      const s = this.services;\n      s.logger = baseLogger;\n      s.resourceStore = this.store;\n      s.languageUtils = lu;\n      s.pluralResolver = new PluralResolver(lu, {\n        prepend: this.options.pluralSeparator,\n        compatibilityJSON: this.options.compatibilityJSON,\n        simplifyPluralSuffix: this.options.simplifyPluralSuffix\n      });\n      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {\n        s.formatter = createClassOnDemand(formatter);\n        s.formatter.init(s, this.options);\n        this.options.interpolation.format = s.formatter.format.bind(s.formatter);\n      }\n      s.interpolator = new Interpolator(this.options);\n      s.utils = {\n        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n      };\n      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);\n      s.backendConnector.on(\"*\", function(event) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        _this.emit(event, ...args);\n      });\n      if (this.modules.languageDetector) {\n        s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n        if (s.languageDetector.init)\n          s.languageDetector.init(s, this.options.detection, this.options);\n      }\n      if (this.modules.i18nFormat) {\n        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n        if (s.i18nFormat.init)\n          s.i18nFormat.init(this);\n      }\n      this.translator = new Translator(this.services, this.options);\n      this.translator.on(\"*\", function(event) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        _this.emit(event, ...args);\n      });\n      this.modules.external.forEach((m) => {\n        if (m.init)\n          m.init(this);\n      });\n    }\n    this.format = this.options.interpolation.format;\n    if (!callback)\n      callback = noop;\n    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {\n      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n      if (codes.length > 0 && codes[0] !== \"dev\")\n        this.options.lng = codes[0];\n    }\n    if (!this.services.languageDetector && !this.options.lng) {\n      this.logger.warn(\"init: no languageDetector is used and no lng is defined\");\n    }\n    const storeApi = [\"getResource\", \"hasResourceBundle\", \"getResourceBundle\", \"getDataByLanguage\"];\n    storeApi.forEach((fcName) => {\n      this[fcName] = function() {\n        return _this.store[fcName](...arguments);\n      };\n    });\n    const storeApiChained = [\"addResource\", \"addResources\", \"addResourceBundle\", \"removeResourceBundle\"];\n    storeApiChained.forEach((fcName) => {\n      this[fcName] = function() {\n        _this.store[fcName](...arguments);\n        return _this;\n      };\n    });\n    const deferred = defer();\n    const load = () => {\n      const finish = (err, t2) => {\n        if (this.isInitialized && !this.initializedStoreOnce)\n          this.logger.warn(\"init: i18next is already initialized. You should call init just once!\");\n        this.isInitialized = true;\n        if (!this.options.isClone)\n          this.logger.log(\"initialized\", this.options);\n        this.emit(\"initialized\", this.options);\n        deferred.resolve(t2);\n        callback(err, t2);\n      };\n      if (this.languages && this.options.compatibilityAPI !== \"v1\" && !this.isInitialized)\n        return finish(null, this.t.bind(this));\n      this.changeLanguage(this.options.lng, finish);\n    };\n    if (this.options.resources || !this.options.initImmediate) {\n      load();\n    } else {\n      setTimeout(load, 0);\n    }\n    return deferred;\n  }\n  loadResources(language) {\n    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;\n    let usedCallback = callback;\n    const usedLng = typeof language === \"string\" ? language : this.language;\n    if (typeof language === \"function\")\n      usedCallback = language;\n    if (!this.options.resources || this.options.partialBundledLanguages) {\n      if (usedLng && usedLng.toLowerCase() === \"cimode\" && (!this.options.preload || this.options.preload.length === 0))\n        return usedCallback();\n      const toLoad = [];\n      const append = (lng) => {\n        if (!lng)\n          return;\n        if (lng === \"cimode\")\n          return;\n        const lngs = this.services.languageUtils.toResolveHierarchy(lng);\n        lngs.forEach((l) => {\n          if (l === \"cimode\")\n            return;\n          if (toLoad.indexOf(l) < 0)\n            toLoad.push(l);\n        });\n      };\n      if (!usedLng) {\n        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n        fallbacks.forEach((l) => append(l));\n      } else {\n        append(usedLng);\n      }\n      if (this.options.preload) {\n        this.options.preload.forEach((l) => append(l));\n      }\n      this.services.backendConnector.load(toLoad, this.options.ns, (e) => {\n        if (!e && !this.resolvedLanguage && this.language)\n          this.setResolvedLanguage(this.language);\n        usedCallback(e);\n      });\n    } else {\n      usedCallback(null);\n    }\n  }\n  reloadResources(lngs, ns, callback) {\n    const deferred = defer();\n    if (!lngs)\n      lngs = this.languages;\n    if (!ns)\n      ns = this.options.ns;\n    if (!callback)\n      callback = noop;\n    this.services.backendConnector.reload(lngs, ns, (err) => {\n      deferred.resolve();\n      callback(err);\n    });\n    return deferred;\n  }\n  use(module) {\n    if (!module)\n      throw new Error(\"You are passing an undefined module! Please check the object you are passing to i18next.use()\");\n    if (!module.type)\n      throw new Error(\"You are passing a wrong module! Please check the object you are passing to i18next.use()\");\n    if (module.type === \"backend\") {\n      this.modules.backend = module;\n    }\n    if (module.type === \"logger\" || module.log && module.warn && module.error) {\n      this.modules.logger = module;\n    }\n    if (module.type === \"languageDetector\") {\n      this.modules.languageDetector = module;\n    }\n    if (module.type === \"i18nFormat\") {\n      this.modules.i18nFormat = module;\n    }\n    if (module.type === \"postProcessor\") {\n      postProcessor.addPostProcessor(module);\n    }\n    if (module.type === \"formatter\") {\n      this.modules.formatter = module;\n    }\n    if (module.type === \"3rdParty\") {\n      this.modules.external.push(module);\n    }\n    return this;\n  }\n  setResolvedLanguage(l) {\n    if (!l || !this.languages)\n      return;\n    if ([\"cimode\", \"dev\"].indexOf(l) > -1)\n      return;\n    for (let li = 0; li < this.languages.length; li++) {\n      const lngInLngs = this.languages[li];\n      if ([\"cimode\", \"dev\"].indexOf(lngInLngs) > -1)\n        continue;\n      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {\n        this.resolvedLanguage = lngInLngs;\n        break;\n      }\n    }\n  }\n  changeLanguage(lng, callback) {\n    var _this2 = this;\n    this.isLanguageChangingTo = lng;\n    const deferred = defer();\n    this.emit(\"languageChanging\", lng);\n    const setLngProps = (l) => {\n      this.language = l;\n      this.languages = this.services.languageUtils.toResolveHierarchy(l);\n      this.resolvedLanguage = void 0;\n      this.setResolvedLanguage(l);\n    };\n    const done = (err, l) => {\n      if (l) {\n        setLngProps(l);\n        this.translator.changeLanguage(l);\n        this.isLanguageChangingTo = void 0;\n        this.emit(\"languageChanged\", l);\n        this.logger.log(\"languageChanged\", l);\n      } else {\n        this.isLanguageChangingTo = void 0;\n      }\n      deferred.resolve(function() {\n        return _this2.t(...arguments);\n      });\n      if (callback)\n        callback(err, function() {\n          return _this2.t(...arguments);\n        });\n    };\n    const setLng = (lngs) => {\n      if (!lng && !lngs && this.services.languageDetector)\n        lngs = [];\n      const l = typeof lngs === \"string\" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);\n      if (l) {\n        if (!this.language) {\n          setLngProps(l);\n        }\n        if (!this.translator.language)\n          this.translator.changeLanguage(l);\n        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage)\n          this.services.languageDetector.cacheUserLanguage(l);\n      }\n      this.loadResources(l, (err) => {\n        done(err, l);\n      });\n    };\n    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n      setLng(this.services.languageDetector.detect());\n    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n      if (this.services.languageDetector.detect.length === 0) {\n        this.services.languageDetector.detect().then(setLng);\n      } else {\n        this.services.languageDetector.detect(setLng);\n      }\n    } else {\n      setLng(lng);\n    }\n    return deferred;\n  }\n  getFixedT(lng, ns, keyPrefix) {\n    var _this3 = this;\n    const fixedT = function(key, opts) {\n      let options;\n      if (typeof opts !== \"object\") {\n        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          rest[_key3 - 2] = arguments[_key3];\n        }\n        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));\n      } else {\n        options = {\n          ...opts\n        };\n      }\n      options.lng = options.lng || fixedT.lng;\n      options.lngs = options.lngs || fixedT.lngs;\n      options.ns = options.ns || fixedT.ns;\n      options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;\n      const keySeparator = _this3.options.keySeparator || \".\";\n      let resultKey;\n      if (options.keyPrefix && Array.isArray(key)) {\n        resultKey = key.map((k) => `${options.keyPrefix}${keySeparator}${k}`);\n      } else {\n        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;\n      }\n      return _this3.t(resultKey, options);\n    };\n    if (typeof lng === \"string\") {\n      fixedT.lng = lng;\n    } else {\n      fixedT.lngs = lng;\n    }\n    fixedT.ns = ns;\n    fixedT.keyPrefix = keyPrefix;\n    return fixedT;\n  }\n  t() {\n    return this.translator && this.translator.translate(...arguments);\n  }\n  exists() {\n    return this.translator && this.translator.exists(...arguments);\n  }\n  setDefaultNamespace(ns) {\n    this.options.defaultNS = ns;\n  }\n  hasLoadedNamespace(ns) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (!this.isInitialized) {\n      this.logger.warn(\"hasLoadedNamespace: i18next was not initialized\", this.languages);\n      return false;\n    }\n    if (!this.languages || !this.languages.length) {\n      this.logger.warn(\"hasLoadedNamespace: i18n.languages were undefined or empty\", this.languages);\n      return false;\n    }\n    const lng = options.lng || this.resolvedLanguage || this.languages[0];\n    const fallbackLng = this.options ? this.options.fallbackLng : false;\n    const lastLng = this.languages[this.languages.length - 1];\n    if (lng.toLowerCase() === \"cimode\")\n      return true;\n    const loadNotPending = (l, n) => {\n      const loadState = this.services.backendConnector.state[`${l}|${n}`];\n      return loadState === -1 || loadState === 2;\n    };\n    if (options.precheck) {\n      const preResult = options.precheck(this, loadNotPending);\n      if (preResult !== void 0)\n        return preResult;\n    }\n    if (this.hasResourceBundle(lng, ns))\n      return true;\n    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)\n      return true;\n    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))\n      return true;\n    return false;\n  }\n  loadNamespaces(ns, callback) {\n    const deferred = defer();\n    if (!this.options.ns) {\n      if (callback)\n        callback();\n      return Promise.resolve();\n    }\n    if (typeof ns === \"string\")\n      ns = [ns];\n    ns.forEach((n) => {\n      if (this.options.ns.indexOf(n) < 0)\n        this.options.ns.push(n);\n    });\n    this.loadResources((err) => {\n      deferred.resolve();\n      if (callback)\n        callback(err);\n    });\n    return deferred;\n  }\n  loadLanguages(lngs, callback) {\n    const deferred = defer();\n    if (typeof lngs === \"string\")\n      lngs = [lngs];\n    const preloaded = this.options.preload || [];\n    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0);\n    if (!newLngs.length) {\n      if (callback)\n        callback();\n      return Promise.resolve();\n    }\n    this.options.preload = preloaded.concat(newLngs);\n    this.loadResources((err) => {\n      deferred.resolve();\n      if (callback)\n        callback(err);\n    });\n    return deferred;\n  }\n  dir(lng) {\n    if (!lng)\n      lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);\n    if (!lng)\n      return \"rtl\";\n    const rtlLngs = [\"ar\", \"shu\", \"sqr\", \"ssh\", \"xaa\", \"yhd\", \"yud\", \"aao\", \"abh\", \"abv\", \"acm\", \"acq\", \"acw\", \"acx\", \"acy\", \"adf\", \"ads\", \"aeb\", \"aec\", \"afb\", \"ajp\", \"apc\", \"apd\", \"arb\", \"arq\", \"ars\", \"ary\", \"arz\", \"auz\", \"avl\", \"ayh\", \"ayl\", \"ayn\", \"ayp\", \"bbz\", \"pga\", \"he\", \"iw\", \"ps\", \"pbt\", \"pbu\", \"pst\", \"prp\", \"prd\", \"ug\", \"ur\", \"ydd\", \"yds\", \"yih\", \"ji\", \"yi\", \"hbo\", \"men\", \"xmn\", \"fa\", \"jpr\", \"peo\", \"pes\", \"prs\", \"dv\", \"sam\", \"ckb\"];\n    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());\n    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf(\"-arab\") > 1 ? \"rtl\" : \"ltr\";\n  }\n  static createInstance() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : void 0;\n    return new _I18n(options, callback);\n  }\n  cloneInstance() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;\n    const forkResourceStore = options.forkResourceStore;\n    if (forkResourceStore)\n      delete options.forkResourceStore;\n    const mergedOptions = {\n      ...this.options,\n      ...options,\n      ...{\n        isClone: true\n      }\n    };\n    const clone = new _I18n(mergedOptions);\n    if (options.debug !== void 0 || options.prefix !== void 0) {\n      clone.logger = clone.logger.clone(options);\n    }\n    const membersToCopy = [\"store\", \"services\", \"language\"];\n    membersToCopy.forEach((m) => {\n      clone[m] = this[m];\n    });\n    clone.services = {\n      ...this.services\n    };\n    clone.services.utils = {\n      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n    };\n    if (forkResourceStore) {\n      clone.store = new ResourceStore(this.store.data, mergedOptions);\n      clone.services.resourceStore = clone.store;\n    }\n    clone.translator = new Translator(clone.services, mergedOptions);\n    clone.translator.on(\"*\", function(event) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n      clone.emit(event, ...args);\n    });\n    clone.init(mergedOptions, callback);\n    clone.translator.options = mergedOptions;\n    clone.translator.backendConnector.services.utils = {\n      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n    };\n    return clone;\n  }\n  toJSON() {\n    return {\n      options: this.options,\n      store: this.store,\n      language: this.language,\n      languages: this.languages,\n      resolvedLanguage: this.resolvedLanguage\n    };\n  }\n};\nvar instance = I18n.createInstance();\ninstance.createInstance = I18n.createInstance;\nvar createInstance = instance.createInstance;\nvar dir = instance.dir;\nvar init = instance.init;\nvar loadResources = instance.loadResources;\nvar reloadResources = instance.reloadResources;\nvar use = instance.use;\nvar changeLanguage = instance.changeLanguage;\nvar getFixedT = instance.getFixedT;\nvar t = instance.t;\nvar exists = instance.exists;\nvar setDefaultNamespace = instance.setDefaultNamespace;\nvar hasLoadedNamespace = instance.hasLoadedNamespace;\nvar loadNamespaces = instance.loadNamespaces;\nvar loadLanguages = instance.loadLanguages;\nexport {\n  changeLanguage,\n  createInstance,\n  instance as default,\n  dir,\n  exists,\n  getFixedT,\n  hasLoadedNamespace,\n  init,\n  loadLanguages,\n  loadNamespaces,\n  loadResources,\n  reloadResources,\n  setDefaultNamespace,\n  t,\n  use\n};\n//# sourceMappingURL=i18next.js.map\n",
      "start": 1701867791958,
      "end": 1701867792046,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:react-swc",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1701867792046,
      "end": 1701867792046,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import \"/node_modules/.vite/deps/chunk-ROME4SDB.js?v=c929456e\";\n\n// node_modules/i18next/dist/esm/i18next.js\nvar consoleLogger = {\n  type: \"logger\",\n  log(args) {\n    this.output(\"log\", args);\n  },\n  warn(args) {\n    this.output(\"warn\", args);\n  },\n  error(args) {\n    this.output(\"error\", args);\n  },\n  output(type, args) {\n    if (console && console[type])\n      console[type].apply(console, args);\n  }\n};\nvar Logger = class _Logger {\n  constructor(concreteLogger) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    this.init(concreteLogger, options);\n  }\n  init(concreteLogger) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    this.prefix = options.prefix || \"i18next:\";\n    this.logger = concreteLogger || consoleLogger;\n    this.options = options;\n    this.debug = options.debug;\n  }\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return this.forward(args, \"log\", \"\", true);\n  }\n  warn() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this.forward(args, \"warn\", \"\", true);\n  }\n  error() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return this.forward(args, \"error\", \"\");\n  }\n  deprecate() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return this.forward(args, \"warn\", \"WARNING DEPRECATED: \", true);\n  }\n  forward(args, lvl, prefix, debugOnly) {\n    if (debugOnly && !this.debug)\n      return null;\n    if (typeof args[0] === \"string\")\n      args[0] = `${prefix}${this.prefix} ${args[0]}`;\n    return this.logger[lvl](args);\n  }\n  create(moduleName) {\n    return new _Logger(this.logger, {\n      ...{\n        prefix: `${this.prefix}:${moduleName}:`\n      },\n      ...this.options\n    });\n  }\n  clone(options) {\n    options = options || this.options;\n    options.prefix = options.prefix || this.prefix;\n    return new _Logger(this.logger, options);\n  }\n};\nvar baseLogger = new Logger();\nvar EventEmitter = class {\n  constructor() {\n    this.observers = {};\n  }\n  on(events, listener) {\n    events.split(\" \").forEach((event) => {\n      this.observers[event] = this.observers[event] || [];\n      this.observers[event].push(listener);\n    });\n    return this;\n  }\n  off(event, listener) {\n    if (!this.observers[event])\n      return;\n    if (!listener) {\n      delete this.observers[event];\n      return;\n    }\n    this.observers[event] = this.observers[event].filter((l) => l !== listener);\n  }\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (this.observers[event]) {\n      const cloned = [].concat(this.observers[event]);\n      cloned.forEach((observer) => {\n        observer(...args);\n      });\n    }\n    if (this.observers[\"*\"]) {\n      const cloned = [].concat(this.observers[\"*\"]);\n      cloned.forEach((observer) => {\n        observer.apply(observer, [event, ...args]);\n      });\n    }\n  }\n};\nfunction defer() {\n  let res;\n  let rej;\n  const promise = new Promise((resolve, reject) => {\n    res = resolve;\n    rej = reject;\n  });\n  promise.resolve = res;\n  promise.reject = rej;\n  return promise;\n}\nfunction makeString(object) {\n  if (object == null)\n    return \"\";\n  return \"\" + object;\n}\nfunction copy(a, s, t2) {\n  a.forEach((m) => {\n    if (s[m])\n      t2[m] = s[m];\n  });\n}\nfunction getLastOfPath(object, path, Empty) {\n  function cleanKey(key) {\n    return key && key.indexOf(\"###\") > -1 ? key.replace(/###/g, \".\") : key;\n  }\n  function canNotTraverseDeeper() {\n    return !object || typeof object === \"string\";\n  }\n  const stack = typeof path !== \"string\" ? [].concat(path) : path.split(\".\");\n  while (stack.length > 1) {\n    if (canNotTraverseDeeper())\n      return {};\n    const key = cleanKey(stack.shift());\n    if (!object[key] && Empty)\n      object[key] = new Empty();\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      object = object[key];\n    } else {\n      object = {};\n    }\n  }\n  if (canNotTraverseDeeper())\n    return {};\n  return {\n    obj: object,\n    k: cleanKey(stack.shift())\n  };\n}\nfunction setPath(object, path, newValue) {\n  const {\n    obj,\n    k\n  } = getLastOfPath(object, path, Object);\n  obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n  const {\n    obj,\n    k\n  } = getLastOfPath(object, path, Object);\n  obj[k] = obj[k] || [];\n  if (concat)\n    obj[k] = obj[k].concat(newValue);\n  if (!concat)\n    obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n  const {\n    obj,\n    k\n  } = getLastOfPath(object, path);\n  if (!obj)\n    return void 0;\n  return obj[k];\n}\nfunction getPathWithDefaults(data, defaultData, key) {\n  const value = getPath(data, key);\n  if (value !== void 0) {\n    return value;\n  }\n  return getPath(defaultData, key);\n}\nfunction deepExtend(target, source, overwrite) {\n  for (const prop in source) {\n    if (prop !== \"__proto__\" && prop !== \"constructor\") {\n      if (prop in target) {\n        if (typeof target[prop] === \"string\" || target[prop] instanceof String || typeof source[prop] === \"string\" || source[prop] instanceof String) {\n          if (overwrite)\n            target[prop] = source[prop];\n        } else {\n          deepExtend(target[prop], source[prop], overwrite);\n        }\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n  }\n  return target;\n}\nfunction regexEscape(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nvar _entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\"\n};\nfunction escape(data) {\n  if (typeof data === \"string\") {\n    return data.replace(/[&<>\"'\\/]/g, (s) => _entityMap[s]);\n  }\n  return data;\n}\nvar chars = [\" \", \",\", \"?\", \"!\", \";\"];\nfunction looksLikeObjectPath(key, nsSeparator, keySeparator) {\n  nsSeparator = nsSeparator || \"\";\n  keySeparator = keySeparator || \"\";\n  const possibleChars = chars.filter((c) => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);\n  if (possibleChars.length === 0)\n    return true;\n  const r = new RegExp(`(${possibleChars.map((c) => c === \"?\" ? \"\\\\?\" : c).join(\"|\")})`);\n  let matched = !r.test(key);\n  if (!matched) {\n    const ki = key.indexOf(keySeparator);\n    if (ki > 0 && !r.test(key.substring(0, ki))) {\n      matched = true;\n    }\n  }\n  return matched;\n}\nfunction deepFind(obj, path) {\n  let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \".\";\n  if (!obj)\n    return void 0;\n  if (obj[path])\n    return obj[path];\n  const paths = path.split(keySeparator);\n  let current = obj;\n  for (let i = 0; i < paths.length; ++i) {\n    if (!current)\n      return void 0;\n    if (typeof current[paths[i]] === \"string\" && i + 1 < paths.length) {\n      return void 0;\n    }\n    if (current[paths[i]] === void 0) {\n      let j = 2;\n      let p = paths.slice(i, i + j).join(keySeparator);\n      let mix = current[p];\n      while (mix === void 0 && paths.length > i + j) {\n        j++;\n        p = paths.slice(i, i + j).join(keySeparator);\n        mix = current[p];\n      }\n      if (mix === void 0)\n        return void 0;\n      if (mix === null)\n        return null;\n      if (path.endsWith(p)) {\n        if (typeof mix === \"string\")\n          return mix;\n        if (p && typeof mix[p] === \"string\")\n          return mix[p];\n      }\n      const joinedPath = paths.slice(i + j).join(keySeparator);\n      if (joinedPath)\n        return deepFind(mix, joinedPath, keySeparator);\n      return void 0;\n    }\n    current = current[paths[i]];\n  }\n  return current;\n}\nfunction getCleanedCode(code) {\n  if (code && code.indexOf(\"_\") > 0)\n    return code.replace(\"_\", \"-\");\n  return code;\n}\nvar ResourceStore = class extends EventEmitter {\n  constructor(data) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n      ns: [\"translation\"],\n      defaultNS: \"translation\"\n    };\n    super();\n    this.data = data || {};\n    this.options = options;\n    if (this.options.keySeparator === void 0) {\n      this.options.keySeparator = \".\";\n    }\n    if (this.options.ignoreJSONStructure === void 0) {\n      this.options.ignoreJSONStructure = true;\n    }\n  }\n  addNamespaces(ns) {\n    if (this.options.ns.indexOf(ns) < 0) {\n      this.options.ns.push(ns);\n    }\n  }\n  removeNamespaces(ns) {\n    const index = this.options.ns.indexOf(ns);\n    if (index > -1) {\n      this.options.ns.splice(index, 1);\n    }\n  }\n  getResource(lng, ns, key) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    const ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;\n    let path = [lng, ns];\n    if (key && typeof key !== \"string\")\n      path = path.concat(key);\n    if (key && typeof key === \"string\")\n      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n    if (lng.indexOf(\".\") > -1) {\n      path = lng.split(\".\");\n    }\n    const result = getPath(this.data, path);\n    if (result || !ignoreJSONStructure || typeof key !== \"string\")\n      return result;\n    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);\n  }\n  addResource(lng, ns, key, value) {\n    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {\n      silent: false\n    };\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    let path = [lng, ns];\n    if (key)\n      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n    if (lng.indexOf(\".\") > -1) {\n      path = lng.split(\".\");\n      value = ns;\n      ns = path[1];\n    }\n    this.addNamespaces(ns);\n    setPath(this.data, path, value);\n    if (!options.silent)\n      this.emit(\"added\", lng, ns, key, value);\n  }\n  addResources(lng, ns, resources) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {\n      silent: false\n    };\n    for (const m in resources) {\n      if (typeof resources[m] === \"string\" || Object.prototype.toString.apply(resources[m]) === \"[object Array]\")\n        this.addResource(lng, ns, m, resources[m], {\n          silent: true\n        });\n    }\n    if (!options.silent)\n      this.emit(\"added\", lng, ns, resources);\n  }\n  addResourceBundle(lng, ns, resources, deep, overwrite) {\n    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {\n      silent: false\n    };\n    let path = [lng, ns];\n    if (lng.indexOf(\".\") > -1) {\n      path = lng.split(\".\");\n      deep = resources;\n      resources = ns;\n      ns = path[1];\n    }\n    this.addNamespaces(ns);\n    let pack = getPath(this.data, path) || {};\n    if (deep) {\n      deepExtend(pack, resources, overwrite);\n    } else {\n      pack = {\n        ...pack,\n        ...resources\n      };\n    }\n    setPath(this.data, path, pack);\n    if (!options.silent)\n      this.emit(\"added\", lng, ns, resources);\n  }\n  removeResourceBundle(lng, ns) {\n    if (this.hasResourceBundle(lng, ns)) {\n      delete this.data[lng][ns];\n    }\n    this.removeNamespaces(ns);\n    this.emit(\"removed\", lng, ns);\n  }\n  hasResourceBundle(lng, ns) {\n    return this.getResource(lng, ns) !== void 0;\n  }\n  getResourceBundle(lng, ns) {\n    if (!ns)\n      ns = this.options.defaultNS;\n    if (this.options.compatibilityAPI === \"v1\")\n      return {\n        ...{},\n        ...this.getResource(lng, ns)\n      };\n    return this.getResource(lng, ns);\n  }\n  getDataByLanguage(lng) {\n    return this.data[lng];\n  }\n  hasLanguageSomeTranslations(lng) {\n    const data = this.getDataByLanguage(lng);\n    const n = data && Object.keys(data) || [];\n    return !!n.find((v) => data[v] && Object.keys(data[v]).length > 0);\n  }\n  toJSON() {\n    return this.data;\n  }\n};\nvar postProcessor = {\n  processors: {},\n  addPostProcessor(module) {\n    this.processors[module.name] = module;\n  },\n  handle(processors, value, key, options, translator) {\n    processors.forEach((processor) => {\n      if (this.processors[processor])\n        value = this.processors[processor].process(value, key, options, translator);\n    });\n    return value;\n  }\n};\nvar checkedLoadedFor = {};\nvar Translator = class _Translator extends EventEmitter {\n  constructor(services) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    super();\n    copy([\"resourceStore\", \"languageUtils\", \"pluralResolver\", \"interpolator\", \"backendConnector\", \"i18nFormat\", \"utils\"], services, this);\n    this.options = options;\n    if (this.options.keySeparator === void 0) {\n      this.options.keySeparator = \".\";\n    }\n    this.logger = baseLogger.create(\"translator\");\n  }\n  changeLanguage(lng) {\n    if (lng)\n      this.language = lng;\n  }\n  exists(key) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n      interpolation: {}\n    };\n    if (key === void 0 || key === null) {\n      return false;\n    }\n    const resolved = this.resolve(key, options);\n    return resolved && resolved.res !== void 0;\n  }\n  extractFromKey(key, options) {\n    let nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;\n    if (nsSeparator === void 0)\n      nsSeparator = \":\";\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    let namespaces = options.ns || this.options.defaultNS || [];\n    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;\n    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);\n    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {\n      const m = key.match(this.interpolator.nestingRegexp);\n      if (m && m.length > 0) {\n        return {\n          key,\n          namespaces\n        };\n      }\n      const parts = key.split(nsSeparator);\n      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)\n        namespaces = parts.shift();\n      key = parts.join(keySeparator);\n    }\n    if (typeof namespaces === \"string\")\n      namespaces = [namespaces];\n    return {\n      key,\n      namespaces\n    };\n  }\n  translate(keys, options, lastKey) {\n    if (typeof options !== \"object\" && this.options.overloadTranslationOptionHandler) {\n      options = this.options.overloadTranslationOptionHandler(arguments);\n    }\n    if (typeof options === \"object\")\n      options = {\n        ...options\n      };\n    if (!options)\n      options = {};\n    if (keys === void 0 || keys === null)\n      return \"\";\n    if (!Array.isArray(keys))\n      keys = [String(keys)];\n    const returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;\n    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;\n    const {\n      key,\n      namespaces\n    } = this.extractFromKey(keys[keys.length - 1], options);\n    const namespace = namespaces[namespaces.length - 1];\n    const lng = options.lng || this.language;\n    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n    if (lng && lng.toLowerCase() === \"cimode\") {\n      if (appendNamespaceToCIMode) {\n        const nsSeparator = options.nsSeparator || this.options.nsSeparator;\n        if (returnDetails) {\n          return {\n            res: `${namespace}${nsSeparator}${key}`,\n            usedKey: key,\n            exactUsedKey: key,\n            usedLng: lng,\n            usedNS: namespace,\n            usedParams: this.getUsedParamsDetails(options)\n          };\n        }\n        return `${namespace}${nsSeparator}${key}`;\n      }\n      if (returnDetails) {\n        return {\n          res: key,\n          usedKey: key,\n          exactUsedKey: key,\n          usedLng: lng,\n          usedNS: namespace,\n          usedParams: this.getUsedParamsDetails(options)\n        };\n      }\n      return key;\n    }\n    const resolved = this.resolve(keys, options);\n    let res = resolved && resolved.res;\n    const resUsedKey = resolved && resolved.usedKey || key;\n    const resExactUsedKey = resolved && resolved.exactUsedKey || key;\n    const resType = Object.prototype.toString.apply(res);\n    const noObject = [\"[object Number]\", \"[object Function]\", \"[object RegExp]\"];\n    const joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;\n    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n    const handleAsObject = typeof res !== \"string\" && typeof res !== \"boolean\" && typeof res !== \"number\";\n    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === \"string\" && resType === \"[object Array]\")) {\n      if (!options.returnObjects && !this.options.returnObjects) {\n        if (!this.options.returnedObjectHandler) {\n          this.logger.warn(\"accessing an object - but returnObjects options is not enabled!\");\n        }\n        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {\n          ...options,\n          ns: namespaces\n        }) : `key '${key} (${this.language})' returned an object instead of string.`;\n        if (returnDetails) {\n          resolved.res = r;\n          resolved.usedParams = this.getUsedParamsDetails(options);\n          return resolved;\n        }\n        return r;\n      }\n      if (keySeparator) {\n        const resTypeIsArray = resType === \"[object Array]\";\n        const copy2 = resTypeIsArray ? [] : {};\n        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n        for (const m in res) {\n          if (Object.prototype.hasOwnProperty.call(res, m)) {\n            const deepKey = `${newKeyToUse}${keySeparator}${m}`;\n            copy2[m] = this.translate(deepKey, {\n              ...options,\n              ...{\n                joinArrays: false,\n                ns: namespaces\n              }\n            });\n            if (copy2[m] === deepKey)\n              copy2[m] = res[m];\n          }\n        }\n        res = copy2;\n      }\n    } else if (handleAsObjectInI18nFormat && typeof joinArrays === \"string\" && resType === \"[object Array]\") {\n      res = res.join(joinArrays);\n      if (res)\n        res = this.extendTranslation(res, keys, options, lastKey);\n    } else {\n      let usedDefault = false;\n      let usedKey = false;\n      const needsPluralHandling = options.count !== void 0 && typeof options.count !== \"string\";\n      const hasDefaultValue = _Translator.hasDefaultValue(options);\n      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : \"\";\n      const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {\n        ordinal: false\n      }) : \"\";\n      const defaultValue = options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;\n      if (!this.isValidLookup(res) && hasDefaultValue) {\n        usedDefault = true;\n        res = defaultValue;\n      }\n      if (!this.isValidLookup(res)) {\n        usedKey = true;\n        res = key;\n      }\n      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;\n      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;\n      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;\n      if (usedKey || usedDefault || updateMissing) {\n        this.logger.log(updateMissing ? \"updateKey\" : \"missingKey\", lng, namespace, key, updateMissing ? defaultValue : res);\n        if (keySeparator) {\n          const fk = this.resolve(key, {\n            ...options,\n            keySeparator: false\n          });\n          if (fk && fk.res)\n            this.logger.warn(\"Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.\");\n        }\n        let lngs = [];\n        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);\n        if (this.options.saveMissingTo === \"fallback\" && fallbackLngs && fallbackLngs[0]) {\n          for (let i = 0; i < fallbackLngs.length; i++) {\n            lngs.push(fallbackLngs[i]);\n          }\n        } else if (this.options.saveMissingTo === \"all\") {\n          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n        } else {\n          lngs.push(options.lng || this.language);\n        }\n        const send = (l, k, specificDefaultValue) => {\n          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;\n          if (this.options.missingKeyHandler) {\n            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);\n          } else if (this.backendConnector && this.backendConnector.saveMissing) {\n            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);\n          }\n          this.emit(\"missingKey\", l, namespace, k, res);\n        };\n        if (this.options.saveMissing) {\n          if (this.options.saveMissingPlurals && needsPluralHandling) {\n            lngs.forEach((language) => {\n              this.pluralResolver.getSuffixes(language, options).forEach((suffix) => {\n                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);\n              });\n            });\n          } else {\n            send(lngs, key, defaultValue);\n          }\n        }\n      }\n      res = this.extendTranslation(res, keys, options, resolved, lastKey);\n      if (usedKey && res === key && this.options.appendNamespaceToMissingKey)\n        res = `${namespace}:${key}`;\n      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {\n        if (this.options.compatibilityAPI !== \"v1\") {\n          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);\n        } else {\n          res = this.options.parseMissingKeyHandler(res);\n        }\n      }\n    }\n    if (returnDetails) {\n      resolved.res = res;\n      resolved.usedParams = this.getUsedParamsDetails(options);\n      return resolved;\n    }\n    return res;\n  }\n  extendTranslation(res, key, options, resolved, lastKey) {\n    var _this = this;\n    if (this.i18nFormat && this.i18nFormat.parse) {\n      res = this.i18nFormat.parse(res, {\n        ...this.options.interpolation.defaultVariables,\n        ...options\n      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {\n        resolved\n      });\n    } else if (!options.skipInterpolation) {\n      if (options.interpolation)\n        this.interpolator.init({\n          ...options,\n          ...{\n            interpolation: {\n              ...this.options.interpolation,\n              ...options.interpolation\n            }\n          }\n        });\n      const skipOnVariables = typeof res === \"string\" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);\n      let nestBef;\n      if (skipOnVariables) {\n        const nb = res.match(this.interpolator.nestingRegexp);\n        nestBef = nb && nb.length;\n      }\n      let data = options.replace && typeof options.replace !== \"string\" ? options.replace : options;\n      if (this.options.interpolation.defaultVariables)\n        data = {\n          ...this.options.interpolation.defaultVariables,\n          ...data\n        };\n      res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n      if (skipOnVariables) {\n        const na = res.match(this.interpolator.nestingRegexp);\n        const nestAft = na && na.length;\n        if (nestBef < nestAft)\n          options.nest = false;\n      }\n      if (!options.lng && this.options.compatibilityAPI !== \"v1\" && resolved && resolved.res)\n        options.lng = resolved.usedLng;\n      if (options.nest !== false)\n        res = this.interpolator.nest(res, function() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          if (lastKey && lastKey[0] === args[0] && !options.context) {\n            _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);\n            return null;\n          }\n          return _this.translate(...args, key);\n        }, options);\n      if (options.interpolation)\n        this.interpolator.reset();\n    }\n    const postProcess = options.postProcess || this.options.postProcess;\n    const postProcessorNames = typeof postProcess === \"string\" ? [postProcess] : postProcess;\n    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {\n      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {\n        i18nResolved: {\n          ...resolved,\n          usedParams: this.getUsedParamsDetails(options)\n        },\n        ...options\n      } : options, this);\n    }\n    return res;\n  }\n  resolve(keys) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let found;\n    let usedKey;\n    let exactUsedKey;\n    let usedLng;\n    let usedNS;\n    if (typeof keys === \"string\")\n      keys = [keys];\n    keys.forEach((k) => {\n      if (this.isValidLookup(found))\n        return;\n      const extracted = this.extractFromKey(k, options);\n      const key = extracted.key;\n      usedKey = key;\n      let namespaces = extracted.namespaces;\n      if (this.options.fallbackNS)\n        namespaces = namespaces.concat(this.options.fallbackNS);\n      const needsPluralHandling = options.count !== void 0 && typeof options.count !== \"string\";\n      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();\n      const needsContextHandling = options.context !== void 0 && (typeof options.context === \"string\" || typeof options.context === \"number\") && options.context !== \"\";\n      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);\n      namespaces.forEach((ns) => {\n        if (this.isValidLookup(found))\n          return;\n        usedNS = ns;\n        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {\n          checkedLoadedFor[`${codes[0]}-${ns}`] = true;\n          this.logger.warn(`key \"${usedKey}\" for languages \"${codes.join(\", \")}\" won't get resolved as namespace \"${usedNS}\" was not yet loaded`, \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n        }\n        codes.forEach((code) => {\n          if (this.isValidLookup(found))\n            return;\n          usedLng = code;\n          const finalKeys = [key];\n          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {\n            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n          } else {\n            let pluralSuffix;\n            if (needsPluralHandling)\n              pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);\n            const zeroSuffix = `${this.options.pluralSeparator}zero`;\n            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;\n            if (needsPluralHandling) {\n              finalKeys.push(key + pluralSuffix);\n              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {\n                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));\n              }\n              if (needsZeroSuffixLookup) {\n                finalKeys.push(key + zeroSuffix);\n              }\n            }\n            if (needsContextHandling) {\n              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;\n              finalKeys.push(contextKey);\n              if (needsPluralHandling) {\n                finalKeys.push(contextKey + pluralSuffix);\n                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {\n                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));\n                }\n                if (needsZeroSuffixLookup) {\n                  finalKeys.push(contextKey + zeroSuffix);\n                }\n              }\n            }\n          }\n          let possibleKey;\n          while (possibleKey = finalKeys.pop()) {\n            if (!this.isValidLookup(found)) {\n              exactUsedKey = possibleKey;\n              found = this.getResource(code, ns, possibleKey, options);\n            }\n          }\n        });\n      });\n    });\n    return {\n      res: found,\n      usedKey,\n      exactUsedKey,\n      usedLng,\n      usedNS\n    };\n  }\n  isValidLookup(res) {\n    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === \"\");\n  }\n  getResource(code, ns, key) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    if (this.i18nFormat && this.i18nFormat.getResource)\n      return this.i18nFormat.getResource(code, ns, key, options);\n    return this.resourceStore.getResource(code, ns, key, options);\n  }\n  getUsedParamsDetails() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const optionsKeys = [\"defaultValue\", \"ordinal\", \"context\", \"replace\", \"lng\", \"lngs\", \"fallbackLng\", \"ns\", \"keySeparator\", \"nsSeparator\", \"returnObjects\", \"returnDetails\", \"joinArrays\", \"postProcess\", \"interpolation\"];\n    const useOptionsReplaceForData = options.replace && typeof options.replace !== \"string\";\n    let data = useOptionsReplaceForData ? options.replace : options;\n    if (useOptionsReplaceForData && typeof options.count !== \"undefined\") {\n      data.count = options.count;\n    }\n    if (this.options.interpolation.defaultVariables) {\n      data = {\n        ...this.options.interpolation.defaultVariables,\n        ...data\n      };\n    }\n    if (!useOptionsReplaceForData) {\n      data = {\n        ...data\n      };\n      for (const key of optionsKeys) {\n        delete data[key];\n      }\n    }\n    return data;\n  }\n  static hasDefaultValue(options) {\n    const prefix = \"defaultValue\";\n    for (const option in options) {\n      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nvar LanguageUtil = class {\n  constructor(options) {\n    this.options = options;\n    this.supportedLngs = this.options.supportedLngs || false;\n    this.logger = baseLogger.create(\"languageUtils\");\n  }\n  getScriptPartFromCode(code) {\n    code = getCleanedCode(code);\n    if (!code || code.indexOf(\"-\") < 0)\n      return null;\n    const p = code.split(\"-\");\n    if (p.length === 2)\n      return null;\n    p.pop();\n    if (p[p.length - 1].toLowerCase() === \"x\")\n      return null;\n    return this.formatLanguageCode(p.join(\"-\"));\n  }\n  getLanguagePartFromCode(code) {\n    code = getCleanedCode(code);\n    if (!code || code.indexOf(\"-\") < 0)\n      return code;\n    const p = code.split(\"-\");\n    return this.formatLanguageCode(p[0]);\n  }\n  formatLanguageCode(code) {\n    if (typeof code === \"string\" && code.indexOf(\"-\") > -1) {\n      const specialCases = [\"hans\", \"hant\", \"latn\", \"cyrl\", \"cans\", \"mong\", \"arab\"];\n      let p = code.split(\"-\");\n      if (this.options.lowerCaseLng) {\n        p = p.map((part) => part.toLowerCase());\n      } else if (p.length === 2) {\n        p[0] = p[0].toLowerCase();\n        p[1] = p[1].toUpperCase();\n        if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n          p[1] = capitalize(p[1].toLowerCase());\n      } else if (p.length === 3) {\n        p[0] = p[0].toLowerCase();\n        if (p[1].length === 2)\n          p[1] = p[1].toUpperCase();\n        if (p[0] !== \"sgn\" && p[2].length === 2)\n          p[2] = p[2].toUpperCase();\n        if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n          p[1] = capitalize(p[1].toLowerCase());\n        if (specialCases.indexOf(p[2].toLowerCase()) > -1)\n          p[2] = capitalize(p[2].toLowerCase());\n      }\n      return p.join(\"-\");\n    }\n    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n  }\n  isSupportedCode(code) {\n    if (this.options.load === \"languageOnly\" || this.options.nonExplicitSupportedLngs) {\n      code = this.getLanguagePartFromCode(code);\n    }\n    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n  }\n  getBestMatchFromCodes(codes) {\n    if (!codes)\n      return null;\n    let found;\n    codes.forEach((code) => {\n      if (found)\n        return;\n      const cleanedLng = this.formatLanguageCode(code);\n      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng))\n        found = cleanedLng;\n    });\n    if (!found && this.options.supportedLngs) {\n      codes.forEach((code) => {\n        if (found)\n          return;\n        const lngOnly = this.getLanguagePartFromCode(code);\n        if (this.isSupportedCode(lngOnly))\n          return found = lngOnly;\n        found = this.options.supportedLngs.find((supportedLng) => {\n          if (supportedLng === lngOnly)\n            return supportedLng;\n          if (supportedLng.indexOf(\"-\") < 0 && lngOnly.indexOf(\"-\") < 0)\n            return;\n          if (supportedLng.indexOf(lngOnly) === 0)\n            return supportedLng;\n        });\n      });\n    }\n    if (!found)\n      found = this.getFallbackCodes(this.options.fallbackLng)[0];\n    return found;\n  }\n  getFallbackCodes(fallbacks, code) {\n    if (!fallbacks)\n      return [];\n    if (typeof fallbacks === \"function\")\n      fallbacks = fallbacks(code);\n    if (typeof fallbacks === \"string\")\n      fallbacks = [fallbacks];\n    if (Object.prototype.toString.apply(fallbacks) === \"[object Array]\")\n      return fallbacks;\n    if (!code)\n      return fallbacks.default || [];\n    let found = fallbacks[code];\n    if (!found)\n      found = fallbacks[this.getScriptPartFromCode(code)];\n    if (!found)\n      found = fallbacks[this.formatLanguageCode(code)];\n    if (!found)\n      found = fallbacks[this.getLanguagePartFromCode(code)];\n    if (!found)\n      found = fallbacks.default;\n    return found || [];\n  }\n  toResolveHierarchy(code, fallbackCode) {\n    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n    const codes = [];\n    const addCode = (c) => {\n      if (!c)\n        return;\n      if (this.isSupportedCode(c)) {\n        codes.push(c);\n      } else {\n        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);\n      }\n    };\n    if (typeof code === \"string\" && (code.indexOf(\"-\") > -1 || code.indexOf(\"_\") > -1)) {\n      if (this.options.load !== \"languageOnly\")\n        addCode(this.formatLanguageCode(code));\n      if (this.options.load !== \"languageOnly\" && this.options.load !== \"currentOnly\")\n        addCode(this.getScriptPartFromCode(code));\n      if (this.options.load !== \"currentOnly\")\n        addCode(this.getLanguagePartFromCode(code));\n    } else if (typeof code === \"string\") {\n      addCode(this.formatLanguageCode(code));\n    }\n    fallbackCodes.forEach((fc) => {\n      if (codes.indexOf(fc) < 0)\n        addCode(this.formatLanguageCode(fc));\n    });\n    return codes;\n  }\n};\nvar sets = [{\n  lngs: [\"ach\", \"ak\", \"am\", \"arn\", \"br\", \"fil\", \"gun\", \"ln\", \"mfe\", \"mg\", \"mi\", \"oc\", \"pt\", \"pt-BR\", \"tg\", \"tl\", \"ti\", \"tr\", \"uz\", \"wa\"],\n  nr: [1, 2],\n  fc: 1\n}, {\n  lngs: [\"af\", \"an\", \"ast\", \"az\", \"bg\", \"bn\", \"ca\", \"da\", \"de\", \"dev\", \"el\", \"en\", \"eo\", \"es\", \"et\", \"eu\", \"fi\", \"fo\", \"fur\", \"fy\", \"gl\", \"gu\", \"ha\", \"hi\", \"hu\", \"hy\", \"ia\", \"it\", \"kk\", \"kn\", \"ku\", \"lb\", \"mai\", \"ml\", \"mn\", \"mr\", \"nah\", \"nap\", \"nb\", \"ne\", \"nl\", \"nn\", \"no\", \"nso\", \"pa\", \"pap\", \"pms\", \"ps\", \"pt-PT\", \"rm\", \"sco\", \"se\", \"si\", \"so\", \"son\", \"sq\", \"sv\", \"sw\", \"ta\", \"te\", \"tk\", \"ur\", \"yo\"],\n  nr: [1, 2],\n  fc: 2\n}, {\n  lngs: [\"ay\", \"bo\", \"cgg\", \"fa\", \"ht\", \"id\", \"ja\", \"jbo\", \"ka\", \"km\", \"ko\", \"ky\", \"lo\", \"ms\", \"sah\", \"su\", \"th\", \"tt\", \"ug\", \"vi\", \"wo\", \"zh\"],\n  nr: [1],\n  fc: 3\n}, {\n  lngs: [\"be\", \"bs\", \"cnr\", \"dz\", \"hr\", \"ru\", \"sr\", \"uk\"],\n  nr: [1, 2, 5],\n  fc: 4\n}, {\n  lngs: [\"ar\"],\n  nr: [0, 1, 2, 3, 11, 100],\n  fc: 5\n}, {\n  lngs: [\"cs\", \"sk\"],\n  nr: [1, 2, 5],\n  fc: 6\n}, {\n  lngs: [\"csb\", \"pl\"],\n  nr: [1, 2, 5],\n  fc: 7\n}, {\n  lngs: [\"cy\"],\n  nr: [1, 2, 3, 8],\n  fc: 8\n}, {\n  lngs: [\"fr\"],\n  nr: [1, 2],\n  fc: 9\n}, {\n  lngs: [\"ga\"],\n  nr: [1, 2, 3, 7, 11],\n  fc: 10\n}, {\n  lngs: [\"gd\"],\n  nr: [1, 2, 3, 20],\n  fc: 11\n}, {\n  lngs: [\"is\"],\n  nr: [1, 2],\n  fc: 12\n}, {\n  lngs: [\"jv\"],\n  nr: [0, 1],\n  fc: 13\n}, {\n  lngs: [\"kw\"],\n  nr: [1, 2, 3, 4],\n  fc: 14\n}, {\n  lngs: [\"lt\"],\n  nr: [1, 2, 10],\n  fc: 15\n}, {\n  lngs: [\"lv\"],\n  nr: [1, 2, 0],\n  fc: 16\n}, {\n  lngs: [\"mk\"],\n  nr: [1, 2],\n  fc: 17\n}, {\n  lngs: [\"mnk\"],\n  nr: [0, 1, 2],\n  fc: 18\n}, {\n  lngs: [\"mt\"],\n  nr: [1, 2, 11, 20],\n  fc: 19\n}, {\n  lngs: [\"or\"],\n  nr: [2, 1],\n  fc: 2\n}, {\n  lngs: [\"ro\"],\n  nr: [1, 2, 20],\n  fc: 20\n}, {\n  lngs: [\"sl\"],\n  nr: [5, 1, 2, 3],\n  fc: 21\n}, {\n  lngs: [\"he\", \"iw\"],\n  nr: [1, 2, 20, 21],\n  fc: 22\n}];\nvar _rulesPluralsTypes = {\n  1: function(n) {\n    return Number(n > 1);\n  },\n  2: function(n) {\n    return Number(n != 1);\n  },\n  3: function(n) {\n    return 0;\n  },\n  4: function(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  5: function(n) {\n    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);\n  },\n  6: function(n) {\n    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n  },\n  7: function(n) {\n    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  8: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n  },\n  9: function(n) {\n    return Number(n >= 2);\n  },\n  10: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n  },\n  11: function(n) {\n    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);\n  },\n  12: function(n) {\n    return Number(n % 10 != 1 || n % 100 == 11);\n  },\n  13: function(n) {\n    return Number(n !== 0);\n  },\n  14: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n  },\n  15: function(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  16: function(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n  },\n  17: function(n) {\n    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);\n  },\n  18: function(n) {\n    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n  },\n  19: function(n) {\n    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);\n  },\n  20: function(n) {\n    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);\n  },\n  21: function(n) {\n    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);\n  },\n  22: function(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);\n  }\n};\nvar nonIntlVersions = [\"v1\", \"v2\", \"v3\"];\nvar intlVersions = [\"v4\"];\nvar suffixesOrder = {\n  zero: 0,\n  one: 1,\n  two: 2,\n  few: 3,\n  many: 4,\n  other: 5\n};\nfunction createRules() {\n  const rules = {};\n  sets.forEach((set) => {\n    set.lngs.forEach((l) => {\n      rules[l] = {\n        numbers: set.nr,\n        plurals: _rulesPluralsTypes[set.fc]\n      };\n    });\n  });\n  return rules;\n}\nvar PluralResolver = class {\n  constructor(languageUtils) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    this.languageUtils = languageUtils;\n    this.options = options;\n    this.logger = baseLogger.create(\"pluralResolver\");\n    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === \"undefined\" || !Intl.PluralRules)) {\n      this.options.compatibilityJSON = \"v3\";\n      this.logger.error(\"Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.\");\n    }\n    this.rules = createRules();\n  }\n  addRule(lng, obj) {\n    this.rules[lng] = obj;\n  }\n  getRule(code) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (this.shouldUseIntlApi()) {\n      try {\n        return new Intl.PluralRules(getCleanedCode(code), {\n          type: options.ordinal ? \"ordinal\" : \"cardinal\"\n        });\n      } catch {\n        return;\n      }\n    }\n    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n  }\n  needsPlural(code) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const rule = this.getRule(code, options);\n    if (this.shouldUseIntlApi()) {\n      return rule && rule.resolvedOptions().pluralCategories.length > 1;\n    }\n    return rule && rule.numbers.length > 1;\n  }\n  getPluralFormsOfKey(code, key) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return this.getSuffixes(code, options).map((suffix) => `${key}${suffix}`);\n  }\n  getSuffixes(code) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const rule = this.getRule(code, options);\n    if (!rule) {\n      return [];\n    }\n    if (this.shouldUseIntlApi()) {\n      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : \"\"}${pluralCategory}`);\n    }\n    return rule.numbers.map((number) => this.getSuffix(code, number, options));\n  }\n  getSuffix(code, count) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const rule = this.getRule(code, options);\n    if (rule) {\n      if (this.shouldUseIntlApi()) {\n        return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : \"\"}${rule.select(count)}`;\n      }\n      return this.getSuffixRetroCompatible(rule, count);\n    }\n    this.logger.warn(`no plural rule found for: ${code}`);\n    return \"\";\n  }\n  getSuffixRetroCompatible(rule, count) {\n    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n    let suffix = rule.numbers[idx];\n    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n      if (suffix === 2) {\n        suffix = \"plural\";\n      } else if (suffix === 1) {\n        suffix = \"\";\n      }\n    }\n    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();\n    if (this.options.compatibilityJSON === \"v1\") {\n      if (suffix === 1)\n        return \"\";\n      if (typeof suffix === \"number\")\n        return `_plural_${suffix.toString()}`;\n      return returnSuffix();\n    } else if (this.options.compatibilityJSON === \"v2\") {\n      return returnSuffix();\n    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n      return returnSuffix();\n    }\n    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n  }\n  shouldUseIntlApi() {\n    return !nonIntlVersions.includes(this.options.compatibilityJSON);\n  }\n};\nfunction deepFindWithDefaults(data, defaultData, key) {\n  let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \".\";\n  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n  let path = getPathWithDefaults(data, defaultData, key);\n  if (!path && ignoreJSONStructure && typeof key === \"string\") {\n    path = deepFind(data, key, keySeparator);\n    if (path === void 0)\n      path = deepFind(defaultData, key, keySeparator);\n  }\n  return path;\n}\nvar Interpolator = class {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    this.logger = baseLogger.create(\"interpolator\");\n    this.options = options;\n    this.format = options.interpolation && options.interpolation.format || ((value) => value);\n    this.init(options);\n  }\n  init() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    if (!options.interpolation)\n      options.interpolation = {\n        escapeValue: true\n      };\n    const iOpts = options.interpolation;\n    this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;\n    this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;\n    this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;\n    this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || \"{{\";\n    this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || \"}}\";\n    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n    this.unescapePrefix = iOpts.unescapeSuffix ? \"\" : iOpts.unescapePrefix || \"-\";\n    this.unescapeSuffix = this.unescapePrefix ? \"\" : iOpts.unescapeSuffix || \"\";\n    this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape(\"$t(\");\n    this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(\")\");\n    this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || \",\";\n    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;\n    this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;\n    this.resetRegExp();\n  }\n  reset() {\n    if (this.options)\n      this.init(this.options);\n  }\n  resetRegExp() {\n    const regexpStr = `${this.prefix}(.+?)${this.suffix}`;\n    this.regexp = new RegExp(regexpStr, \"g\");\n    const regexpUnescapeStr = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;\n    this.regexpUnescape = new RegExp(regexpUnescapeStr, \"g\");\n    const nestingRegexpStr = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;\n    this.nestingRegexp = new RegExp(nestingRegexpStr, \"g\");\n  }\n  interpolate(str, data, lng, options) {\n    let match;\n    let value;\n    let replaces;\n    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};\n    function regexSafe(val) {\n      return val.replace(/\\$/g, \"$$$$\");\n    }\n    const handleFormat = (key) => {\n      if (key.indexOf(this.formatSeparator) < 0) {\n        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);\n        return this.alwaysFormat ? this.format(path, void 0, lng, {\n          ...options,\n          ...data,\n          interpolationkey: key\n        }) : path;\n      }\n      const p = key.split(this.formatSeparator);\n      const k = p.shift().trim();\n      const f = p.join(this.formatSeparator).trim();\n      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {\n        ...options,\n        ...data,\n        interpolationkey: k\n      });\n    };\n    this.resetRegExp();\n    const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;\n    const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;\n    const todos = [{\n      regex: this.regexpUnescape,\n      safeValue: (val) => regexSafe(val)\n    }, {\n      regex: this.regexp,\n      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)\n    }];\n    todos.forEach((todo) => {\n      replaces = 0;\n      while (match = todo.regex.exec(str)) {\n        const matchedVar = match[1].trim();\n        value = handleFormat(matchedVar);\n        if (value === void 0) {\n          if (typeof missingInterpolationHandler === \"function\") {\n            const temp = missingInterpolationHandler(str, match, options);\n            value = typeof temp === \"string\" ? temp : \"\";\n          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {\n            value = \"\";\n          } else if (skipOnVariables) {\n            value = match[0];\n            continue;\n          } else {\n            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);\n            value = \"\";\n          }\n        } else if (typeof value !== \"string\" && !this.useRawValueToEscape) {\n          value = makeString(value);\n        }\n        const safeValue = todo.safeValue(value);\n        str = str.replace(match[0], safeValue);\n        if (skipOnVariables) {\n          todo.regex.lastIndex += value.length;\n          todo.regex.lastIndex -= match[0].length;\n        } else {\n          todo.regex.lastIndex = 0;\n        }\n        replaces++;\n        if (replaces >= this.maxReplaces) {\n          break;\n        }\n      }\n    });\n    return str;\n  }\n  nest(str, fc) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    let match;\n    let value;\n    let clonedOptions;\n    function handleHasOptions(key, inheritedOptions) {\n      const sep = this.nestingOptionsSeparator;\n      if (key.indexOf(sep) < 0)\n        return key;\n      const c = key.split(new RegExp(`${sep}[ ]*{`));\n      let optionsString = `{${c[1]}`;\n      key = c[0];\n      optionsString = this.interpolate(optionsString, clonedOptions);\n      const matchedSingleQuotes = optionsString.match(/'/g);\n      const matchedDoubleQuotes = optionsString.match(/\"/g);\n      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {\n        optionsString = optionsString.replace(/'/g, '\"');\n      }\n      try {\n        clonedOptions = JSON.parse(optionsString);\n        if (inheritedOptions)\n          clonedOptions = {\n            ...inheritedOptions,\n            ...clonedOptions\n          };\n      } catch (e) {\n        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);\n        return `${key}${sep}${optionsString}`;\n      }\n      delete clonedOptions.defaultValue;\n      return key;\n    }\n    while (match = this.nestingRegexp.exec(str)) {\n      let formatters = [];\n      clonedOptions = {\n        ...options\n      };\n      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== \"string\" ? clonedOptions.replace : clonedOptions;\n      clonedOptions.applyPostProcessor = false;\n      delete clonedOptions.defaultValue;\n      let doReduce = false;\n      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {\n        const r = match[1].split(this.formatSeparator).map((elem) => elem.trim());\n        match[1] = r.shift();\n        formatters = r;\n        doReduce = true;\n      }\n      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n      if (value && match[0] === str && typeof value !== \"string\")\n        return value;\n      if (typeof value !== \"string\")\n        value = makeString(value);\n      if (!value) {\n        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);\n        value = \"\";\n      }\n      if (doReduce) {\n        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {\n          ...options,\n          interpolationkey: match[1].trim()\n        }), value.trim());\n      }\n      str = str.replace(match[0], value);\n      this.regexp.lastIndex = 0;\n    }\n    return str;\n  }\n};\nfunction parseFormatStr(formatStr) {\n  let formatName = formatStr.toLowerCase().trim();\n  const formatOptions = {};\n  if (formatStr.indexOf(\"(\") > -1) {\n    const p = formatStr.split(\"(\");\n    formatName = p[0].toLowerCase().trim();\n    const optStr = p[1].substring(0, p[1].length - 1);\n    if (formatName === \"currency\" && optStr.indexOf(\":\") < 0) {\n      if (!formatOptions.currency)\n        formatOptions.currency = optStr.trim();\n    } else if (formatName === \"relativetime\" && optStr.indexOf(\":\") < 0) {\n      if (!formatOptions.range)\n        formatOptions.range = optStr.trim();\n    } else {\n      const opts = optStr.split(\";\");\n      opts.forEach((opt) => {\n        if (!opt)\n          return;\n        const [key, ...rest] = opt.split(\":\");\n        const val = rest.join(\":\").trim().replace(/^'+|'+$/g, \"\");\n        if (!formatOptions[key.trim()])\n          formatOptions[key.trim()] = val;\n        if (val === \"false\")\n          formatOptions[key.trim()] = false;\n        if (val === \"true\")\n          formatOptions[key.trim()] = true;\n        if (!isNaN(val))\n          formatOptions[key.trim()] = parseInt(val, 10);\n      });\n    }\n  }\n  return {\n    formatName,\n    formatOptions\n  };\n}\nfunction createCachedFormatter(fn) {\n  const cache = {};\n  return function invokeFormatter(val, lng, options) {\n    const key = lng + JSON.stringify(options);\n    let formatter = cache[key];\n    if (!formatter) {\n      formatter = fn(getCleanedCode(lng), options);\n      cache[key] = formatter;\n    }\n    return formatter(val);\n  };\n}\nvar Formatter = class {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    this.logger = baseLogger.create(\"formatter\");\n    this.options = options;\n    this.formats = {\n      number: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.NumberFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val);\n      }),\n      currency: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.NumberFormat(lng, {\n          ...opt,\n          style: \"currency\"\n        });\n        return (val) => formatter.format(val);\n      }),\n      datetime: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.DateTimeFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val);\n      }),\n      relativetime: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.RelativeTimeFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val, opt.range || \"day\");\n      }),\n      list: createCachedFormatter((lng, opt) => {\n        const formatter = new Intl.ListFormat(lng, {\n          ...opt\n        });\n        return (val) => formatter.format(val);\n      })\n    };\n    this.init(options);\n  }\n  init(services) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n      interpolation: {}\n    };\n    const iOpts = options.interpolation;\n    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \",\";\n  }\n  add(name, fc) {\n    this.formats[name.toLowerCase().trim()] = fc;\n  }\n  addCached(name, fc) {\n    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);\n  }\n  format(value, format, lng) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const formats = format.split(this.formatSeparator);\n    const result = formats.reduce((mem, f) => {\n      const {\n        formatName,\n        formatOptions\n      } = parseFormatStr(f);\n      if (this.formats[formatName]) {\n        let formatted = mem;\n        try {\n          const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};\n          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;\n          formatted = this.formats[formatName](mem, l, {\n            ...formatOptions,\n            ...options,\n            ...valOptions\n          });\n        } catch (error) {\n          this.logger.warn(error);\n        }\n        return formatted;\n      } else {\n        this.logger.warn(`there was no format function for ${formatName}`);\n      }\n      return mem;\n    }, value);\n    return result;\n  }\n};\nfunction removePending(q, name) {\n  if (q.pending[name] !== void 0) {\n    delete q.pending[name];\n    q.pendingCount--;\n  }\n}\nvar Connector = class extends EventEmitter {\n  constructor(backend, store, services) {\n    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    super();\n    this.backend = backend;\n    this.store = store;\n    this.services = services;\n    this.languageUtils = services.languageUtils;\n    this.options = options;\n    this.logger = baseLogger.create(\"backendConnector\");\n    this.waitingReads = [];\n    this.maxParallelReads = options.maxParallelReads || 10;\n    this.readingCalls = 0;\n    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;\n    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;\n    this.state = {};\n    this.queue = [];\n    if (this.backend && this.backend.init) {\n      this.backend.init(services, options.backend, options);\n    }\n  }\n  queueLoad(languages, namespaces, options, callback) {\n    const toLoad = {};\n    const pending = {};\n    const toLoadLanguages = {};\n    const toLoadNamespaces = {};\n    languages.forEach((lng) => {\n      let hasAllNamespaces = true;\n      namespaces.forEach((ns) => {\n        const name = `${lng}|${ns}`;\n        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {\n          this.state[name] = 2;\n        } else if (this.state[name] < 0)\n          ;\n        else if (this.state[name] === 1) {\n          if (pending[name] === void 0)\n            pending[name] = true;\n        } else {\n          this.state[name] = 1;\n          hasAllNamespaces = false;\n          if (pending[name] === void 0)\n            pending[name] = true;\n          if (toLoad[name] === void 0)\n            toLoad[name] = true;\n          if (toLoadNamespaces[ns] === void 0)\n            toLoadNamespaces[ns] = true;\n        }\n      });\n      if (!hasAllNamespaces)\n        toLoadLanguages[lng] = true;\n    });\n    if (Object.keys(toLoad).length || Object.keys(pending).length) {\n      this.queue.push({\n        pending,\n        pendingCount: Object.keys(pending).length,\n        loaded: {},\n        errors: [],\n        callback\n      });\n    }\n    return {\n      toLoad: Object.keys(toLoad),\n      pending: Object.keys(pending),\n      toLoadLanguages: Object.keys(toLoadLanguages),\n      toLoadNamespaces: Object.keys(toLoadNamespaces)\n    };\n  }\n  loaded(name, err, data) {\n    const s = name.split(\"|\");\n    const lng = s[0];\n    const ns = s[1];\n    if (err)\n      this.emit(\"failedLoading\", lng, ns, err);\n    if (data) {\n      this.store.addResourceBundle(lng, ns, data);\n    }\n    this.state[name] = err ? -1 : 2;\n    const loaded = {};\n    this.queue.forEach((q) => {\n      pushPath(q.loaded, [lng], ns);\n      removePending(q, name);\n      if (err)\n        q.errors.push(err);\n      if (q.pendingCount === 0 && !q.done) {\n        Object.keys(q.loaded).forEach((l) => {\n          if (!loaded[l])\n            loaded[l] = {};\n          const loadedKeys = q.loaded[l];\n          if (loadedKeys.length) {\n            loadedKeys.forEach((n) => {\n              if (loaded[l][n] === void 0)\n                loaded[l][n] = true;\n            });\n          }\n        });\n        q.done = true;\n        if (q.errors.length) {\n          q.callback(q.errors);\n        } else {\n          q.callback();\n        }\n      }\n    });\n    this.emit(\"loaded\", loaded);\n    this.queue = this.queue.filter((q) => !q.done);\n  }\n  read(lng, ns, fcName) {\n    let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;\n    let callback = arguments.length > 5 ? arguments[5] : void 0;\n    if (!lng.length)\n      return callback(null, {});\n    if (this.readingCalls >= this.maxParallelReads) {\n      this.waitingReads.push({\n        lng,\n        ns,\n        fcName,\n        tried,\n        wait,\n        callback\n      });\n      return;\n    }\n    this.readingCalls++;\n    const resolver = (err, data) => {\n      this.readingCalls--;\n      if (this.waitingReads.length > 0) {\n        const next = this.waitingReads.shift();\n        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);\n      }\n      if (err && data && tried < this.maxRetries) {\n        setTimeout(() => {\n          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);\n        }, wait);\n        return;\n      }\n      callback(err, data);\n    };\n    const fc = this.backend[fcName].bind(this.backend);\n    if (fc.length === 2) {\n      try {\n        const r = fc(lng, ns);\n        if (r && typeof r.then === \"function\") {\n          r.then((data) => resolver(null, data)).catch(resolver);\n        } else {\n          resolver(null, r);\n        }\n      } catch (err) {\n        resolver(err);\n      }\n      return;\n    }\n    return fc(lng, ns, resolver);\n  }\n  prepareLoading(languages, namespaces) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    let callback = arguments.length > 3 ? arguments[3] : void 0;\n    if (!this.backend) {\n      this.logger.warn(\"No backend was added via i18next.use. Will not load resources.\");\n      return callback && callback();\n    }\n    if (typeof languages === \"string\")\n      languages = this.languageUtils.toResolveHierarchy(languages);\n    if (typeof namespaces === \"string\")\n      namespaces = [namespaces];\n    const toLoad = this.queueLoad(languages, namespaces, options, callback);\n    if (!toLoad.toLoad.length) {\n      if (!toLoad.pending.length)\n        callback();\n      return null;\n    }\n    toLoad.toLoad.forEach((name) => {\n      this.loadOne(name);\n    });\n  }\n  load(languages, namespaces, callback) {\n    this.prepareLoading(languages, namespaces, {}, callback);\n  }\n  reload(languages, namespaces, callback) {\n    this.prepareLoading(languages, namespaces, {\n      reload: true\n    }, callback);\n  }\n  loadOne(name) {\n    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    const s = name.split(\"|\");\n    const lng = s[0];\n    const ns = s[1];\n    this.read(lng, ns, \"read\", void 0, void 0, (err, data) => {\n      if (err)\n        this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);\n      if (!err && data)\n        this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);\n      this.loaded(name, err, data);\n    });\n  }\n  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {\n    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};\n    let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {\n    };\n    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {\n      this.logger.warn(`did not save key \"${key}\" as the namespace \"${namespace}\" was not yet loaded`, \"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\");\n      return;\n    }\n    if (key === void 0 || key === null || key === \"\")\n      return;\n    if (this.backend && this.backend.create) {\n      const opts = {\n        ...options,\n        isUpdate\n      };\n      const fc = this.backend.create.bind(this.backend);\n      if (fc.length < 6) {\n        try {\n          let r;\n          if (fc.length === 5) {\n            r = fc(languages, namespace, key, fallbackValue, opts);\n          } else {\n            r = fc(languages, namespace, key, fallbackValue);\n          }\n          if (r && typeof r.then === \"function\") {\n            r.then((data) => clb(null, data)).catch(clb);\n          } else {\n            clb(null, r);\n          }\n        } catch (err) {\n          clb(err);\n        }\n      } else {\n        fc(languages, namespace, key, fallbackValue, clb, opts);\n      }\n    }\n    if (!languages || !languages[0])\n      return;\n    this.store.addResource(languages[0], namespace, key, fallbackValue);\n  }\n};\nfunction get() {\n  return {\n    debug: false,\n    initImmediate: true,\n    ns: [\"translation\"],\n    defaultNS: [\"translation\"],\n    fallbackLng: [\"dev\"],\n    fallbackNS: false,\n    supportedLngs: false,\n    nonExplicitSupportedLngs: false,\n    load: \"all\",\n    preload: false,\n    simplifyPluralSuffix: true,\n    keySeparator: \".\",\n    nsSeparator: \":\",\n    pluralSeparator: \"_\",\n    contextSeparator: \"_\",\n    partialBundledLanguages: false,\n    saveMissing: false,\n    updateMissing: false,\n    saveMissingTo: \"fallback\",\n    saveMissingPlurals: true,\n    missingKeyHandler: false,\n    missingInterpolationHandler: false,\n    postProcess: false,\n    postProcessPassResolved: false,\n    returnNull: false,\n    returnEmptyString: true,\n    returnObjects: false,\n    joinArrays: false,\n    returnedObjectHandler: false,\n    parseMissingKeyHandler: false,\n    appendNamespaceToMissingKey: false,\n    appendNamespaceToCIMode: false,\n    overloadTranslationOptionHandler: function handle(args) {\n      let ret = {};\n      if (typeof args[1] === \"object\")\n        ret = args[1];\n      if (typeof args[1] === \"string\")\n        ret.defaultValue = args[1];\n      if (typeof args[2] === \"string\")\n        ret.tDescription = args[2];\n      if (typeof args[2] === \"object\" || typeof args[3] === \"object\") {\n        const options = args[3] || args[2];\n        Object.keys(options).forEach((key) => {\n          ret[key] = options[key];\n        });\n      }\n      return ret;\n    },\n    interpolation: {\n      escapeValue: true,\n      format: (value, format, lng, options) => value,\n      prefix: \"{{\",\n      suffix: \"}}\",\n      formatSeparator: \",\",\n      unescapePrefix: \"-\",\n      nestingPrefix: \"$t(\",\n      nestingSuffix: \")\",\n      nestingOptionsSeparator: \",\",\n      maxReplaces: 1e3,\n      skipOnVariables: true\n    }\n  };\n}\nfunction transformOptions(options) {\n  if (typeof options.ns === \"string\")\n    options.ns = [options.ns];\n  if (typeof options.fallbackLng === \"string\")\n    options.fallbackLng = [options.fallbackLng];\n  if (typeof options.fallbackNS === \"string\")\n    options.fallbackNS = [options.fallbackNS];\n  if (options.supportedLngs && options.supportedLngs.indexOf(\"cimode\") < 0) {\n    options.supportedLngs = options.supportedLngs.concat([\"cimode\"]);\n  }\n  return options;\n}\nfunction noop() {\n}\nfunction bindMemberFunctions(inst) {\n  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));\n  mems.forEach((mem) => {\n    if (typeof inst[mem] === \"function\") {\n      inst[mem] = inst[mem].bind(inst);\n    }\n  });\n}\nvar I18n = class _I18n extends EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : void 0;\n    super();\n    this.options = transformOptions(options);\n    this.services = {};\n    this.logger = baseLogger;\n    this.modules = {\n      external: []\n    };\n    bindMemberFunctions(this);\n    if (callback && !this.isInitialized && !options.isClone) {\n      if (!this.options.initImmediate) {\n        this.init(options, callback);\n        return this;\n      }\n      setTimeout(() => {\n        this.init(options, callback);\n      }, 0);\n    }\n  }\n  init() {\n    var _this = this;\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : void 0;\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    if (!options.defaultNS && options.defaultNS !== false && options.ns) {\n      if (typeof options.ns === \"string\") {\n        options.defaultNS = options.ns;\n      } else if (options.ns.indexOf(\"translation\") < 0) {\n        options.defaultNS = options.ns[0];\n      }\n    }\n    const defOpts = get();\n    this.options = {\n      ...defOpts,\n      ...this.options,\n      ...transformOptions(options)\n    };\n    if (this.options.compatibilityAPI !== \"v1\") {\n      this.options.interpolation = {\n        ...defOpts.interpolation,\n        ...this.options.interpolation\n      };\n    }\n    if (options.keySeparator !== void 0) {\n      this.options.userDefinedKeySeparator = options.keySeparator;\n    }\n    if (options.nsSeparator !== void 0) {\n      this.options.userDefinedNsSeparator = options.nsSeparator;\n    }\n    function createClassOnDemand(ClassOrObject) {\n      if (!ClassOrObject)\n        return null;\n      if (typeof ClassOrObject === \"function\")\n        return new ClassOrObject();\n      return ClassOrObject;\n    }\n    if (!this.options.isClone) {\n      if (this.modules.logger) {\n        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n      } else {\n        baseLogger.init(null, this.options);\n      }\n      let formatter;\n      if (this.modules.formatter) {\n        formatter = this.modules.formatter;\n      } else if (typeof Intl !== \"undefined\") {\n        formatter = Formatter;\n      }\n      const lu = new LanguageUtil(this.options);\n      this.store = new ResourceStore(this.options.resources, this.options);\n      const s = this.services;\n      s.logger = baseLogger;\n      s.resourceStore = this.store;\n      s.languageUtils = lu;\n      s.pluralResolver = new PluralResolver(lu, {\n        prepend: this.options.pluralSeparator,\n        compatibilityJSON: this.options.compatibilityJSON,\n        simplifyPluralSuffix: this.options.simplifyPluralSuffix\n      });\n      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {\n        s.formatter = createClassOnDemand(formatter);\n        s.formatter.init(s, this.options);\n        this.options.interpolation.format = s.formatter.format.bind(s.formatter);\n      }\n      s.interpolator = new Interpolator(this.options);\n      s.utils = {\n        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n      };\n      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);\n      s.backendConnector.on(\"*\", function(event) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        _this.emit(event, ...args);\n      });\n      if (this.modules.languageDetector) {\n        s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n        if (s.languageDetector.init)\n          s.languageDetector.init(s, this.options.detection, this.options);\n      }\n      if (this.modules.i18nFormat) {\n        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n        if (s.i18nFormat.init)\n          s.i18nFormat.init(this);\n      }\n      this.translator = new Translator(this.services, this.options);\n      this.translator.on(\"*\", function(event) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        _this.emit(event, ...args);\n      });\n      this.modules.external.forEach((m) => {\n        if (m.init)\n          m.init(this);\n      });\n    }\n    this.format = this.options.interpolation.format;\n    if (!callback)\n      callback = noop;\n    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {\n      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n      if (codes.length > 0 && codes[0] !== \"dev\")\n        this.options.lng = codes[0];\n    }\n    if (!this.services.languageDetector && !this.options.lng) {\n      this.logger.warn(\"init: no languageDetector is used and no lng is defined\");\n    }\n    const storeApi = [\"getResource\", \"hasResourceBundle\", \"getResourceBundle\", \"getDataByLanguage\"];\n    storeApi.forEach((fcName) => {\n      this[fcName] = function() {\n        return _this.store[fcName](...arguments);\n      };\n    });\n    const storeApiChained = [\"addResource\", \"addResources\", \"addResourceBundle\", \"removeResourceBundle\"];\n    storeApiChained.forEach((fcName) => {\n      this[fcName] = function() {\n        _this.store[fcName](...arguments);\n        return _this;\n      };\n    });\n    const deferred = defer();\n    const load = () => {\n      const finish = (err, t2) => {\n        if (this.isInitialized && !this.initializedStoreOnce)\n          this.logger.warn(\"init: i18next is already initialized. You should call init just once!\");\n        this.isInitialized = true;\n        if (!this.options.isClone)\n          this.logger.log(\"initialized\", this.options);\n        this.emit(\"initialized\", this.options);\n        deferred.resolve(t2);\n        callback(err, t2);\n      };\n      if (this.languages && this.options.compatibilityAPI !== \"v1\" && !this.isInitialized)\n        return finish(null, this.t.bind(this));\n      this.changeLanguage(this.options.lng, finish);\n    };\n    if (this.options.resources || !this.options.initImmediate) {\n      load();\n    } else {\n      setTimeout(load, 0);\n    }\n    return deferred;\n  }\n  loadResources(language) {\n    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;\n    let usedCallback = callback;\n    const usedLng = typeof language === \"string\" ? language : this.language;\n    if (typeof language === \"function\")\n      usedCallback = language;\n    if (!this.options.resources || this.options.partialBundledLanguages) {\n      if (usedLng && usedLng.toLowerCase() === \"cimode\" && (!this.options.preload || this.options.preload.length === 0))\n        return usedCallback();\n      const toLoad = [];\n      const append = (lng) => {\n        if (!lng)\n          return;\n        if (lng === \"cimode\")\n          return;\n        const lngs = this.services.languageUtils.toResolveHierarchy(lng);\n        lngs.forEach((l) => {\n          if (l === \"cimode\")\n            return;\n          if (toLoad.indexOf(l) < 0)\n            toLoad.push(l);\n        });\n      };\n      if (!usedLng) {\n        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n        fallbacks.forEach((l) => append(l));\n      } else {\n        append(usedLng);\n      }\n      if (this.options.preload) {\n        this.options.preload.forEach((l) => append(l));\n      }\n      this.services.backendConnector.load(toLoad, this.options.ns, (e) => {\n        if (!e && !this.resolvedLanguage && this.language)\n          this.setResolvedLanguage(this.language);\n        usedCallback(e);\n      });\n    } else {\n      usedCallback(null);\n    }\n  }\n  reloadResources(lngs, ns, callback) {\n    const deferred = defer();\n    if (!lngs)\n      lngs = this.languages;\n    if (!ns)\n      ns = this.options.ns;\n    if (!callback)\n      callback = noop;\n    this.services.backendConnector.reload(lngs, ns, (err) => {\n      deferred.resolve();\n      callback(err);\n    });\n    return deferred;\n  }\n  use(module) {\n    if (!module)\n      throw new Error(\"You are passing an undefined module! Please check the object you are passing to i18next.use()\");\n    if (!module.type)\n      throw new Error(\"You are passing a wrong module! Please check the object you are passing to i18next.use()\");\n    if (module.type === \"backend\") {\n      this.modules.backend = module;\n    }\n    if (module.type === \"logger\" || module.log && module.warn && module.error) {\n      this.modules.logger = module;\n    }\n    if (module.type === \"languageDetector\") {\n      this.modules.languageDetector = module;\n    }\n    if (module.type === \"i18nFormat\") {\n      this.modules.i18nFormat = module;\n    }\n    if (module.type === \"postProcessor\") {\n      postProcessor.addPostProcessor(module);\n    }\n    if (module.type === \"formatter\") {\n      this.modules.formatter = module;\n    }\n    if (module.type === \"3rdParty\") {\n      this.modules.external.push(module);\n    }\n    return this;\n  }\n  setResolvedLanguage(l) {\n    if (!l || !this.languages)\n      return;\n    if ([\"cimode\", \"dev\"].indexOf(l) > -1)\n      return;\n    for (let li = 0; li < this.languages.length; li++) {\n      const lngInLngs = this.languages[li];\n      if ([\"cimode\", \"dev\"].indexOf(lngInLngs) > -1)\n        continue;\n      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {\n        this.resolvedLanguage = lngInLngs;\n        break;\n      }\n    }\n  }\n  changeLanguage(lng, callback) {\n    var _this2 = this;\n    this.isLanguageChangingTo = lng;\n    const deferred = defer();\n    this.emit(\"languageChanging\", lng);\n    const setLngProps = (l) => {\n      this.language = l;\n      this.languages = this.services.languageUtils.toResolveHierarchy(l);\n      this.resolvedLanguage = void 0;\n      this.setResolvedLanguage(l);\n    };\n    const done = (err, l) => {\n      if (l) {\n        setLngProps(l);\n        this.translator.changeLanguage(l);\n        this.isLanguageChangingTo = void 0;\n        this.emit(\"languageChanged\", l);\n        this.logger.log(\"languageChanged\", l);\n      } else {\n        this.isLanguageChangingTo = void 0;\n      }\n      deferred.resolve(function() {\n        return _this2.t(...arguments);\n      });\n      if (callback)\n        callback(err, function() {\n          return _this2.t(...arguments);\n        });\n    };\n    const setLng = (lngs) => {\n      if (!lng && !lngs && this.services.languageDetector)\n        lngs = [];\n      const l = typeof lngs === \"string\" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);\n      if (l) {\n        if (!this.language) {\n          setLngProps(l);\n        }\n        if (!this.translator.language)\n          this.translator.changeLanguage(l);\n        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage)\n          this.services.languageDetector.cacheUserLanguage(l);\n      }\n      this.loadResources(l, (err) => {\n        done(err, l);\n      });\n    };\n    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n      setLng(this.services.languageDetector.detect());\n    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n      if (this.services.languageDetector.detect.length === 0) {\n        this.services.languageDetector.detect().then(setLng);\n      } else {\n        this.services.languageDetector.detect(setLng);\n      }\n    } else {\n      setLng(lng);\n    }\n    return deferred;\n  }\n  getFixedT(lng, ns, keyPrefix) {\n    var _this3 = this;\n    const fixedT = function(key, opts) {\n      let options;\n      if (typeof opts !== \"object\") {\n        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          rest[_key3 - 2] = arguments[_key3];\n        }\n        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));\n      } else {\n        options = {\n          ...opts\n        };\n      }\n      options.lng = options.lng || fixedT.lng;\n      options.lngs = options.lngs || fixedT.lngs;\n      options.ns = options.ns || fixedT.ns;\n      options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;\n      const keySeparator = _this3.options.keySeparator || \".\";\n      let resultKey;\n      if (options.keyPrefix && Array.isArray(key)) {\n        resultKey = key.map((k) => `${options.keyPrefix}${keySeparator}${k}`);\n      } else {\n        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;\n      }\n      return _this3.t(resultKey, options);\n    };\n    if (typeof lng === \"string\") {\n      fixedT.lng = lng;\n    } else {\n      fixedT.lngs = lng;\n    }\n    fixedT.ns = ns;\n    fixedT.keyPrefix = keyPrefix;\n    return fixedT;\n  }\n  t() {\n    return this.translator && this.translator.translate(...arguments);\n  }\n  exists() {\n    return this.translator && this.translator.exists(...arguments);\n  }\n  setDefaultNamespace(ns) {\n    this.options.defaultNS = ns;\n  }\n  hasLoadedNamespace(ns) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (!this.isInitialized) {\n      this.logger.warn(\"hasLoadedNamespace: i18next was not initialized\", this.languages);\n      return false;\n    }\n    if (!this.languages || !this.languages.length) {\n      this.logger.warn(\"hasLoadedNamespace: i18n.languages were undefined or empty\", this.languages);\n      return false;\n    }\n    const lng = options.lng || this.resolvedLanguage || this.languages[0];\n    const fallbackLng = this.options ? this.options.fallbackLng : false;\n    const lastLng = this.languages[this.languages.length - 1];\n    if (lng.toLowerCase() === \"cimode\")\n      return true;\n    const loadNotPending = (l, n) => {\n      const loadState = this.services.backendConnector.state[`${l}|${n}`];\n      return loadState === -1 || loadState === 2;\n    };\n    if (options.precheck) {\n      const preResult = options.precheck(this, loadNotPending);\n      if (preResult !== void 0)\n        return preResult;\n    }\n    if (this.hasResourceBundle(lng, ns))\n      return true;\n    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)\n      return true;\n    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))\n      return true;\n    return false;\n  }\n  loadNamespaces(ns, callback) {\n    const deferred = defer();\n    if (!this.options.ns) {\n      if (callback)\n        callback();\n      return Promise.resolve();\n    }\n    if (typeof ns === \"string\")\n      ns = [ns];\n    ns.forEach((n) => {\n      if (this.options.ns.indexOf(n) < 0)\n        this.options.ns.push(n);\n    });\n    this.loadResources((err) => {\n      deferred.resolve();\n      if (callback)\n        callback(err);\n    });\n    return deferred;\n  }\n  loadLanguages(lngs, callback) {\n    const deferred = defer();\n    if (typeof lngs === \"string\")\n      lngs = [lngs];\n    const preloaded = this.options.preload || [];\n    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0);\n    if (!newLngs.length) {\n      if (callback)\n        callback();\n      return Promise.resolve();\n    }\n    this.options.preload = preloaded.concat(newLngs);\n    this.loadResources((err) => {\n      deferred.resolve();\n      if (callback)\n        callback(err);\n    });\n    return deferred;\n  }\n  dir(lng) {\n    if (!lng)\n      lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);\n    if (!lng)\n      return \"rtl\";\n    const rtlLngs = [\"ar\", \"shu\", \"sqr\", \"ssh\", \"xaa\", \"yhd\", \"yud\", \"aao\", \"abh\", \"abv\", \"acm\", \"acq\", \"acw\", \"acx\", \"acy\", \"adf\", \"ads\", \"aeb\", \"aec\", \"afb\", \"ajp\", \"apc\", \"apd\", \"arb\", \"arq\", \"ars\", \"ary\", \"arz\", \"auz\", \"avl\", \"ayh\", \"ayl\", \"ayn\", \"ayp\", \"bbz\", \"pga\", \"he\", \"iw\", \"ps\", \"pbt\", \"pbu\", \"pst\", \"prp\", \"prd\", \"ug\", \"ur\", \"ydd\", \"yds\", \"yih\", \"ji\", \"yi\", \"hbo\", \"men\", \"xmn\", \"fa\", \"jpr\", \"peo\", \"pes\", \"prs\", \"dv\", \"sam\", \"ckb\"];\n    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());\n    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf(\"-arab\") > 1 ? \"rtl\" : \"ltr\";\n  }\n  static createInstance() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 ? arguments[1] : void 0;\n    return new _I18n(options, callback);\n  }\n  cloneInstance() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;\n    const forkResourceStore = options.forkResourceStore;\n    if (forkResourceStore)\n      delete options.forkResourceStore;\n    const mergedOptions = {\n      ...this.options,\n      ...options,\n      ...{\n        isClone: true\n      }\n    };\n    const clone = new _I18n(mergedOptions);\n    if (options.debug !== void 0 || options.prefix !== void 0) {\n      clone.logger = clone.logger.clone(options);\n    }\n    const membersToCopy = [\"store\", \"services\", \"language\"];\n    membersToCopy.forEach((m) => {\n      clone[m] = this[m];\n    });\n    clone.services = {\n      ...this.services\n    };\n    clone.services.utils = {\n      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n    };\n    if (forkResourceStore) {\n      clone.store = new ResourceStore(this.store.data, mergedOptions);\n      clone.services.resourceStore = clone.store;\n    }\n    clone.translator = new Translator(clone.services, mergedOptions);\n    clone.translator.on(\"*\", function(event) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n      clone.emit(event, ...args);\n    });\n    clone.init(mergedOptions, callback);\n    clone.translator.options = mergedOptions;\n    clone.translator.backendConnector.services.utils = {\n      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n    };\n    return clone;\n  }\n  toJSON() {\n    return {\n      options: this.options,\n      store: this.store,\n      language: this.language,\n      languages: this.languages,\n      resolvedLanguage: this.resolvedLanguage\n    };\n  }\n};\nvar instance = I18n.createInstance();\ninstance.createInstance = I18n.createInstance;\nvar createInstance = instance.createInstance;\nvar dir = instance.dir;\nvar init = instance.init;\nvar loadResources = instance.loadResources;\nvar reloadResources = instance.reloadResources;\nvar use = instance.use;\nvar changeLanguage = instance.changeLanguage;\nvar getFixedT = instance.getFixedT;\nvar t = instance.t;\nvar exists = instance.exists;\nvar setDefaultNamespace = instance.setDefaultNamespace;\nvar hasLoadedNamespace = instance.hasLoadedNamespace;\nvar loadNamespaces = instance.loadNamespaces;\nvar loadLanguages = instance.loadLanguages;\nexport {\n  changeLanguage,\n  createInstance,\n  instance as default,\n  dir,\n  exists,\n  getFixedT,\n  hasLoadedNamespace,\n  init,\n  loadLanguages,\n  loadNamespaces,\n  loadResources,\n  reloadResources,\n  setDefaultNamespace,\n  t,\n  use\n};\n//# sourceMappingURL=i18next.js.map\n",
      "start": 1701867792046,
      "end": 1701867792048,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
