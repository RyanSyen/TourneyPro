{
  "resolvedId": "C:/Users/ryan.wong/Desktop/dev/TourneyPro_v2/node_modules/.vite/deps/chunk-ZFUPPDSN.js?v=3c106fdb",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "import {\n  require_react_dom\n} from \"./chunk-GSZ7ISAW.js\";\nimport {\n  _objectWithoutPropertiesLoose,\n  init_objectWithoutPropertiesLoose,\n  require_prop_types\n} from \"./chunk-6ZT6S2Z7.js\";\nimport {\n  _extends,\n  init_extends\n} from \"./chunk-HMTWVGVS.js\";\nimport {\n  require_react\n} from \"./chunk-ZGRSIX2Q.js\";\nimport {\n  __toESM\n} from \"./chunk-ROME4SDB.js\";\n\n// node_modules/react-transition-group/esm/Transition.js\ninit_objectWithoutPropertiesLoose();\n\n// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {\n    o2.__proto__ = p2;\n    return o2;\n  };\n  return _setPrototypeOf(o, p);\n}\n\n// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\n// node_modules/react-transition-group/esm/Transition.js\nvar import_prop_types2 = __toESM(require_prop_types());\nvar import_react2 = __toESM(require_react());\nvar import_react_dom = __toESM(require_react_dom());\n\n// node_modules/react-transition-group/esm/config.js\nvar config_default = {\n  disabled: false\n};\n\n// node_modules/react-transition-group/esm/utils/PropTypes.js\nvar import_prop_types = __toESM(require_prop_types());\nvar timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({\n  enter: import_prop_types.default.number,\n  exit: import_prop_types.default.number,\n  appear: import_prop_types.default.number\n}).isRequired]) : null;\nvar classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({\n  enter: import_prop_types.default.string,\n  exit: import_prop_types.default.string,\n  active: import_prop_types.default.string\n}), import_prop_types.default.shape({\n  enter: import_prop_types.default.string,\n  enterDone: import_prop_types.default.string,\n  enterActive: import_prop_types.default.string,\n  exit: import_prop_types.default.string,\n  exitDone: import_prop_types.default.string,\n  exitActive: import_prop_types.default.string\n})]) : null;\n\n// node_modules/react-transition-group/esm/TransitionGroupContext.js\nvar import_react = __toESM(require_react());\nvar TransitionGroupContext_default = import_react.default.createContext(null);\n\n// node_modules/react-transition-group/esm/utils/reflow.js\nvar forceReflow = function forceReflow2(node) {\n  return node.scrollTop;\n};\n\n// node_modules/react-transition-group/esm/Transition.js\nvar UNMOUNTED = \"unmounted\";\nvar EXITED = \"exited\";\nvar ENTERING = \"entering\";\nvar ENTERED = \"entered\";\nvar EXITING = \"exiting\";\nvar Transition = function(_React$Component) {\n  _inheritsLoose(Transition2, _React$Component);\n  function Transition2(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context;\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n    return null;\n  };\n  var _proto = Transition2.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n    this.updateStatus(false, nextStatus);\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout2 = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout2;\n    if (timeout2 != null && typeof timeout2 !== \"number\") {\n      exit = timeout2.exit;\n      enter = timeout2.enter;\n      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;\n    }\n    return {\n      exit,\n      enter,\n      appear\n    };\n  };\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n    if (nextStatus !== null) {\n      this.cancelNextCallback();\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);\n          if (node)\n            forceReflow(node);\n        }\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;\n    if (!mounting && !enter || config_default.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function() {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function() {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n      _this2.onTransitionEnd(enterTimeout, function() {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function() {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);\n    if (!exit || config_default.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function() {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function() {\n      _this3.props.onExiting(maybeNode);\n      _this3.onTransitionEnd(timeouts.exit, function() {\n        _this3.safeSetState({\n          status: EXITED\n        }, function() {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n    var active = true;\n    this.nextCallback = function(event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n    this.nextCallback.cancel = function() {\n      active = false;\n    };\n    return this.nextCallback;\n  };\n  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n    if (timeout2 != null) {\n      setTimeout(this.nextCallback, timeout2);\n    }\n  };\n  _proto.render = function render() {\n    var status = this.state.status;\n    if (status === UNMOUNTED) {\n      return null;\n    }\n    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n    return (\n      // allows for nested Transitions\n      import_react2.default.createElement(TransitionGroupContext_default.Provider, {\n        value: null\n      }, typeof children2 === \"function\" ? children2(status, childProps) : import_react2.default.cloneElement(import_react2.default.Children.only(children2), childProps))\n    );\n  };\n  return Transition2;\n}(import_react2.default.Component);\nTransition.contextType = TransitionGroupContext_default;\nTransition.propTypes = true ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: import_prop_types2.default.shape({\n    current: typeof Element === \"undefined\" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return import_prop_types2.default.instanceOf(value && \"ownerDocument\" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: import_prop_types2.default.bool,\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: import_prop_types2.default.bool,\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: import_prop_types2.default.bool,\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: import_prop_types2.default.bool,\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: import_prop_types2.default.bool,\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: import_prop_types2.default.bool,\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener)\n      pt = pt.isRequired;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return pt.apply(void 0, [props].concat(args));\n  },\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: import_prop_types2.default.func,\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: import_prop_types2.default.func,\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: import_prop_types2.default.func\n} : {};\nfunction noop() {\n}\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nvar Transition_default = Transition;\n\n// node_modules/react-transition-group/esm/CSSTransition.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar import_prop_types3 = __toESM(require_prop_types());\n\n// node_modules/dom-helpers/esm/hasClass.js\nfunction hasClass(element, className) {\n  if (element.classList)\n    return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}\n\n// node_modules/dom-helpers/esm/addClass.js\nfunction addClass(element, className) {\n  if (element.classList)\n    element.classList.add(className);\n  else if (!hasClass(element, className))\n    if (typeof element.className === \"string\")\n      element.className = element.className + \" \" + className;\n    else\n      element.setAttribute(\"class\", (element.className && element.className.baseVal || \"\") + \" \" + className);\n}\n\n// node_modules/dom-helpers/esm/removeClass.js\nfunction replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", \"g\"), \"$1\").replace(/\\s+/g, \" \").replace(/^\\s*|\\s*$/g, \"\");\n}\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === \"string\") {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute(\"class\", replaceClassName(element.className && element.className.baseVal || \"\", className));\n  }\n}\n\n// node_modules/react-transition-group/esm/CSSTransition.js\nvar import_react3 = __toESM(require_react());\nvar _addClass = function addClass2(node, classes) {\n  return node && classes && classes.split(\" \").forEach(function(c) {\n    return addClass(node, c);\n  });\n};\nvar removeClass2 = function removeClass3(node, classes) {\n  return node && classes && classes.split(\" \").forEach(function(c) {\n    return removeClass(node, c);\n  });\n};\nvar CSSTransition = function(_React$Component) {\n  _inheritsLoose(CSSTransition2, _React$Component);\n  function CSSTransition2() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n    _this.onEnter = function(maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];\n      _this.removeClasses(node, \"exit\");\n      _this.addClass(node, appearing ? \"appear\" : \"enter\", \"base\");\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n    _this.onEntering = function(maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];\n      var type = appearing ? \"appear\" : \"enter\";\n      _this.addClass(node, type, \"active\");\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n    _this.onEntered = function(maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];\n      var type = appearing ? \"appear\" : \"enter\";\n      _this.removeClasses(node, type);\n      _this.addClass(node, type, \"done\");\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n    _this.onExit = function(maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];\n      _this.removeClasses(node, \"appear\");\n      _this.removeClasses(node, \"enter\");\n      _this.addClass(node, \"exit\", \"base\");\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n    _this.onExiting = function(maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];\n      _this.addClass(node, \"exit\", \"active\");\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n    _this.onExited = function(maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];\n      _this.removeClasses(node, \"exit\");\n      _this.addClass(node, \"exit\", \"done\");\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n    _this.resolveArguments = function(maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];\n    };\n    _this.getClassNames = function(type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === \"string\";\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : \"\";\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName,\n        activeClassName,\n        doneClassName\n      };\n    };\n    return _this;\n  }\n  var _proto = CSSTransition2.prototype;\n  _proto.addClass = function addClass3(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n    var _this$getClassNames = this.getClassNames(\"enter\"), doneClassName = _this$getClassNames.doneClassName;\n    if (type === \"appear\" && phase === \"done\" && doneClassName) {\n      className += \" \" + doneClassName;\n    }\n    if (phase === \"active\") {\n      if (node)\n        forceReflow(node);\n    }\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n      _addClass(node, className);\n    }\n  };\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n    if (baseClassName) {\n      removeClass2(node, baseClassName);\n    }\n    if (activeClassName) {\n      removeClass2(node, activeClassName);\n    }\n    if (doneClassName) {\n      removeClass2(node, doneClassName);\n    }\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n    return import_react3.default.createElement(Transition_default, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n  return CSSTransition2;\n}(import_react3.default.Component);\nCSSTransition.defaultProps = {\n  classNames: \"\"\n};\nCSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: import_prop_types3.default.func\n}) : {};\n\n// node_modules/react-transition-group/esm/ReplaceTransition.js\ninit_objectWithoutPropertiesLoose();\nvar import_prop_types5 = __toESM(require_prop_types());\nvar import_react6 = __toESM(require_react());\nvar import_react_dom2 = __toESM(require_react_dom());\n\n// node_modules/react-transition-group/esm/TransitionGroup.js\ninit_objectWithoutPropertiesLoose();\ninit_extends();\n\n// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\n// node_modules/react-transition-group/esm/TransitionGroup.js\nvar import_prop_types4 = __toESM(require_prop_types());\nvar import_react5 = __toESM(require_react());\n\n// node_modules/react-transition-group/esm/utils/ChildMapping.js\nvar import_react4 = __toESM(require_react());\nfunction getChildMapping(children2, mapFn) {\n  var mapper = function mapper2(child) {\n    return mapFn && (0, import_react4.isValidElement)(child) ? mapFn(child) : child;\n  };\n  var result = /* @__PURE__ */ Object.create(null);\n  if (children2)\n    import_react4.Children.map(children2, function(c) {\n      return c;\n    }).forEach(function(child) {\n      result[child.key] = mapper(child);\n    });\n  return result;\n}\nfunction mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  }\n  var nextKeysPending = /* @__PURE__ */ Object.create(null);\n  var pendingKeys = [];\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n  var i;\n  var childMapping = {};\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n    childMapping[nextKey] = getValueForKey(nextKey);\n  }\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n  return childMapping;\n}\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\nfunction getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function(child) {\n    return (0, import_react4.cloneElement)(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, \"appear\", props),\n      enter: getProp(child, \"enter\", props),\n      exit: getProp(child, \"exit\", props)\n    });\n  });\n}\nfunction getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children2).forEach(function(key) {\n    var child = children2[key];\n    if (!(0, import_react4.isValidElement)(child))\n      return;\n    var hasPrev = key in prevChildMapping;\n    var hasNext = key in nextChildMapping;\n    var prevChild = prevChildMapping[key];\n    var isLeaving = (0, import_react4.isValidElement)(prevChild) && !prevChild.props.in;\n    if (hasNext && (!hasPrev || isLeaving)) {\n      children2[key] = (0, import_react4.cloneElement)(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, \"exit\", nextProps),\n        enter: getProp(child, \"enter\", nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      children2[key] = (0, import_react4.cloneElement)(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && (0, import_react4.isValidElement)(prevChild)) {\n      children2[key] = (0, import_react4.cloneElement)(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, \"exit\", nextProps),\n        enter: getProp(child, \"enter\", nextProps)\n      });\n    }\n  });\n  return children2;\n}\n\n// node_modules/react-transition-group/esm/TransitionGroup.js\nvar values = Object.values || function(obj) {\n  return Object.keys(obj).map(function(k) {\n    return obj[k];\n  });\n};\nvar defaultProps = {\n  component: \"div\",\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\nvar TransitionGroup = function(_React$Component) {\n  _inheritsLoose(TransitionGroup2, _React$Component);\n  function TransitionGroup2(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n  var _proto = TransitionGroup2.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  };\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping)\n      return;\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n    if (this.mounted) {\n      this.setState(function(state) {\n        var children2 = _extends({}, state.children);\n        delete children2[child.key];\n        return {\n          children: children2\n        };\n      });\n    }\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n    var contextValue = this.state.contextValue;\n    var children2 = values(this.state.children).map(childFactory2);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n    if (Component === null) {\n      return import_react5.default.createElement(TransitionGroupContext_default.Provider, {\n        value: contextValue\n      }, children2);\n    }\n    return import_react5.default.createElement(TransitionGroupContext_default.Provider, {\n      value: contextValue\n    }, import_react5.default.createElement(Component, props, children2));\n  };\n  return TransitionGroup2;\n}(import_react5.default.Component);\nTransitionGroup.propTypes = true ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: import_prop_types4.default.any,\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: import_prop_types4.default.node,\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: import_prop_types4.default.bool,\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: import_prop_types4.default.bool,\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: import_prop_types4.default.bool,\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: import_prop_types4.default.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nvar TransitionGroup_default = TransitionGroup;\n\n// node_modules/react-transition-group/esm/ReplaceTransition.js\nvar ReplaceTransition = function(_React$Component) {\n  _inheritsLoose(ReplaceTransition2, _React$Component);\n  function ReplaceTransition2() {\n    var _this;\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.handleEnter = function() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _this.handleLifecycle(\"onEnter\", 0, args);\n    };\n    _this.handleEntering = function() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _this.handleLifecycle(\"onEntering\", 0, args);\n    };\n    _this.handleEntered = function() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this.handleLifecycle(\"onEntered\", 0, args);\n    };\n    _this.handleExit = function() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return _this.handleLifecycle(\"onExit\", 1, args);\n    };\n    _this.handleExiting = function() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return _this.handleLifecycle(\"onExiting\", 1, args);\n    };\n    _this.handleExited = function() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return _this.handleLifecycle(\"onExited\", 1, args);\n    };\n    return _this;\n  }\n  var _proto = ReplaceTransition2.prototype;\n  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {\n    var _child$props;\n    var children2 = this.props.children;\n    var child = import_react6.default.Children.toArray(children2)[idx];\n    if (child.props[handler])\n      (_child$props = child.props)[handler].apply(_child$props, originalArgs);\n    if (this.props[handler]) {\n      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);\n      this.props[handler](maybeNode);\n    }\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\"]);\n    var _React$Children$toArr = import_react6.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];\n    delete props.onEnter;\n    delete props.onEntering;\n    delete props.onEntered;\n    delete props.onExit;\n    delete props.onExiting;\n    delete props.onExited;\n    return import_react6.default.createElement(TransitionGroup_default, props, inProp ? import_react6.default.cloneElement(first, {\n      key: \"first\",\n      onEnter: this.handleEnter,\n      onEntering: this.handleEntering,\n      onEntered: this.handleEntered\n    }) : import_react6.default.cloneElement(second, {\n      key: \"second\",\n      onEnter: this.handleExit,\n      onEntering: this.handleExiting,\n      onEntered: this.handleExited\n    }));\n  };\n  return ReplaceTransition2;\n}(import_react6.default.Component);\nReplaceTransition.propTypes = true ? {\n  in: import_prop_types5.default.bool.isRequired,\n  children: function children(props, propName) {\n    if (import_react6.default.Children.count(props[propName]) !== 2)\n      return new Error('\"' + propName + '\" must be exactly two transition components.');\n    return null;\n  }\n} : {};\n\n// node_modules/react-transition-group/esm/SwitchTransition.js\nvar import_react7 = __toESM(require_react());\nvar import_prop_types6 = __toESM(require_prop_types());\nvar _leaveRenders;\nvar _enterRenders;\nfunction areChildrenDifferent(oldChildren, newChildren) {\n  if (oldChildren === newChildren)\n    return false;\n  if (import_react7.default.isValidElement(oldChildren) && import_react7.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {\n    return false;\n  }\n  return true;\n}\nvar modes = {\n  out: \"out-in\",\n  in: \"in-out\"\n};\nvar callHook = function callHook2(element, name, cb) {\n  return function() {\n    var _element$props;\n    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);\n    cb();\n  };\n};\nvar leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {\n  var current = _ref.current, changeState = _ref.changeState;\n  return import_react7.default.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, \"onExited\", function() {\n      changeState(ENTERING, null);\n    })\n  });\n}, _leaveRenders[modes.in] = function(_ref2) {\n  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;\n  return [current, import_react7.default.cloneElement(children2, {\n    in: true,\n    onEntered: callHook(children2, \"onEntered\", function() {\n      changeState(ENTERING);\n    })\n  })];\n}, _leaveRenders);\nvar enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {\n  var children2 = _ref3.children, changeState = _ref3.changeState;\n  return import_react7.default.cloneElement(children2, {\n    in: true,\n    onEntered: callHook(children2, \"onEntered\", function() {\n      changeState(ENTERED, import_react7.default.cloneElement(children2, {\n        in: true\n      }));\n    })\n  });\n}, _enterRenders[modes.in] = function(_ref4) {\n  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;\n  return [import_react7.default.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, \"onExited\", function() {\n      changeState(ENTERED, import_react7.default.cloneElement(children2, {\n        in: true\n      }));\n    })\n  }), import_react7.default.cloneElement(children2, {\n    in: true\n  })];\n}, _enterRenders);\nvar SwitchTransition = function(_React$Component) {\n  _inheritsLoose(SwitchTransition2, _React$Component);\n  function SwitchTransition2() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      status: ENTERED,\n      current: null\n    };\n    _this.appeared = false;\n    _this.changeState = function(status, current) {\n      if (current === void 0) {\n        current = _this.state.current;\n      }\n      _this.setState({\n        status,\n        current\n      });\n    };\n    return _this;\n  }\n  var _proto = SwitchTransition2.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.appeared = true;\n  };\n  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (props.children == null) {\n      return {\n        current: null\n      };\n    }\n    if (state.status === ENTERING && props.mode === modes.in) {\n      return {\n        status: ENTERING\n      };\n    }\n    if (state.current && areChildrenDifferent(state.current, props.children)) {\n      return {\n        status: EXITING\n      };\n    }\n    return {\n      current: import_react7.default.cloneElement(props.children, {\n        in: true\n      })\n    };\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;\n    var data = {\n      children: children2,\n      current,\n      changeState: this.changeState,\n      status\n    };\n    var component;\n    switch (status) {\n      case ENTERING:\n        component = enterRenders[mode](data);\n        break;\n      case EXITING:\n        component = leaveRenders[mode](data);\n        break;\n      case ENTERED:\n        component = current;\n    }\n    return import_react7.default.createElement(TransitionGroupContext_default.Provider, {\n      value: {\n        isMounting: !this.appeared\n      }\n    }, component);\n  };\n  return SwitchTransition2;\n}(import_react7.default.Component);\nSwitchTransition.propTypes = true ? {\n  /**\n   * Transition modes.\n   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n   * `in-out`: New element transitions in first, then when complete, the current element transitions out.\n   *\n   * @type {'out-in'|'in-out'}\n   */\n  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),\n  /**\n   * Any `Transition` or `CSSTransition` component.\n   */\n  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])\n} : {};\nSwitchTransition.defaultProps = {\n  mode: modes.out\n};\n\nexport {\n  Transition_default,\n  TransitionGroup_default\n};\n//# sourceMappingURL=chunk-ZFUPPDSN.js.map\n",
      "start": 1701766112550,
      "end": 1701766112697,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:react-swc",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1701766112697,
      "end": 1701766112697,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import {\n  require_react_dom\n} from \"/node_modules/.vite/deps/chunk-GSZ7ISAW.js?v=3c106fdb\";\nimport {\n  _objectWithoutPropertiesLoose,\n  init_objectWithoutPropertiesLoose,\n  require_prop_types\n} from \"/node_modules/.vite/deps/chunk-6ZT6S2Z7.js?v=3c106fdb\";\nimport {\n  _extends,\n  init_extends\n} from \"/node_modules/.vite/deps/chunk-HMTWVGVS.js?v=3c106fdb\";\nimport {\n  require_react\n} from \"/node_modules/.vite/deps/chunk-ZGRSIX2Q.js?v=3c106fdb\";\nimport {\n  __toESM\n} from \"/node_modules/.vite/deps/chunk-ROME4SDB.js?v=3c106fdb\";\n\n// node_modules/react-transition-group/esm/Transition.js\ninit_objectWithoutPropertiesLoose();\n\n// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {\n    o2.__proto__ = p2;\n    return o2;\n  };\n  return _setPrototypeOf(o, p);\n}\n\n// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\n// node_modules/react-transition-group/esm/Transition.js\nvar import_prop_types2 = __toESM(require_prop_types());\nvar import_react2 = __toESM(require_react());\nvar import_react_dom = __toESM(require_react_dom());\n\n// node_modules/react-transition-group/esm/config.js\nvar config_default = {\n  disabled: false\n};\n\n// node_modules/react-transition-group/esm/utils/PropTypes.js\nvar import_prop_types = __toESM(require_prop_types());\nvar timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({\n  enter: import_prop_types.default.number,\n  exit: import_prop_types.default.number,\n  appear: import_prop_types.default.number\n}).isRequired]) : null;\nvar classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({\n  enter: import_prop_types.default.string,\n  exit: import_prop_types.default.string,\n  active: import_prop_types.default.string\n}), import_prop_types.default.shape({\n  enter: import_prop_types.default.string,\n  enterDone: import_prop_types.default.string,\n  enterActive: import_prop_types.default.string,\n  exit: import_prop_types.default.string,\n  exitDone: import_prop_types.default.string,\n  exitActive: import_prop_types.default.string\n})]) : null;\n\n// node_modules/react-transition-group/esm/TransitionGroupContext.js\nvar import_react = __toESM(require_react());\nvar TransitionGroupContext_default = import_react.default.createContext(null);\n\n// node_modules/react-transition-group/esm/utils/reflow.js\nvar forceReflow = function forceReflow2(node) {\n  return node.scrollTop;\n};\n\n// node_modules/react-transition-group/esm/Transition.js\nvar UNMOUNTED = \"unmounted\";\nvar EXITED = \"exited\";\nvar ENTERING = \"entering\";\nvar ENTERED = \"entered\";\nvar EXITING = \"exiting\";\nvar Transition = function(_React$Component) {\n  _inheritsLoose(Transition2, _React$Component);\n  function Transition2(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context;\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n    return null;\n  };\n  var _proto = Transition2.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n    this.updateStatus(false, nextStatus);\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout2 = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout2;\n    if (timeout2 != null && typeof timeout2 !== \"number\") {\n      exit = timeout2.exit;\n      enter = timeout2.enter;\n      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;\n    }\n    return {\n      exit,\n      enter,\n      appear\n    };\n  };\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n    if (nextStatus !== null) {\n      this.cancelNextCallback();\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);\n          if (node)\n            forceReflow(node);\n        }\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;\n    if (!mounting && !enter || config_default.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function() {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function() {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n      _this2.onTransitionEnd(enterTimeout, function() {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function() {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);\n    if (!exit || config_default.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function() {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function() {\n      _this3.props.onExiting(maybeNode);\n      _this3.onTransitionEnd(timeouts.exit, function() {\n        _this3.safeSetState({\n          status: EXITED\n        }, function() {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n    var active = true;\n    this.nextCallback = function(event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n    this.nextCallback.cancel = function() {\n      active = false;\n    };\n    return this.nextCallback;\n  };\n  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n    if (timeout2 != null) {\n      setTimeout(this.nextCallback, timeout2);\n    }\n  };\n  _proto.render = function render() {\n    var status = this.state.status;\n    if (status === UNMOUNTED) {\n      return null;\n    }\n    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n    return (\n      // allows for nested Transitions\n      import_react2.default.createElement(TransitionGroupContext_default.Provider, {\n        value: null\n      }, typeof children2 === \"function\" ? children2(status, childProps) : import_react2.default.cloneElement(import_react2.default.Children.only(children2), childProps))\n    );\n  };\n  return Transition2;\n}(import_react2.default.Component);\nTransition.contextType = TransitionGroupContext_default;\nTransition.propTypes = true ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: import_prop_types2.default.shape({\n    current: typeof Element === \"undefined\" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return import_prop_types2.default.instanceOf(value && \"ownerDocument\" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: import_prop_types2.default.bool,\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: import_prop_types2.default.bool,\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: import_prop_types2.default.bool,\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: import_prop_types2.default.bool,\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: import_prop_types2.default.bool,\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: import_prop_types2.default.bool,\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener)\n      pt = pt.isRequired;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return pt.apply(void 0, [props].concat(args));\n  },\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: import_prop_types2.default.func,\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: import_prop_types2.default.func,\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: import_prop_types2.default.func,\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: import_prop_types2.default.func\n} : {};\nfunction noop() {\n}\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nvar Transition_default = Transition;\n\n// node_modules/react-transition-group/esm/CSSTransition.js\ninit_extends();\ninit_objectWithoutPropertiesLoose();\nvar import_prop_types3 = __toESM(require_prop_types());\n\n// node_modules/dom-helpers/esm/hasClass.js\nfunction hasClass(element, className) {\n  if (element.classList)\n    return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}\n\n// node_modules/dom-helpers/esm/addClass.js\nfunction addClass(element, className) {\n  if (element.classList)\n    element.classList.add(className);\n  else if (!hasClass(element, className))\n    if (typeof element.className === \"string\")\n      element.className = element.className + \" \" + className;\n    else\n      element.setAttribute(\"class\", (element.className && element.className.baseVal || \"\") + \" \" + className);\n}\n\n// node_modules/dom-helpers/esm/removeClass.js\nfunction replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", \"g\"), \"$1\").replace(/\\s+/g, \" \").replace(/^\\s*|\\s*$/g, \"\");\n}\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === \"string\") {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute(\"class\", replaceClassName(element.className && element.className.baseVal || \"\", className));\n  }\n}\n\n// node_modules/react-transition-group/esm/CSSTransition.js\nvar import_react3 = __toESM(require_react());\nvar _addClass = function addClass2(node, classes) {\n  return node && classes && classes.split(\" \").forEach(function(c) {\n    return addClass(node, c);\n  });\n};\nvar removeClass2 = function removeClass3(node, classes) {\n  return node && classes && classes.split(\" \").forEach(function(c) {\n    return removeClass(node, c);\n  });\n};\nvar CSSTransition = function(_React$Component) {\n  _inheritsLoose(CSSTransition2, _React$Component);\n  function CSSTransition2() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n    _this.onEnter = function(maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];\n      _this.removeClasses(node, \"exit\");\n      _this.addClass(node, appearing ? \"appear\" : \"enter\", \"base\");\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n    _this.onEntering = function(maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];\n      var type = appearing ? \"appear\" : \"enter\";\n      _this.addClass(node, type, \"active\");\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n    _this.onEntered = function(maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];\n      var type = appearing ? \"appear\" : \"enter\";\n      _this.removeClasses(node, type);\n      _this.addClass(node, type, \"done\");\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n    _this.onExit = function(maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];\n      _this.removeClasses(node, \"appear\");\n      _this.removeClasses(node, \"enter\");\n      _this.addClass(node, \"exit\", \"base\");\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n    _this.onExiting = function(maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];\n      _this.addClass(node, \"exit\", \"active\");\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n    _this.onExited = function(maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];\n      _this.removeClasses(node, \"exit\");\n      _this.addClass(node, \"exit\", \"done\");\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n    _this.resolveArguments = function(maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];\n    };\n    _this.getClassNames = function(type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === \"string\";\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : \"\";\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName,\n        activeClassName,\n        doneClassName\n      };\n    };\n    return _this;\n  }\n  var _proto = CSSTransition2.prototype;\n  _proto.addClass = function addClass3(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n    var _this$getClassNames = this.getClassNames(\"enter\"), doneClassName = _this$getClassNames.doneClassName;\n    if (type === \"appear\" && phase === \"done\" && doneClassName) {\n      className += \" \" + doneClassName;\n    }\n    if (phase === \"active\") {\n      if (node)\n        forceReflow(node);\n    }\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n      _addClass(node, className);\n    }\n  };\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n    if (baseClassName) {\n      removeClass2(node, baseClassName);\n    }\n    if (activeClassName) {\n      removeClass2(node, activeClassName);\n    }\n    if (doneClassName) {\n      removeClass2(node, doneClassName);\n    }\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n    return import_react3.default.createElement(Transition_default, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n  return CSSTransition2;\n}(import_react3.default.Component);\nCSSTransition.defaultProps = {\n  classNames: \"\"\n};\nCSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: import_prop_types3.default.func,\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: import_prop_types3.default.func\n}) : {};\n\n// node_modules/react-transition-group/esm/ReplaceTransition.js\ninit_objectWithoutPropertiesLoose();\nvar import_prop_types5 = __toESM(require_prop_types());\nvar import_react6 = __toESM(require_react());\nvar import_react_dom2 = __toESM(require_react_dom());\n\n// node_modules/react-transition-group/esm/TransitionGroup.js\ninit_objectWithoutPropertiesLoose();\ninit_extends();\n\n// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\n// node_modules/react-transition-group/esm/TransitionGroup.js\nvar import_prop_types4 = __toESM(require_prop_types());\nvar import_react5 = __toESM(require_react());\n\n// node_modules/react-transition-group/esm/utils/ChildMapping.js\nvar import_react4 = __toESM(require_react());\nfunction getChildMapping(children2, mapFn) {\n  var mapper = function mapper2(child) {\n    return mapFn && (0, import_react4.isValidElement)(child) ? mapFn(child) : child;\n  };\n  var result = /* @__PURE__ */ Object.create(null);\n  if (children2)\n    import_react4.Children.map(children2, function(c) {\n      return c;\n    }).forEach(function(child) {\n      result[child.key] = mapper(child);\n    });\n  return result;\n}\nfunction mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  }\n  var nextKeysPending = /* @__PURE__ */ Object.create(null);\n  var pendingKeys = [];\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n  var i;\n  var childMapping = {};\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n    childMapping[nextKey] = getValueForKey(nextKey);\n  }\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n  return childMapping;\n}\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\nfunction getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function(child) {\n    return (0, import_react4.cloneElement)(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, \"appear\", props),\n      enter: getProp(child, \"enter\", props),\n      exit: getProp(child, \"exit\", props)\n    });\n  });\n}\nfunction getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children2).forEach(function(key) {\n    var child = children2[key];\n    if (!(0, import_react4.isValidElement)(child))\n      return;\n    var hasPrev = key in prevChildMapping;\n    var hasNext = key in nextChildMapping;\n    var prevChild = prevChildMapping[key];\n    var isLeaving = (0, import_react4.isValidElement)(prevChild) && !prevChild.props.in;\n    if (hasNext && (!hasPrev || isLeaving)) {\n      children2[key] = (0, import_react4.cloneElement)(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, \"exit\", nextProps),\n        enter: getProp(child, \"enter\", nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      children2[key] = (0, import_react4.cloneElement)(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && (0, import_react4.isValidElement)(prevChild)) {\n      children2[key] = (0, import_react4.cloneElement)(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, \"exit\", nextProps),\n        enter: getProp(child, \"enter\", nextProps)\n      });\n    }\n  });\n  return children2;\n}\n\n// node_modules/react-transition-group/esm/TransitionGroup.js\nvar values = Object.values || function(obj) {\n  return Object.keys(obj).map(function(k) {\n    return obj[k];\n  });\n};\nvar defaultProps = {\n  component: \"div\",\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\nvar TransitionGroup = function(_React$Component) {\n  _inheritsLoose(TransitionGroup2, _React$Component);\n  function TransitionGroup2(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n  var _proto = TransitionGroup2.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  };\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping)\n      return;\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n    if (this.mounted) {\n      this.setState(function(state) {\n        var children2 = _extends({}, state.children);\n        delete children2[child.key];\n        return {\n          children: children2\n        };\n      });\n    }\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n    var contextValue = this.state.contextValue;\n    var children2 = values(this.state.children).map(childFactory2);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n    if (Component === null) {\n      return import_react5.default.createElement(TransitionGroupContext_default.Provider, {\n        value: contextValue\n      }, children2);\n    }\n    return import_react5.default.createElement(TransitionGroupContext_default.Provider, {\n      value: contextValue\n    }, import_react5.default.createElement(Component, props, children2));\n  };\n  return TransitionGroup2;\n}(import_react5.default.Component);\nTransitionGroup.propTypes = true ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: import_prop_types4.default.any,\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: import_prop_types4.default.node,\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: import_prop_types4.default.bool,\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: import_prop_types4.default.bool,\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: import_prop_types4.default.bool,\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: import_prop_types4.default.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nvar TransitionGroup_default = TransitionGroup;\n\n// node_modules/react-transition-group/esm/ReplaceTransition.js\nvar ReplaceTransition = function(_React$Component) {\n  _inheritsLoose(ReplaceTransition2, _React$Component);\n  function ReplaceTransition2() {\n    var _this;\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.handleEnter = function() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _this.handleLifecycle(\"onEnter\", 0, args);\n    };\n    _this.handleEntering = function() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _this.handleLifecycle(\"onEntering\", 0, args);\n    };\n    _this.handleEntered = function() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this.handleLifecycle(\"onEntered\", 0, args);\n    };\n    _this.handleExit = function() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return _this.handleLifecycle(\"onExit\", 1, args);\n    };\n    _this.handleExiting = function() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return _this.handleLifecycle(\"onExiting\", 1, args);\n    };\n    _this.handleExited = function() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return _this.handleLifecycle(\"onExited\", 1, args);\n    };\n    return _this;\n  }\n  var _proto = ReplaceTransition2.prototype;\n  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {\n    var _child$props;\n    var children2 = this.props.children;\n    var child = import_react6.default.Children.toArray(children2)[idx];\n    if (child.props[handler])\n      (_child$props = child.props)[handler].apply(_child$props, originalArgs);\n    if (this.props[handler]) {\n      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);\n      this.props[handler](maybeNode);\n    }\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\"]);\n    var _React$Children$toArr = import_react6.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];\n    delete props.onEnter;\n    delete props.onEntering;\n    delete props.onEntered;\n    delete props.onExit;\n    delete props.onExiting;\n    delete props.onExited;\n    return import_react6.default.createElement(TransitionGroup_default, props, inProp ? import_react6.default.cloneElement(first, {\n      key: \"first\",\n      onEnter: this.handleEnter,\n      onEntering: this.handleEntering,\n      onEntered: this.handleEntered\n    }) : import_react6.default.cloneElement(second, {\n      key: \"second\",\n      onEnter: this.handleExit,\n      onEntering: this.handleExiting,\n      onEntered: this.handleExited\n    }));\n  };\n  return ReplaceTransition2;\n}(import_react6.default.Component);\nReplaceTransition.propTypes = true ? {\n  in: import_prop_types5.default.bool.isRequired,\n  children: function children(props, propName) {\n    if (import_react6.default.Children.count(props[propName]) !== 2)\n      return new Error('\"' + propName + '\" must be exactly two transition components.');\n    return null;\n  }\n} : {};\n\n// node_modules/react-transition-group/esm/SwitchTransition.js\nvar import_react7 = __toESM(require_react());\nvar import_prop_types6 = __toESM(require_prop_types());\nvar _leaveRenders;\nvar _enterRenders;\nfunction areChildrenDifferent(oldChildren, newChildren) {\n  if (oldChildren === newChildren)\n    return false;\n  if (import_react7.default.isValidElement(oldChildren) && import_react7.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {\n    return false;\n  }\n  return true;\n}\nvar modes = {\n  out: \"out-in\",\n  in: \"in-out\"\n};\nvar callHook = function callHook2(element, name, cb) {\n  return function() {\n    var _element$props;\n    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);\n    cb();\n  };\n};\nvar leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {\n  var current = _ref.current, changeState = _ref.changeState;\n  return import_react7.default.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, \"onExited\", function() {\n      changeState(ENTERING, null);\n    })\n  });\n}, _leaveRenders[modes.in] = function(_ref2) {\n  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;\n  return [current, import_react7.default.cloneElement(children2, {\n    in: true,\n    onEntered: callHook(children2, \"onEntered\", function() {\n      changeState(ENTERING);\n    })\n  })];\n}, _leaveRenders);\nvar enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {\n  var children2 = _ref3.children, changeState = _ref3.changeState;\n  return import_react7.default.cloneElement(children2, {\n    in: true,\n    onEntered: callHook(children2, \"onEntered\", function() {\n      changeState(ENTERED, import_react7.default.cloneElement(children2, {\n        in: true\n      }));\n    })\n  });\n}, _enterRenders[modes.in] = function(_ref4) {\n  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;\n  return [import_react7.default.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, \"onExited\", function() {\n      changeState(ENTERED, import_react7.default.cloneElement(children2, {\n        in: true\n      }));\n    })\n  }), import_react7.default.cloneElement(children2, {\n    in: true\n  })];\n}, _enterRenders);\nvar SwitchTransition = function(_React$Component) {\n  _inheritsLoose(SwitchTransition2, _React$Component);\n  function SwitchTransition2() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      status: ENTERED,\n      current: null\n    };\n    _this.appeared = false;\n    _this.changeState = function(status, current) {\n      if (current === void 0) {\n        current = _this.state.current;\n      }\n      _this.setState({\n        status,\n        current\n      });\n    };\n    return _this;\n  }\n  var _proto = SwitchTransition2.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    this.appeared = true;\n  };\n  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (props.children == null) {\n      return {\n        current: null\n      };\n    }\n    if (state.status === ENTERING && props.mode === modes.in) {\n      return {\n        status: ENTERING\n      };\n    }\n    if (state.current && areChildrenDifferent(state.current, props.children)) {\n      return {\n        status: EXITING\n      };\n    }\n    return {\n      current: import_react7.default.cloneElement(props.children, {\n        in: true\n      })\n    };\n  };\n  _proto.render = function render() {\n    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;\n    var data = {\n      children: children2,\n      current,\n      changeState: this.changeState,\n      status\n    };\n    var component;\n    switch (status) {\n      case ENTERING:\n        component = enterRenders[mode](data);\n        break;\n      case EXITING:\n        component = leaveRenders[mode](data);\n        break;\n      case ENTERED:\n        component = current;\n    }\n    return import_react7.default.createElement(TransitionGroupContext_default.Provider, {\n      value: {\n        isMounting: !this.appeared\n      }\n    }, component);\n  };\n  return SwitchTransition2;\n}(import_react7.default.Component);\nSwitchTransition.propTypes = true ? {\n  /**\n   * Transition modes.\n   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n   * `in-out`: New element transitions in first, then when complete, the current element transitions out.\n   *\n   * @type {'out-in'|'in-out'}\n   */\n  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),\n  /**\n   * Any `Transition` or `CSSTransition` component.\n   */\n  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])\n} : {};\nSwitchTransition.defaultProps = {\n  mode: modes.out\n};\n\nexport {\n  Transition_default,\n  TransitionGroup_default\n};\n//# sourceMappingURL=chunk-ZFUPPDSN.js.map\n",
      "start": 1701766112697,
      "end": 1701766112698,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
